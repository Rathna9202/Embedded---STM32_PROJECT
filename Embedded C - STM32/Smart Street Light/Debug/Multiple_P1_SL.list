
Multiple_P1_SL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e28  08005e28  00020470  2**0
                  CONTENTS
  4 .ARM          00000008  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e30  08005e30  00020470  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000470  20000000  08005e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000470  080062a8  00020470  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000688  080062a8  00020688  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020470  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da37  00000000  00000000  000204a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002064  00000000  00000000  0002ded7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b20  00000000  00000000  0002ff40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  00030a60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022852  00000000  00000000  000314c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f2b3  00000000  00000000  00053d12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc4e6  00000000  00000000  00062fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012f4ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039f8  00000000  00000000  0012f4fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000470 	.word	0x20000470
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005b8c 	.word	0x08005b8c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000474 	.word	0x20000474
 800020c:	08005b8c 	.word	0x08005b8c

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <lcd_send_cmd>:
extern volatile uint8_t relay1_state;
extern volatile uint8_t relay2_state;
extern volatile uint8_t relay3_state;
extern volatile uint8_t relay4_state;

void lcd_send_cmd(char cmd) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b086      	sub	sp, #24
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
    // Implementation for sending commands to the LCD
	char data_u, data_l;
	    uint8_t data_t[4];
	    data_u = (cmd & 0xf0);
 80005ee:	79fb      	ldrb	r3, [r7, #7]
 80005f0:	f023 030f 	bic.w	r3, r3, #15
 80005f4:	73fb      	strb	r3, [r7, #15]
	    data_l = ((cmd << 4) & 0xf0);
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	011b      	lsls	r3, r3, #4
 80005fa:	73bb      	strb	r3, [r7, #14]
	    data_t[0] = data_u | 0x0C;  // en=1, rs=0
 80005fc:	7bfb      	ldrb	r3, [r7, #15]
 80005fe:	f043 030c 	orr.w	r3, r3, #12
 8000602:	b2db      	uxtb	r3, r3
 8000604:	723b      	strb	r3, [r7, #8]
	    data_t[1] = data_u | 0x08;  // en=0, rs=0
 8000606:	7bfb      	ldrb	r3, [r7, #15]
 8000608:	f043 0308 	orr.w	r3, r3, #8
 800060c:	b2db      	uxtb	r3, r3
 800060e:	727b      	strb	r3, [r7, #9]
	    data_t[2] = data_l | 0x0C;  // en=1, rs=0
 8000610:	7bbb      	ldrb	r3, [r7, #14]
 8000612:	f043 030c 	orr.w	r3, r3, #12
 8000616:	b2db      	uxtb	r3, r3
 8000618:	72bb      	strb	r3, [r7, #10]
	    data_t[3] = data_l | 0x08;  // en=0, rs=0
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	f043 0308 	orr.w	r3, r3, #8
 8000620:	b2db      	uxtb	r3, r3
 8000622:	72fb      	strb	r3, [r7, #11]
	    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000624:	f107 0208 	add.w	r2, r7, #8
 8000628:	2364      	movs	r3, #100	; 0x64
 800062a:	9300      	str	r3, [sp, #0]
 800062c:	2304      	movs	r3, #4
 800062e:	214e      	movs	r1, #78	; 0x4e
 8000630:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_cmd+0x5c>)
 8000632:	f001 fb5d 	bl	8001cf0 <HAL_I2C_Master_Transmit>
}
 8000636:	bf00      	nop
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	20000594 	.word	0x20000594

08000644 <lcd_send_data>:

void lcd_send_data(char data) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b086      	sub	sp, #24
 8000648:	af02      	add	r7, sp, #8
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    // Implementation for sending data to the LCD
	char data_u, data_l;
	    uint8_t data_t[4];
	    data_u = (data & 0xf0);
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	f023 030f 	bic.w	r3, r3, #15
 8000654:	73fb      	strb	r3, [r7, #15]
	    data_l = ((data << 4) & 0xf0);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	011b      	lsls	r3, r3, #4
 800065a:	73bb      	strb	r3, [r7, #14]
	    data_t[0] = data_u | 0x0D;  // en=1, rs=1
 800065c:	7bfb      	ldrb	r3, [r7, #15]
 800065e:	f043 030d 	orr.w	r3, r3, #13
 8000662:	b2db      	uxtb	r3, r3
 8000664:	723b      	strb	r3, [r7, #8]
	    data_t[1] = data_u | 0x09;  // en=0, rs=1
 8000666:	7bfb      	ldrb	r3, [r7, #15]
 8000668:	f043 0309 	orr.w	r3, r3, #9
 800066c:	b2db      	uxtb	r3, r3
 800066e:	727b      	strb	r3, [r7, #9]
	    data_t[2] = data_l | 0x0D;  // en=1, rs=1
 8000670:	7bbb      	ldrb	r3, [r7, #14]
 8000672:	f043 030d 	orr.w	r3, r3, #13
 8000676:	b2db      	uxtb	r3, r3
 8000678:	72bb      	strb	r3, [r7, #10]
	    data_t[3] = data_l | 0x09;  // en=0, rs=1
 800067a:	7bbb      	ldrb	r3, [r7, #14]
 800067c:	f043 0309 	orr.w	r3, r3, #9
 8000680:	b2db      	uxtb	r3, r3
 8000682:	72fb      	strb	r3, [r7, #11]
	    HAL_I2C_Master_Transmit(&hi2c1, I2C_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000684:	f107 0208 	add.w	r2, r7, #8
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	9300      	str	r3, [sp, #0]
 800068c:	2304      	movs	r3, #4
 800068e:	214e      	movs	r1, #78	; 0x4e
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <lcd_send_data+0x5c>)
 8000692:	f001 fb2d 	bl	8001cf0 <HAL_I2C_Master_Transmit>
}
 8000696:	bf00      	nop
 8000698:	3710      	adds	r7, #16
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	20000594 	.word	0x20000594

080006a4 <lcd_init>:

void lcd_init(void) {
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    lcd_send_cmd(0x02);  // initialize LCD in 4-bit mode
 80006a8:	2002      	movs	r0, #2
 80006aa:	f7ff ff9b 	bl	80005e4 <lcd_send_cmd>
    lcd_send_cmd(0x28);  // 2 line, 5*7 matrix
 80006ae:	2028      	movs	r0, #40	; 0x28
 80006b0:	f7ff ff98 	bl	80005e4 <lcd_send_cmd>
    lcd_send_cmd(0x0c);  // display on, cursor off
 80006b4:	200c      	movs	r0, #12
 80006b6:	f7ff ff95 	bl	80005e4 <lcd_send_cmd>
    lcd_send_cmd(0x80);  // force cursor to beginning (1st line)
 80006ba:	2080      	movs	r0, #128	; 0x80
 80006bc:	f7ff ff92 	bl	80005e4 <lcd_send_cmd>
}
 80006c0:	bf00      	nop
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <lcd_send_string>:

void lcd_send_string(char *str) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
    while (*str) lcd_send_data(*str++);
 80006cc:	e006      	b.n	80006dc <lcd_send_string+0x18>
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	607a      	str	r2, [r7, #4]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff ffb4 	bl	8000644 <lcd_send_data>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d1f4      	bne.n	80006ce <lcd_send_string+0xa>
}
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
	...

080006f0 <UpdateLCD>:

void UpdateLCD(void) {
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af02      	add	r7, sp, #8
    char buffer[32];

    // Set cursor to the first line and print SL1 and SL2 states
    lcd_send_cmd(0x80);  // move cursor to the first line
 80006f6:	2080      	movs	r0, #128	; 0x80
 80006f8:	f7ff ff74 	bl	80005e4 <lcd_send_cmd>
    snprintf(buffer, sizeof(buffer), "SL1:%s  SL2:%s",
             relay1_state ? " on" : "off",
 80006fc:	4b1e      	ldr	r3, [pc, #120]	; (8000778 <UpdateLCD+0x88>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b2db      	uxtb	r3, r3
    snprintf(buffer, sizeof(buffer), "SL1:%s  SL2:%s",
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <UpdateLCD+0x1a>
 8000706:	4a1d      	ldr	r2, [pc, #116]	; (800077c <UpdateLCD+0x8c>)
 8000708:	e000      	b.n	800070c <UpdateLCD+0x1c>
 800070a:	4a1d      	ldr	r2, [pc, #116]	; (8000780 <UpdateLCD+0x90>)
             relay2_state ? " on" : "off");
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <UpdateLCD+0x94>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	b2db      	uxtb	r3, r3
    snprintf(buffer, sizeof(buffer), "SL1:%s  SL2:%s",
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <UpdateLCD+0x2a>
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <UpdateLCD+0x8c>)
 8000718:	e000      	b.n	800071c <UpdateLCD+0x2c>
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <UpdateLCD+0x90>)
 800071c:	4638      	mov	r0, r7
 800071e:	9300      	str	r3, [sp, #0]
 8000720:	4613      	mov	r3, r2
 8000722:	4a19      	ldr	r2, [pc, #100]	; (8000788 <UpdateLCD+0x98>)
 8000724:	2120      	movs	r1, #32
 8000726:	f003 fbd9 	bl	8003edc <sniprintf>
    lcd_send_string(buffer);
 800072a:	463b      	mov	r3, r7
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff ffc9 	bl	80006c4 <lcd_send_string>

    // Set cursor to the second line and print SL3 and SL4 states
    lcd_send_cmd(0xC0);  // move cursor to the second line
 8000732:	20c0      	movs	r0, #192	; 0xc0
 8000734:	f7ff ff56 	bl	80005e4 <lcd_send_cmd>
    snprintf(buffer, sizeof(buffer), "SL3:%s  SL4:%s",
             relay3_state ? " on" : "off",
 8000738:	4b14      	ldr	r3, [pc, #80]	; (800078c <UpdateLCD+0x9c>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
    snprintf(buffer, sizeof(buffer), "SL3:%s  SL4:%s",
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <UpdateLCD+0x56>
 8000742:	4a0e      	ldr	r2, [pc, #56]	; (800077c <UpdateLCD+0x8c>)
 8000744:	e000      	b.n	8000748 <UpdateLCD+0x58>
 8000746:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <UpdateLCD+0x90>)
             relay4_state ? " on" : "off");
 8000748:	4b11      	ldr	r3, [pc, #68]	; (8000790 <UpdateLCD+0xa0>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	b2db      	uxtb	r3, r3
    snprintf(buffer, sizeof(buffer), "SL3:%s  SL4:%s",
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <UpdateLCD+0x66>
 8000752:	4b0a      	ldr	r3, [pc, #40]	; (800077c <UpdateLCD+0x8c>)
 8000754:	e000      	b.n	8000758 <UpdateLCD+0x68>
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <UpdateLCD+0x90>)
 8000758:	4638      	mov	r0, r7
 800075a:	9300      	str	r3, [sp, #0]
 800075c:	4613      	mov	r3, r2
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <UpdateLCD+0xa4>)
 8000760:	2120      	movs	r1, #32
 8000762:	f003 fbbb 	bl	8003edc <sniprintf>
    lcd_send_string(buffer);
 8000766:	463b      	mov	r3, r7
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff ffab 	bl	80006c4 <lcd_send_string>
}
 800076e:	bf00      	nop
 8000770:	3720      	adds	r7, #32
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	2000058e 	.word	0x2000058e
 800077c:	08005ba4 	.word	0x08005ba4
 8000780:	08005ba8 	.word	0x08005ba8
 8000784:	2000058f 	.word	0x2000058f
 8000788:	08005bac 	.word	0x08005bac
 800078c:	20000590 	.word	0x20000590
 8000790:	20000591 	.word	0x20000591
 8000794:	08005bbc 	.word	0x08005bbc

08000798 <TransmitCommand>:
    "AT+MODE=TEST\r\n",
    "AT+TEST=RFCFG,866,SF12,125,12,15,14,ON,OFF,OFF\r\n",
    "AT+TEST=RXLRPKT\r\n"
};

void TransmitCommand(uint8_t cmdIndex) {
 8000798:	b590      	push	{r4, r7, lr}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	71fb      	strb	r3, [r7, #7]
    printf("Transmitting Command: %s", cmdQueue[cmdIndex]);  // Debug print for command
 80007a2:	79fb      	ldrb	r3, [r7, #7]
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <TransmitCommand+0x48>)
 80007a8:	4413      	add	r3, r2
 80007aa:	4619      	mov	r1, r3
 80007ac:	480d      	ldr	r0, [pc, #52]	; (80007e4 <TransmitCommand+0x4c>)
 80007ae:	f003 fb7d 	bl	8003eac <iprintf>
    HAL_UART_Transmit_IT(&huart1, (uint8_t *)cmdQueue[cmdIndex], strlen(cmdQueue[cmdIndex]));
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	021b      	lsls	r3, r3, #8
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <TransmitCommand+0x48>)
 80007b8:	189c      	adds	r4, r3, r2
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	021b      	lsls	r3, r3, #8
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <TransmitCommand+0x48>)
 80007c0:	4413      	add	r3, r2
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fd2e 	bl	8000224 <strlen>
 80007c8:	4603      	mov	r3, r0
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	4621      	mov	r1, r4
 80007d0:	4805      	ldr	r0, [pc, #20]	; (80007e8 <TransmitCommand+0x50>)
 80007d2:	f002 fbca 	bl	8002f6a <HAL_UART_Transmit_IT>
}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd90      	pop	{r4, r7, pc}
 80007de:	bf00      	nop
 80007e0:	20000000 	.word	0x20000000
 80007e4:	08005bcc 	.word	0x08005bcc
 80007e8:	200005e8 	.word	0x200005e8

080007ec <ReceiveResponse>:

void ReceiveResponse(void) {
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    HAL_UART_Receive_IT(&huart1, (uint8_t *)&rxBuffer[rxIndex], 1);
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <ReceiveResponse+0x20>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	b29b      	uxth	r3, r3
 80007f6:	461a      	mov	r2, r3
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <ReceiveResponse+0x24>)
 80007fa:	4413      	add	r3, r2
 80007fc:	2201      	movs	r2, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <ReceiveResponse+0x28>)
 8000802:	f002 fbf7 	bl	8002ff4 <HAL_UART_Receive_IT>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	2000058c 	.word	0x2000058c
 8000810:	2000048c 	.word	0x2000048c
 8000814:	200005e8 	.word	0x200005e8

08000818 <lora_config>:

void lora_config() {
 8000818:	b580      	push	{r7, lr}
 800081a:	af00      	add	r7, sp, #0
    TransmitCommand(0); // AT command
 800081c:	2000      	movs	r0, #0
 800081e:	f7ff ffbb 	bl	8000798 <TransmitCommand>
    HAL_Delay(500);
 8000822:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000826:	f000 fda9 	bl	800137c <HAL_Delay>
    ReceiveResponse();
 800082a:	f7ff ffdf 	bl	80007ec <ReceiveResponse>

    TransmitCommand(1); // AT+MODE=TEST
 800082e:	2001      	movs	r0, #1
 8000830:	f7ff ffb2 	bl	8000798 <TransmitCommand>
    HAL_Delay(500);
 8000834:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000838:	f000 fda0 	bl	800137c <HAL_Delay>
    ReceiveResponse();
 800083c:	f7ff ffd6 	bl	80007ec <ReceiveResponse>

    TransmitCommand(2); // AT+TEST=RFCFG
 8000840:	2002      	movs	r0, #2
 8000842:	f7ff ffa9 	bl	8000798 <TransmitCommand>
    HAL_Delay(500);
 8000846:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800084a:	f000 fd97 	bl	800137c <HAL_Delay>
    ReceiveResponse();
 800084e:	f7ff ffcd 	bl	80007ec <ReceiveResponse>

    TransmitCommand(3); // AT+TEST=RXLRPKT
 8000852:	2003      	movs	r0, #3
 8000854:	f7ff ffa0 	bl	8000798 <TransmitCommand>
    HAL_Delay(500);
 8000858:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800085c:	f000 fd8e 	bl	800137c <HAL_Delay>
    ReceiveResponse();
 8000860:	f7ff ffc4 	bl	80007ec <ReceiveResponse>
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000868:	b580      	push	{r7, lr}
 800086a:	b0e8      	sub	sp, #416	; 0x1a0
 800086c:	af00      	add	r7, sp, #0
 800086e:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000872:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000876:	6018      	str	r0, [r3, #0]
    if (huart->Instance == USART1) {
 8000878:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800087c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a92      	ldr	r2, [pc, #584]	; (8000ad0 <HAL_UART_RxCpltCallback+0x268>)
 8000886:	4293      	cmp	r3, r2
 8000888:	f040 811c 	bne.w	8000ac4 <HAL_UART_RxCpltCallback+0x25c>
        if (rxBuffer[rxIndex] == '\n') {
 800088c:	4b91      	ldr	r3, [pc, #580]	; (8000ad4 <HAL_UART_RxCpltCallback+0x26c>)
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	b29b      	uxth	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	4b90      	ldr	r3, [pc, #576]	; (8000ad8 <HAL_UART_RxCpltCallback+0x270>)
 8000896:	5c9b      	ldrb	r3, [r3, r2]
 8000898:	2b0a      	cmp	r3, #10
 800089a:	f040 810a 	bne.w	8000ab2 <HAL_UART_RxCpltCallback+0x24a>
            rxBuffer[rxIndex + 1] = '\0'; // Null-terminate the buffer
 800089e:	4b8d      	ldr	r3, [pc, #564]	; (8000ad4 <HAL_UART_RxCpltCallback+0x26c>)
 80008a0:	881b      	ldrh	r3, [r3, #0]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	3301      	adds	r3, #1
 80008a6:	4a8c      	ldr	r2, [pc, #560]	; (8000ad8 <HAL_UART_RxCpltCallback+0x270>)
 80008a8:	2100      	movs	r1, #0
 80008aa:	54d1      	strb	r1, [r2, r3]
            char *payloadStart = strstr((char *)rxBuffer, "+TEST: RX \"");
 80008ac:	498b      	ldr	r1, [pc, #556]	; (8000adc <HAL_UART_RxCpltCallback+0x274>)
 80008ae:	488a      	ldr	r0, [pc, #552]	; (8000ad8 <HAL_UART_RxCpltCallback+0x270>)
 80008b0:	f003 fbd9 	bl	8004066 <strstr>
 80008b4:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
                        if (payloadStart) {
 80008b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80008bc:	2b00      	cmp	r3, #0
 80008be:	f000 80f4 	beq.w	8000aaa <HAL_UART_RxCpltCallback+0x242>
                            payloadStart += strlen("+TEST: RX \"");
 80008c2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80008c6:	330b      	adds	r3, #11
 80008c8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

                            char extractedData[256];
                            char *endQuote = strchr(payloadStart, '\"');
 80008cc:	2122      	movs	r1, #34	; 0x22
 80008ce:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 80008d2:	f003 fba8 	bl	8004026 <strchr>
 80008d6:	f8c7 0190 	str.w	r0, [r7, #400]	; 0x190
                            if (endQuote) {
 80008da:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f000 80e3 	beq.w	8000aaa <HAL_UART_RxCpltCallback+0x242>
                                size_t length = endQuote - payloadStart;
 80008e4:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80008e8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80008ec:	1ad3      	subs	r3, r2, r3
 80008ee:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
                                strncpy(extractedData, payloadStart, length);
 80008f2:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80008f6:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80008fa:	f8d7 1194 	ldr.w	r1, [r7, #404]	; 0x194
 80008fe:	4618      	mov	r0, r3
 8000900:	f003 fb9e 	bl	8004040 <strncpy>
                                extractedData[length] = '\0';
 8000904:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 8000908:	f5a3 728c 	sub.w	r2, r3, #280	; 0x118
 800090c:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000910:	4413      	add	r3, r2
 8000912:	2200      	movs	r2, #0
 8000914:	701a      	strb	r2, [r3, #0]

                                char asciiString[128];
                                size_t i, j;
                                for (i = 0, j = 0; i < length; i += 2) {
 8000916:	2300      	movs	r3, #0
 8000918:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800091c:	2300      	movs	r3, #0
 800091e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8000922:	e01c      	b.n	800095e <HAL_UART_RxCpltCallback+0xf6>
                                    unsigned int hexValue;
                                    sscanf(&extractedData[i], "%2x", &hexValue);
 8000924:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8000928:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 800092c:	4413      	add	r3, r2
 800092e:	f507 72c4 	add.w	r2, r7, #392	; 0x188
 8000932:	496b      	ldr	r1, [pc, #428]	; (8000ae0 <HAL_UART_RxCpltCallback+0x278>)
 8000934:	4618      	mov	r0, r3
 8000936:	f003 fb05 	bl	8003f44 <siscanf>
                                    asciiString[j++] = (char)hexValue;
 800093a:	f8d7 1188 	ldr.w	r1, [r7, #392]	; 0x188
 800093e:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8000948:	b2c9      	uxtb	r1, r1
 800094a:	f507 72d0 	add.w	r2, r7, #416	; 0x1a0
 800094e:	f5a2 72cc 	sub.w	r2, r2, #408	; 0x198
 8000952:	54d1      	strb	r1, [r2, r3]
                                for (i = 0, j = 0; i < length; i += 2) {
 8000954:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8000958:	3302      	adds	r3, #2
 800095a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800095e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000962:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000966:	429a      	cmp	r2, r3
 8000968:	d3dc      	bcc.n	8000924 <HAL_UART_RxCpltCallback+0xbc>
                                }
                                asciiString[j] = '\0';
 800096a:	f507 73d0 	add.w	r3, r7, #416	; 0x1a0
 800096e:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 8000972:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8000976:	4413      	add	r3, r2
 8000978:	2200      	movs	r2, #0
 800097a:	701a      	strb	r2, [r3, #0]

                                printf("Last Received Data: %s\n", asciiString);
 800097c:	f107 0308 	add.w	r3, r7, #8
 8000980:	4619      	mov	r1, r3
 8000982:	4858      	ldr	r0, [pc, #352]	; (8000ae4 <HAL_UART_RxCpltCallback+0x27c>)
 8000984:	f003 fa92 	bl	8003eac <iprintf>

                                if (strcmp(asciiString, "SL1:ON") == 0) {
 8000988:	f107 0308 	add.w	r3, r7, #8
 800098c:	4956      	ldr	r1, [pc, #344]	; (8000ae8 <HAL_UART_RxCpltCallback+0x280>)
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff fc3e 	bl	8000210 <strcmp>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d108      	bne.n	80009ac <HAL_UART_RxCpltCallback+0x144>
                                    HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_SET);
 800099a:	2201      	movs	r2, #1
 800099c:	2101      	movs	r1, #1
 800099e:	4853      	ldr	r0, [pc, #332]	; (8000aec <HAL_UART_RxCpltCallback+0x284>)
 80009a0:	f001 f848 	bl	8001a34 <HAL_GPIO_WritePin>
                                    relay1_state = 1;
 80009a4:	4b52      	ldr	r3, [pc, #328]	; (8000af0 <HAL_UART_RxCpltCallback+0x288>)
 80009a6:	2201      	movs	r2, #1
 80009a8:	701a      	strb	r2, [r3, #0]
 80009aa:	e07c      	b.n	8000aa6 <HAL_UART_RxCpltCallback+0x23e>
                                } else if (strcmp(asciiString, "SL1:OFF") == 0) {
 80009ac:	f107 0308 	add.w	r3, r7, #8
 80009b0:	4950      	ldr	r1, [pc, #320]	; (8000af4 <HAL_UART_RxCpltCallback+0x28c>)
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fc2c 	bl	8000210 <strcmp>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d108      	bne.n	80009d0 <HAL_UART_RxCpltCallback+0x168>
                                    HAL_GPIO_WritePin(RELAY1_PORT, RELAY1_PIN, GPIO_PIN_RESET);
 80009be:	2200      	movs	r2, #0
 80009c0:	2101      	movs	r1, #1
 80009c2:	484a      	ldr	r0, [pc, #296]	; (8000aec <HAL_UART_RxCpltCallback+0x284>)
 80009c4:	f001 f836 	bl	8001a34 <HAL_GPIO_WritePin>
                                    relay1_state = 0;
 80009c8:	4b49      	ldr	r3, [pc, #292]	; (8000af0 <HAL_UART_RxCpltCallback+0x288>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	701a      	strb	r2, [r3, #0]
 80009ce:	e06a      	b.n	8000aa6 <HAL_UART_RxCpltCallback+0x23e>
                                } else if (strcmp(asciiString, "SL2:ON") == 0) {
 80009d0:	f107 0308 	add.w	r3, r7, #8
 80009d4:	4948      	ldr	r1, [pc, #288]	; (8000af8 <HAL_UART_RxCpltCallback+0x290>)
 80009d6:	4618      	mov	r0, r3
 80009d8:	f7ff fc1a 	bl	8000210 <strcmp>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d108      	bne.n	80009f4 <HAL_UART_RxCpltCallback+0x18c>
                                    HAL_GPIO_WritePin(RELAY2_PORT, RELAY2_PIN, GPIO_PIN_SET);
 80009e2:	2201      	movs	r2, #1
 80009e4:	2102      	movs	r1, #2
 80009e6:	4841      	ldr	r0, [pc, #260]	; (8000aec <HAL_UART_RxCpltCallback+0x284>)
 80009e8:	f001 f824 	bl	8001a34 <HAL_GPIO_WritePin>
                                    relay2_state = 1;
 80009ec:	4b43      	ldr	r3, [pc, #268]	; (8000afc <HAL_UART_RxCpltCallback+0x294>)
 80009ee:	2201      	movs	r2, #1
 80009f0:	701a      	strb	r2, [r3, #0]
 80009f2:	e058      	b.n	8000aa6 <HAL_UART_RxCpltCallback+0x23e>
                                } else if (strcmp(asciiString, "SL2:OFF") == 0) {
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	4941      	ldr	r1, [pc, #260]	; (8000b00 <HAL_UART_RxCpltCallback+0x298>)
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fc08 	bl	8000210 <strcmp>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d108      	bne.n	8000a18 <HAL_UART_RxCpltCallback+0x1b0>
                                    HAL_GPIO_WritePin(RELAY2_PORT, RELAY2_PIN, GPIO_PIN_RESET);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2102      	movs	r1, #2
 8000a0a:	4838      	ldr	r0, [pc, #224]	; (8000aec <HAL_UART_RxCpltCallback+0x284>)
 8000a0c:	f001 f812 	bl	8001a34 <HAL_GPIO_WritePin>
                                    relay2_state = 0;
 8000a10:	4b3a      	ldr	r3, [pc, #232]	; (8000afc <HAL_UART_RxCpltCallback+0x294>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	701a      	strb	r2, [r3, #0]
 8000a16:	e046      	b.n	8000aa6 <HAL_UART_RxCpltCallback+0x23e>
                                } else if (strcmp(asciiString, "SL3:ON") == 0) {
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	4939      	ldr	r1, [pc, #228]	; (8000b04 <HAL_UART_RxCpltCallback+0x29c>)
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f7ff fbf6 	bl	8000210 <strcmp>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d108      	bne.n	8000a3c <HAL_UART_RxCpltCallback+0x1d4>
                                    HAL_GPIO_WritePin(RELAY3_PORT, RELAY3_PIN, GPIO_PIN_SET);
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	482f      	ldr	r0, [pc, #188]	; (8000aec <HAL_UART_RxCpltCallback+0x284>)
 8000a30:	f001 f800 	bl	8001a34 <HAL_GPIO_WritePin>
                                    relay3_state = 1;
 8000a34:	4b34      	ldr	r3, [pc, #208]	; (8000b08 <HAL_UART_RxCpltCallback+0x2a0>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	e034      	b.n	8000aa6 <HAL_UART_RxCpltCallback+0x23e>
                                } else if (strcmp(asciiString, "SL3:OFF") == 0) {
 8000a3c:	f107 0308 	add.w	r3, r7, #8
 8000a40:	4932      	ldr	r1, [pc, #200]	; (8000b0c <HAL_UART_RxCpltCallback+0x2a4>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff fbe4 	bl	8000210 <strcmp>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d108      	bne.n	8000a60 <HAL_UART_RxCpltCallback+0x1f8>
                                    HAL_GPIO_WritePin(RELAY3_PORT, RELAY3_PIN, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2104      	movs	r1, #4
 8000a52:	4826      	ldr	r0, [pc, #152]	; (8000aec <HAL_UART_RxCpltCallback+0x284>)
 8000a54:	f000 ffee 	bl	8001a34 <HAL_GPIO_WritePin>
                                    relay3_state = 0;
 8000a58:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <HAL_UART_RxCpltCallback+0x2a0>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	701a      	strb	r2, [r3, #0]
 8000a5e:	e022      	b.n	8000aa6 <HAL_UART_RxCpltCallback+0x23e>
                                } else if (strcmp(asciiString, "SL4:ON") == 0) {
 8000a60:	f107 0308 	add.w	r3, r7, #8
 8000a64:	492a      	ldr	r1, [pc, #168]	; (8000b10 <HAL_UART_RxCpltCallback+0x2a8>)
 8000a66:	4618      	mov	r0, r3
 8000a68:	f7ff fbd2 	bl	8000210 <strcmp>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d108      	bne.n	8000a84 <HAL_UART_RxCpltCallback+0x21c>
                                    HAL_GPIO_WritePin(RELAY4_PORT, RELAY4_PIN, GPIO_PIN_SET);
 8000a72:	2201      	movs	r2, #1
 8000a74:	2110      	movs	r1, #16
 8000a76:	481d      	ldr	r0, [pc, #116]	; (8000aec <HAL_UART_RxCpltCallback+0x284>)
 8000a78:	f000 ffdc 	bl	8001a34 <HAL_GPIO_WritePin>
                                    relay4_state = 1;
 8000a7c:	4b25      	ldr	r3, [pc, #148]	; (8000b14 <HAL_UART_RxCpltCallback+0x2ac>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	701a      	strb	r2, [r3, #0]
 8000a82:	e010      	b.n	8000aa6 <HAL_UART_RxCpltCallback+0x23e>
                                } else if (strcmp(asciiString, "SL4:OFF") == 0) {
 8000a84:	f107 0308 	add.w	r3, r7, #8
 8000a88:	4923      	ldr	r1, [pc, #140]	; (8000b18 <HAL_UART_RxCpltCallback+0x2b0>)
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fbc0 	bl	8000210 <strcmp>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d107      	bne.n	8000aa6 <HAL_UART_RxCpltCallback+0x23e>
                                    HAL_GPIO_WritePin(RELAY4_PORT, RELAY4_PIN, GPIO_PIN_RESET);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2110      	movs	r1, #16
 8000a9a:	4814      	ldr	r0, [pc, #80]	; (8000aec <HAL_UART_RxCpltCallback+0x284>)
 8000a9c:	f000 ffca 	bl	8001a34 <HAL_GPIO_WritePin>
                                    relay4_state = 0;
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_UART_RxCpltCallback+0x2ac>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	701a      	strb	r2, [r3, #0]
                                }

                                UpdateLCD();
 8000aa6:	f7ff fe23 	bl	80006f0 <UpdateLCD>
                            }
                        }
            // Handle received data (you can pass control to another module here)
            rxIndex = 0; // Reset buffer index for the next message
 8000aaa:	4b0a      	ldr	r3, [pc, #40]	; (8000ad4 <HAL_UART_RxCpltCallback+0x26c>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	801a      	strh	r2, [r3, #0]
 8000ab0:	e006      	b.n	8000ac0 <HAL_UART_RxCpltCallback+0x258>
        } else {
            rxIndex++;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <HAL_UART_RxCpltCallback+0x26c>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	3301      	adds	r3, #1
 8000aba:	b29a      	uxth	r2, r3
 8000abc:	4b05      	ldr	r3, [pc, #20]	; (8000ad4 <HAL_UART_RxCpltCallback+0x26c>)
 8000abe:	801a      	strh	r2, [r3, #0]
        }
        ReceiveResponse(); // Continue receiving
 8000ac0:	f7ff fe94 	bl	80007ec <ReceiveResponse>
    }
}
 8000ac4:	bf00      	nop
 8000ac6:	f507 77d0 	add.w	r7, r7, #416	; 0x1a0
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40011000 	.word	0x40011000
 8000ad4:	2000058c 	.word	0x2000058c
 8000ad8:	2000048c 	.word	0x2000048c
 8000adc:	08005be8 	.word	0x08005be8
 8000ae0:	08005bf4 	.word	0x08005bf4
 8000ae4:	08005bf8 	.word	0x08005bf8
 8000ae8:	08005c10 	.word	0x08005c10
 8000aec:	40020400 	.word	0x40020400
 8000af0:	2000058e 	.word	0x2000058e
 8000af4:	08005c18 	.word	0x08005c18
 8000af8:	08005c20 	.word	0x08005c20
 8000afc:	2000058f 	.word	0x2000058f
 8000b00:	08005c28 	.word	0x08005c28
 8000b04:	08005c30 	.word	0x08005c30
 8000b08:	20000590 	.word	0x20000590
 8000b0c:	08005c38 	.word	0x08005c38
 8000b10:	08005c40 	.word	0x08005c40
 8000b14:	20000591 	.word	0x20000591
 8000b18:	08005c48 	.word	0x08005c48

08000b1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b20:	f000 fbba 	bl	8001298 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b24:	f000 f80e 	bl	8000b44 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b28:	f000 f8fc 	bl	8000d24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000b2c:	f000 f8d0 	bl	8000cd0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000b30:	f000 f876 	bl	8000c20 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000b34:	f000 f8a2 	bl	8000c7c <MX_USART1_UART_Init>

  lcd_init();
 8000b38:	f7ff fdb4 	bl	80006a4 <lcd_init>
  /* USER CODE BEGIN 2 */
  lora_config();
 8000b3c:	f7ff fe6c 	bl	8000818 <lora_config>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <main+0x24>
	...

08000b44 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b094      	sub	sp, #80	; 0x50
 8000b48:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	2234      	movs	r2, #52	; 0x34
 8000b50:	2100      	movs	r1, #0
 8000b52:	4618      	mov	r0, r3
 8000b54:	f003 f9a2 	bl	8003e9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b58:	f107 0308 	add.w	r3, r7, #8
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	601a      	str	r2, [r3, #0]
 8000b60:	605a      	str	r2, [r3, #4]
 8000b62:	609a      	str	r2, [r3, #8]
 8000b64:	60da      	str	r2, [r3, #12]
 8000b66:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	607b      	str	r3, [r7, #4]
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	; (8000c18 <SystemClock_Config+0xd4>)
 8000b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b70:	4a29      	ldr	r2, [pc, #164]	; (8000c18 <SystemClock_Config+0xd4>)
 8000b72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b76:	6413      	str	r3, [r2, #64]	; 0x40
 8000b78:	4b27      	ldr	r3, [pc, #156]	; (8000c18 <SystemClock_Config+0xd4>)
 8000b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b80:	607b      	str	r3, [r7, #4]
 8000b82:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b84:	2300      	movs	r3, #0
 8000b86:	603b      	str	r3, [r7, #0]
 8000b88:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <SystemClock_Config+0xd8>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b90:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <SystemClock_Config+0xd8>)
 8000b92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b96:	6013      	str	r3, [r2, #0]
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <SystemClock_Config+0xd8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ba0:	603b      	str	r3, [r7, #0]
 8000ba2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bac:	2310      	movs	r3, #16
 8000bae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bb8:	2310      	movs	r3, #16
 8000bba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bbc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bc0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bce:	f107 031c 	add.w	r3, r7, #28
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f001 fede 	bl	8002994 <HAL_RCC_OscConfig>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bde:	f000 f925 	bl	8000e2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be2:	230f      	movs	r3, #15
 8000be4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be6:	2302      	movs	r3, #2
 8000be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bf2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf8:	f107 0308 	add.w	r3, r7, #8
 8000bfc:	2102      	movs	r1, #2
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f001 fb7e 	bl	8002300 <HAL_RCC_ClockConfig>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c0a:	f000 f90f 	bl	8000e2c <Error_Handler>
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3750      	adds	r7, #80	; 0x50
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40007000 	.word	0x40007000

08000c20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c24:	4b12      	ldr	r3, [pc, #72]	; (8000c70 <MX_I2C1_Init+0x50>)
 8000c26:	4a13      	ldr	r2, [pc, #76]	; (8000c74 <MX_I2C1_Init+0x54>)
 8000c28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c2a:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <MX_I2C1_Init+0x50>)
 8000c2c:	4a12      	ldr	r2, [pc, #72]	; (8000c78 <MX_I2C1_Init+0x58>)
 8000c2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c30:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <MX_I2C1_Init+0x50>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c36:	4b0e      	ldr	r3, [pc, #56]	; (8000c70 <MX_I2C1_Init+0x50>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c3c:	4b0c      	ldr	r3, [pc, #48]	; (8000c70 <MX_I2C1_Init+0x50>)
 8000c3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c44:	4b0a      	ldr	r3, [pc, #40]	; (8000c70 <MX_I2C1_Init+0x50>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c4a:	4b09      	ldr	r3, [pc, #36]	; (8000c70 <MX_I2C1_Init+0x50>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c50:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <MX_I2C1_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c56:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <MX_I2C1_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c5c:	4804      	ldr	r0, [pc, #16]	; (8000c70 <MX_I2C1_Init+0x50>)
 8000c5e:	f000 ff03 	bl	8001a68 <HAL_I2C_Init>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d001      	beq.n	8000c6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c68:	f000 f8e0 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c6c:	bf00      	nop
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000594 	.word	0x20000594
 8000c74:	40005400 	.word	0x40005400
 8000c78:	000186a0 	.word	0x000186a0

08000c7c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c80:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c82:	4a12      	ldr	r2, [pc, #72]	; (8000ccc <MX_USART1_UART_Init+0x50>)
 8000c84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000c86:	4b10      	ldr	r3, [pc, #64]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c88:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000ca2:	220c      	movs	r2, #12
 8000ca4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART1_UART_Init+0x4c>)
 8000cb4:	f002 f90c 	bl	8002ed0 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cbe:	f000 f8b5 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200005e8 	.word	0x200005e8
 8000ccc:	40011000 	.word	0x40011000

08000cd0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000cd4:	4b11      	ldr	r3, [pc, #68]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cd6:	4a12      	ldr	r2, [pc, #72]	; (8000d20 <MX_USART2_UART_Init+0x50>)
 8000cd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000cda:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ce0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ce8:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cee:	4b0b      	ldr	r3, [pc, #44]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cf4:	4b09      	ldr	r3, [pc, #36]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cf6:	220c      	movs	r2, #12
 8000cf8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d00:	4b06      	ldr	r3, [pc, #24]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <MX_USART2_UART_Init+0x4c>)
 8000d08:	f002 f8e2 	bl	8002ed0 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d12:	f000 f88b 	bl	8000e2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	2000062c 	.word	0x2000062c
 8000d20:	40004400 	.word	0x40004400

08000d24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 0314 	add.w	r3, r7, #20
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
 8000d3e:	4b37      	ldr	r3, [pc, #220]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a36      	ldr	r2, [pc, #216]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d44:	f043 0304 	orr.w	r3, r3, #4
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b34      	ldr	r3, [pc, #208]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0304 	and.w	r3, r3, #4
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	60fb      	str	r3, [r7, #12]
 8000d5a:	4b30      	ldr	r3, [pc, #192]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a2f      	ldr	r2, [pc, #188]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b2d      	ldr	r3, [pc, #180]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d6e:	60fb      	str	r3, [r7, #12]
 8000d70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60bb      	str	r3, [r7, #8]
 8000d76:	4b29      	ldr	r3, [pc, #164]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a28      	ldr	r2, [pc, #160]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b26      	ldr	r3, [pc, #152]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b22      	ldr	r3, [pc, #136]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a21      	ldr	r2, [pc, #132]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000d98:	f043 0302 	orr.w	r3, r3, #2
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	; (8000e1c <MX_GPIO_Init+0xf8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2120      	movs	r1, #32
 8000dae:	481c      	ldr	r0, [pc, #112]	; (8000e20 <MX_GPIO_Init+0xfc>)
 8000db0:	f000 fe40 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4, GPIO_PIN_RESET);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2117      	movs	r1, #23
 8000db8:	481a      	ldr	r0, [pc, #104]	; (8000e24 <MX_GPIO_Init+0x100>)
 8000dba:	f000 fe3b 	bl	8001a34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000dbe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dc4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000dc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 0314 	add.w	r3, r7, #20
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4814      	ldr	r0, [pc, #80]	; (8000e28 <MX_GPIO_Init+0x104>)
 8000dd6:	f000 fc99 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dda:	2320      	movs	r3, #32
 8000ddc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dde:	2301      	movs	r3, #1
 8000de0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dea:	f107 0314 	add.w	r3, r7, #20
 8000dee:	4619      	mov	r1, r3
 8000df0:	480b      	ldr	r0, [pc, #44]	; (8000e20 <MX_GPIO_Init+0xfc>)
 8000df2:	f000 fc8b 	bl	800170c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4;
 8000df6:	2317      	movs	r3, #23
 8000df8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e02:	2300      	movs	r3, #0
 8000e04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	4805      	ldr	r0, [pc, #20]	; (8000e24 <MX_GPIO_Init+0x100>)
 8000e0e:	f000 fc7d 	bl	800170c <HAL_GPIO_Init>

}
 8000e12:	bf00      	nop
 8000e14:	3728      	adds	r7, #40	; 0x28
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	40023800 	.word	0x40023800
 8000e20:	40020000 	.word	0x40020000
 8000e24:	40020400 	.word	0x40020400
 8000e28:	40020800 	.word	0x40020800

08000e2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e30:	b672      	cpsid	i
}
 8000e32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e34:	e7fe      	b.n	8000e34 <Error_Handler+0x8>
	...

08000e38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e3e:	2300      	movs	r3, #0
 8000e40:	607b      	str	r3, [r7, #4]
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e4e:	4b0d      	ldr	r3, [pc, #52]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e56:	607b      	str	r3, [r7, #4]
 8000e58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	603b      	str	r3, [r7, #0]
 8000e5e:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e62:	4a08      	ldr	r2, [pc, #32]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e68:	6413      	str	r3, [r2, #64]	; 0x40
 8000e6a:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <HAL_MspInit+0x4c>)
 8000e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	603b      	str	r3, [r7, #0]
 8000e74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e76:	2007      	movs	r0, #7
 8000e78:	f000 fb74 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800

08000e88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	; 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a19      	ldr	r2, [pc, #100]	; (8000f0c <HAL_I2C_MspInit+0x84>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d12c      	bne.n	8000f04 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b18      	ldr	r3, [pc, #96]	; (8000f10 <HAL_I2C_MspInit+0x88>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb2:	4a17      	ldr	r2, [pc, #92]	; (8000f10 <HAL_I2C_MspInit+0x88>)
 8000eb4:	f043 0302 	orr.w	r3, r3, #2
 8000eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <HAL_I2C_MspInit+0x88>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ec6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000eca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ecc:	2312      	movs	r3, #18
 8000ece:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ed8:	2304      	movs	r3, #4
 8000eda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000edc:	f107 0314 	add.w	r3, r7, #20
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480c      	ldr	r0, [pc, #48]	; (8000f14 <HAL_I2C_MspInit+0x8c>)
 8000ee4:	f000 fc12 	bl	800170c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_I2C_MspInit+0x88>)
 8000eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_I2C_MspInit+0x88>)
 8000ef2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ef6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_I2C_MspInit+0x88>)
 8000efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f00:	60fb      	str	r3, [r7, #12]
 8000f02:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f04:	bf00      	nop
 8000f06:	3728      	adds	r7, #40	; 0x28
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40005400 	.word	0x40005400
 8000f10:	40023800 	.word	0x40023800
 8000f14:	40020400 	.word	0x40020400

08000f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	; 0x30
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 031c 	add.w	r3, r7, #28
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a36      	ldr	r2, [pc, #216]	; (8001010 <HAL_UART_MspInit+0xf8>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d135      	bne.n	8000fa6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61bb      	str	r3, [r7, #24]
 8000f3e:	4b35      	ldr	r3, [pc, #212]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f42:	4a34      	ldr	r2, [pc, #208]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000f44:	f043 0310 	orr.w	r3, r3, #16
 8000f48:	6453      	str	r3, [r2, #68]	; 0x44
 8000f4a:	4b32      	ldr	r3, [pc, #200]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4e:	f003 0310 	and.w	r3, r3, #16
 8000f52:	61bb      	str	r3, [r7, #24]
 8000f54:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	617b      	str	r3, [r7, #20]
 8000f5a:	4b2e      	ldr	r3, [pc, #184]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a2d      	ldr	r2, [pc, #180]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b2b      	ldr	r3, [pc, #172]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	617b      	str	r3, [r7, #20]
 8000f70:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f72:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f80:	2303      	movs	r3, #3
 8000f82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f84:	2307      	movs	r3, #7
 8000f86:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 031c 	add.w	r3, r7, #28
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4822      	ldr	r0, [pc, #136]	; (8001018 <HAL_UART_MspInit+0x100>)
 8000f90:	f000 fbbc 	bl	800170c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f94:	2200      	movs	r2, #0
 8000f96:	2100      	movs	r1, #0
 8000f98:	2025      	movs	r0, #37	; 0x25
 8000f9a:	f000 faee 	bl	800157a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f9e:	2025      	movs	r0, #37	; 0x25
 8000fa0:	f000 fb07 	bl	80015b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fa4:	e030      	b.n	8001008 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4a1c      	ldr	r2, [pc, #112]	; (800101c <HAL_UART_MspInit+0x104>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d12b      	bne.n	8001008 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	613b      	str	r3, [r7, #16]
 8000fb4:	4b17      	ldr	r3, [pc, #92]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb8:	4a16      	ldr	r2, [pc, #88]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000fc0:	4b14      	ldr	r3, [pc, #80]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
 8000fd0:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	6313      	str	r3, [r2, #48]	; 0x30
 8000fdc:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_UART_MspInit+0xfc>)
 8000fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	60fb      	str	r3, [r7, #12]
 8000fe6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fe8:	230c      	movs	r3, #12
 8000fea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff8:	2307      	movs	r3, #7
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_UART_MspInit+0x100>)
 8001004:	f000 fb82 	bl	800170c <HAL_GPIO_Init>
}
 8001008:	bf00      	nop
 800100a:	3730      	adds	r7, #48	; 0x30
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40011000 	.word	0x40011000
 8001014:	40023800 	.word	0x40023800
 8001018:	40020000 	.word	0x40020000
 800101c:	40004400 	.word	0x40004400

08001020 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001024:	e7fe      	b.n	8001024 <NMI_Handler+0x4>

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 f966 	bl	800133c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <USART1_IRQHandler+0x10>)
 800107a:	f001 ffeb 	bl	8003054 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200005e8 	.word	0x200005e8

08001088 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <ITM_SendChar+0x48>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a0e      	ldr	r2, [pc, #56]	; (80010d0 <ITM_SendChar+0x48>)
 8001098:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800109c:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <ITM_SendChar+0x4c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <ITM_SendChar+0x4c>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80010aa:	bf00      	nop
 80010ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d0f8      	beq.n	80010ac <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80010ba:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80010be:	79fb      	ldrb	r3, [r7, #7]
 80010c0:	6013      	str	r3, [r2, #0]
}
 80010c2:	bf00      	nop
 80010c4:	370c      	adds	r7, #12
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	e000edfc 	.word	0xe000edfc
 80010d4:	e0000e00 	.word	0xe0000e00

080010d8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b086      	sub	sp, #24
 80010dc:	af00      	add	r7, sp, #0
 80010de:	60f8      	str	r0, [r7, #12]
 80010e0:	60b9      	str	r1, [r7, #8]
 80010e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e4:	2300      	movs	r3, #0
 80010e6:	617b      	str	r3, [r7, #20]
 80010e8:	e00a      	b.n	8001100 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ea:	f3af 8000 	nop.w
 80010ee:	4601      	mov	r1, r0
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	1c5a      	adds	r2, r3, #1
 80010f4:	60ba      	str	r2, [r7, #8]
 80010f6:	b2ca      	uxtb	r2, r1
 80010f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf0      	blt.n	80010ea <_read+0x12>
  }

  return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b086      	sub	sp, #24
 8001116:	af00      	add	r7, sp, #0
 8001118:	60f8      	str	r0, [r7, #12]
 800111a:	60b9      	str	r1, [r7, #8]
 800111c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
 8001122:	e009      	b.n	8001138 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	1c5a      	adds	r2, r3, #1
 8001128:	60ba      	str	r2, [r7, #8]
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ffab 	bl	8001088 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	3301      	adds	r3, #1
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	697a      	ldr	r2, [r7, #20]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	429a      	cmp	r2, r3
 800113e:	dbf1      	blt.n	8001124 <_write+0x12>
  }
  return len;
 8001140:	687b      	ldr	r3, [r7, #4]
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <_close>:

int _close(int file)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001172:	605a      	str	r2, [r3, #4]
  return 0;
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr

08001182 <_isatty>:

int _isatty(int file)
{
 8001182:	b480      	push	{r7}
 8001184:	b083      	sub	sp, #12
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	60f8      	str	r0, [r7, #12]
 80011a0:	60b9      	str	r1, [r7, #8]
 80011a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
	...

080011b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b086      	sub	sp, #24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011bc:	4a14      	ldr	r2, [pc, #80]	; (8001210 <_sbrk+0x5c>)
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <_sbrk+0x60>)
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c8:	4b13      	ldr	r3, [pc, #76]	; (8001218 <_sbrk+0x64>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d102      	bne.n	80011d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d0:	4b11      	ldr	r3, [pc, #68]	; (8001218 <_sbrk+0x64>)
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <_sbrk+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011d6:	4b10      	ldr	r3, [pc, #64]	; (8001218 <_sbrk+0x64>)
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4413      	add	r3, r2
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d207      	bcs.n	80011f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e4:	f002 fe30 	bl	8003e48 <__errno>
 80011e8:	4603      	mov	r3, r0
 80011ea:	220c      	movs	r2, #12
 80011ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011f2:	e009      	b.n	8001208 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <_sbrk+0x64>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fa:	4b07      	ldr	r3, [pc, #28]	; (8001218 <_sbrk+0x64>)
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4413      	add	r3, r2
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <_sbrk+0x64>)
 8001204:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001206:	68fb      	ldr	r3, [r7, #12]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3718      	adds	r7, #24
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20020000 	.word	0x20020000
 8001214:	00000400 	.word	0x00000400
 8001218:	20000670 	.word	0x20000670
 800121c:	20000688 	.word	0x20000688

08001220 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <SystemInit+0x20>)
 8001226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800122a:	4a05      	ldr	r2, [pc, #20]	; (8001240 <SystemInit+0x20>)
 800122c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001244:	f8df d034 	ldr.w	sp, [pc, #52]	; 800127c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001248:	480d      	ldr	r0, [pc, #52]	; (8001280 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800124a:	490e      	ldr	r1, [pc, #56]	; (8001284 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800124c:	4a0e      	ldr	r2, [pc, #56]	; (8001288 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800124e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001250:	e002      	b.n	8001258 <LoopCopyDataInit>

08001252 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001252:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001254:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001256:	3304      	adds	r3, #4

08001258 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001258:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800125a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800125c:	d3f9      	bcc.n	8001252 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125e:	4a0b      	ldr	r2, [pc, #44]	; (800128c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001260:	4c0b      	ldr	r4, [pc, #44]	; (8001290 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001264:	e001      	b.n	800126a <LoopFillZerobss>

08001266 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001266:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001268:	3204      	adds	r2, #4

0800126a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800126a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800126c:	d3fb      	bcc.n	8001266 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800126e:	f7ff ffd7 	bl	8001220 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001272:	f002 fdef 	bl	8003e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001276:	f7ff fc51 	bl	8000b1c <main>
  bx  lr    
 800127a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800127c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001280:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001284:	20000470 	.word	0x20000470
  ldr r2, =_sidata
 8001288:	08005e38 	.word	0x08005e38
  ldr r2, =_sbss
 800128c:	20000470 	.word	0x20000470
  ldr r4, =_ebss
 8001290:	20000688 	.word	0x20000688

08001294 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001294:	e7fe      	b.n	8001294 <ADC_IRQHandler>
	...

08001298 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800129c:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <HAL_Init+0x40>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <HAL_Init+0x40>)
 80012a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_Init+0x40>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_Init+0x40>)
 80012ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <HAL_Init+0x40>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a07      	ldr	r2, [pc, #28]	; (80012d8 <HAL_Init+0x40>)
 80012ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c0:	2003      	movs	r0, #3
 80012c2:	f000 f94f 	bl	8001564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c6:	2000      	movs	r0, #0
 80012c8:	f000 f808 	bl	80012dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fdb4 	bl	8000e38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d0:	2300      	movs	r3, #0
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	40023c00 	.word	0x40023c00

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x54>)
 80012e6:	681a      	ldr	r2, [r3, #0]
 80012e8:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_InitTick+0x58>)
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	4619      	mov	r1, r3
 80012ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 f967 	bl	80015ce <HAL_SYSTICK_Config>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d001      	beq.n	800130a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00e      	b.n	8001328 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2b0f      	cmp	r3, #15
 800130e:	d80a      	bhi.n	8001326 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001310:	2200      	movs	r2, #0
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001318:	f000 f92f 	bl	800157a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800131c:	4a06      	ldr	r2, [pc, #24]	; (8001338 <HAL_InitTick+0x5c>)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001322:	2300      	movs	r3, #0
 8001324:	e000      	b.n	8001328 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	3708      	adds	r7, #8
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20000400 	.word	0x20000400
 8001334:	20000408 	.word	0x20000408
 8001338:	20000404 	.word	0x20000404

0800133c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800133c:	b480      	push	{r7}
 800133e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001340:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_IncTick+0x20>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_IncTick+0x24>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4413      	add	r3, r2
 800134c:	4a04      	ldr	r2, [pc, #16]	; (8001360 <HAL_IncTick+0x24>)
 800134e:	6013      	str	r3, [r2, #0]
}
 8001350:	bf00      	nop
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	20000408 	.word	0x20000408
 8001360:	20000674 	.word	0x20000674

08001364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  return uwTick;
 8001368:	4b03      	ldr	r3, [pc, #12]	; (8001378 <HAL_GetTick+0x14>)
 800136a:	681b      	ldr	r3, [r3, #0]
}
 800136c:	4618      	mov	r0, r3
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	20000674 	.word	0x20000674

0800137c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b084      	sub	sp, #16
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001384:	f7ff ffee 	bl	8001364 <HAL_GetTick>
 8001388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001394:	d005      	beq.n	80013a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001396:	4b0a      	ldr	r3, [pc, #40]	; (80013c0 <HAL_Delay+0x44>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4413      	add	r3, r2
 80013a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a2:	bf00      	nop
 80013a4:	f7ff ffde 	bl	8001364 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d8f7      	bhi.n	80013a4 <HAL_Delay+0x28>
  {
  }
}
 80013b4:	bf00      	nop
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000408 	.word	0x20000408

080013c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	f003 0307 	and.w	r3, r3, #7
 80013d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d4:	4b0c      	ldr	r3, [pc, #48]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013da:	68ba      	ldr	r2, [r7, #8]
 80013dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013e0:	4013      	ands	r3, r2
 80013e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013f6:	4a04      	ldr	r2, [pc, #16]	; (8001408 <__NVIC_SetPriorityGrouping+0x44>)
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	60d3      	str	r3, [r2, #12]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	e000ed00 	.word	0xe000ed00

0800140c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <__NVIC_GetPriorityGrouping+0x18>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	0a1b      	lsrs	r3, r3, #8
 8001416:	f003 0307 	and.w	r3, r3, #7
}
 800141a:	4618      	mov	r0, r3
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000ed00 	.word	0xe000ed00

08001428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001436:	2b00      	cmp	r3, #0
 8001438:	db0b      	blt.n	8001452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	f003 021f 	and.w	r2, r3, #31
 8001440:	4907      	ldr	r1, [pc, #28]	; (8001460 <__NVIC_EnableIRQ+0x38>)
 8001442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001446:	095b      	lsrs	r3, r3, #5
 8001448:	2001      	movs	r0, #1
 800144a:	fa00 f202 	lsl.w	r2, r0, r2
 800144e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001452:	bf00      	nop
 8001454:	370c      	adds	r7, #12
 8001456:	46bd      	mov	sp, r7
 8001458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145c:	4770      	bx	lr
 800145e:	bf00      	nop
 8001460:	e000e100 	.word	0xe000e100

08001464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	6039      	str	r1, [r7, #0]
 800146e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001474:	2b00      	cmp	r3, #0
 8001476:	db0a      	blt.n	800148e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	b2da      	uxtb	r2, r3
 800147c:	490c      	ldr	r1, [pc, #48]	; (80014b0 <__NVIC_SetPriority+0x4c>)
 800147e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001482:	0112      	lsls	r2, r2, #4
 8001484:	b2d2      	uxtb	r2, r2
 8001486:	440b      	add	r3, r1
 8001488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800148c:	e00a      	b.n	80014a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	4908      	ldr	r1, [pc, #32]	; (80014b4 <__NVIC_SetPriority+0x50>)
 8001494:	79fb      	ldrb	r3, [r7, #7]
 8001496:	f003 030f 	and.w	r3, r3, #15
 800149a:	3b04      	subs	r3, #4
 800149c:	0112      	lsls	r2, r2, #4
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	440b      	add	r3, r1
 80014a2:	761a      	strb	r2, [r3, #24]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000e100 	.word	0xe000e100
 80014b4:	e000ed00 	.word	0xe000ed00

080014b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014b8:	b480      	push	{r7}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f003 0307 	and.w	r3, r3, #7
 80014ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f1c3 0307 	rsb	r3, r3, #7
 80014d2:	2b04      	cmp	r3, #4
 80014d4:	bf28      	it	cs
 80014d6:	2304      	movcs	r3, #4
 80014d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3304      	adds	r3, #4
 80014de:	2b06      	cmp	r3, #6
 80014e0:	d902      	bls.n	80014e8 <NVIC_EncodePriority+0x30>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	3b03      	subs	r3, #3
 80014e6:	e000      	b.n	80014ea <NVIC_EncodePriority+0x32>
 80014e8:	2300      	movs	r3, #0
 80014ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	43da      	mvns	r2, r3
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	401a      	ands	r2, r3
 80014fc:	697b      	ldr	r3, [r7, #20]
 80014fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001500:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	fa01 f303 	lsl.w	r3, r1, r3
 800150a:	43d9      	mvns	r1, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001510:	4313      	orrs	r3, r2
         );
}
 8001512:	4618      	mov	r0, r3
 8001514:	3724      	adds	r7, #36	; 0x24
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
	...

08001520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001530:	d301      	bcc.n	8001536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001532:	2301      	movs	r3, #1
 8001534:	e00f      	b.n	8001556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001536:	4a0a      	ldr	r2, [pc, #40]	; (8001560 <SysTick_Config+0x40>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	3b01      	subs	r3, #1
 800153c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800153e:	210f      	movs	r1, #15
 8001540:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001544:	f7ff ff8e 	bl	8001464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <SysTick_Config+0x40>)
 800154a:	2200      	movs	r2, #0
 800154c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800154e:	4b04      	ldr	r3, [pc, #16]	; (8001560 <SysTick_Config+0x40>)
 8001550:	2207      	movs	r2, #7
 8001552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	e000e010 	.word	0xe000e010

08001564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156c:	6878      	ldr	r0, [r7, #4]
 800156e:	f7ff ff29 	bl	80013c4 <__NVIC_SetPriorityGrouping>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157a:	b580      	push	{r7, lr}
 800157c:	b086      	sub	sp, #24
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	607a      	str	r2, [r7, #4]
 8001586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001588:	2300      	movs	r3, #0
 800158a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800158c:	f7ff ff3e 	bl	800140c <__NVIC_GetPriorityGrouping>
 8001590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001592:	687a      	ldr	r2, [r7, #4]
 8001594:	68b9      	ldr	r1, [r7, #8]
 8001596:	6978      	ldr	r0, [r7, #20]
 8001598:	f7ff ff8e 	bl	80014b8 <NVIC_EncodePriority>
 800159c:	4602      	mov	r2, r0
 800159e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a2:	4611      	mov	r1, r2
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff5d 	bl	8001464 <__NVIC_SetPriority>
}
 80015aa:	bf00      	nop
 80015ac:	3718      	adds	r7, #24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b082      	sub	sp, #8
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	4603      	mov	r3, r0
 80015ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff ff31 	bl	8001428 <__NVIC_EnableIRQ>
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b082      	sub	sp, #8
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f7ff ffa2 	bl	8001520 <SysTick_Config>
 80015dc:	4603      	mov	r3, r0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3708      	adds	r7, #8
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	b084      	sub	sp, #16
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80015f4:	f7ff feb6 	bl	8001364 <HAL_GetTick>
 80015f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b02      	cmp	r3, #2
 8001604:	d008      	beq.n	8001618 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2280      	movs	r2, #128	; 0x80
 800160a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e052      	b.n	80016be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0216 	bic.w	r2, r2, #22
 8001626:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	695a      	ldr	r2, [r3, #20]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001636:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163c:	2b00      	cmp	r3, #0
 800163e:	d103      	bne.n	8001648 <HAL_DMA_Abort+0x62>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001644:	2b00      	cmp	r3, #0
 8001646:	d007      	beq.n	8001658 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f022 0208 	bic.w	r2, r2, #8
 8001656:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f022 0201 	bic.w	r2, r2, #1
 8001666:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001668:	e013      	b.n	8001692 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800166a:	f7ff fe7b 	bl	8001364 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b05      	cmp	r3, #5
 8001676:	d90c      	bls.n	8001692 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2220      	movs	r2, #32
 800167c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2203      	movs	r2, #3
 8001682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2200      	movs	r2, #0
 800168a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e015      	b.n	80016be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0301 	and.w	r3, r3, #1
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1e4      	bne.n	800166a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016a4:	223f      	movs	r2, #63	; 0x3f
 80016a6:	409a      	lsls	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2200      	movs	r2, #0
 80016b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80016bc:	2300      	movs	r3, #0
}
 80016be:	4618      	mov	r0, r3
 80016c0:	3710      	adds	r7, #16
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d004      	beq.n	80016e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2280      	movs	r2, #128	; 0x80
 80016de:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e00c      	b.n	80016fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2205      	movs	r2, #5
 80016e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 0201 	bic.w	r2, r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80016fc:	2300      	movs	r3, #0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800170c:	b480      	push	{r7}
 800170e:	b089      	sub	sp, #36	; 0x24
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171e:	2300      	movs	r3, #0
 8001720:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
 8001726:	e165      	b.n	80019f4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001728:	2201      	movs	r2, #1
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	fa02 f303 	lsl.w	r3, r2, r3
 8001730:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	4013      	ands	r3, r2
 800173a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	697b      	ldr	r3, [r7, #20]
 8001740:	429a      	cmp	r2, r3
 8001742:	f040 8154 	bne.w	80019ee <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b01      	cmp	r3, #1
 8001750:	d005      	beq.n	800175e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	685b      	ldr	r3, [r3, #4]
 8001756:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175a:	2b02      	cmp	r3, #2
 800175c:	d130      	bne.n	80017c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	005b      	lsls	r3, r3, #1
 8001768:	2203      	movs	r2, #3
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	69ba      	ldr	r2, [r7, #24]
 8001772:	4013      	ands	r3, r2
 8001774:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	68da      	ldr	r2, [r3, #12]
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001794:	2201      	movs	r2, #1
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	091b      	lsrs	r3, r3, #4
 80017aa:	f003 0201 	and.w	r2, r3, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f003 0303 	and.w	r3, r3, #3
 80017c8:	2b03      	cmp	r3, #3
 80017ca:	d017      	beq.n	80017fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	68db      	ldr	r3, [r3, #12]
 80017d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	2203      	movs	r2, #3
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	69ba      	ldr	r2, [r7, #24]
 80017e0:	4013      	ands	r3, r2
 80017e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	689a      	ldr	r2, [r3, #8]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	fa02 f303 	lsl.w	r3, r2, r3
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	4313      	orrs	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	f003 0303 	and.w	r3, r3, #3
 8001804:	2b02      	cmp	r3, #2
 8001806:	d123      	bne.n	8001850 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	08da      	lsrs	r2, r3, #3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3208      	adds	r2, #8
 8001810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001814:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	f003 0307 	and.w	r3, r3, #7
 800181c:	009b      	lsls	r3, r3, #2
 800181e:	220f      	movs	r2, #15
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	691a      	ldr	r2, [r3, #16]
 8001830:	69fb      	ldr	r3, [r7, #28]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4313      	orrs	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	08da      	lsrs	r2, r3, #3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	3208      	adds	r2, #8
 800184a:	69b9      	ldr	r1, [r7, #24]
 800184c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001856:	69fb      	ldr	r3, [r7, #28]
 8001858:	005b      	lsls	r3, r3, #1
 800185a:	2203      	movs	r2, #3
 800185c:	fa02 f303 	lsl.w	r3, r2, r3
 8001860:	43db      	mvns	r3, r3
 8001862:	69ba      	ldr	r2, [r7, #24]
 8001864:	4013      	ands	r3, r2
 8001866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0203 	and.w	r2, r3, #3
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	69ba      	ldr	r2, [r7, #24]
 800187a:	4313      	orrs	r3, r2
 800187c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	69ba      	ldr	r2, [r7, #24]
 8001882:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800188c:	2b00      	cmp	r3, #0
 800188e:	f000 80ae 	beq.w	80019ee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	60fb      	str	r3, [r7, #12]
 8001896:	4b5d      	ldr	r3, [pc, #372]	; (8001a0c <HAL_GPIO_Init+0x300>)
 8001898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189a:	4a5c      	ldr	r2, [pc, #368]	; (8001a0c <HAL_GPIO_Init+0x300>)
 800189c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a0:	6453      	str	r3, [r2, #68]	; 0x44
 80018a2:	4b5a      	ldr	r3, [pc, #360]	; (8001a0c <HAL_GPIO_Init+0x300>)
 80018a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ae:	4a58      	ldr	r2, [pc, #352]	; (8001a10 <HAL_GPIO_Init+0x304>)
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	089b      	lsrs	r3, r3, #2
 80018b4:	3302      	adds	r3, #2
 80018b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018bc:	69fb      	ldr	r3, [r7, #28]
 80018be:	f003 0303 	and.w	r3, r3, #3
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	220f      	movs	r2, #15
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a4f      	ldr	r2, [pc, #316]	; (8001a14 <HAL_GPIO_Init+0x308>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d025      	beq.n	8001926 <HAL_GPIO_Init+0x21a>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a4e      	ldr	r2, [pc, #312]	; (8001a18 <HAL_GPIO_Init+0x30c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d01f      	beq.n	8001922 <HAL_GPIO_Init+0x216>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4d      	ldr	r2, [pc, #308]	; (8001a1c <HAL_GPIO_Init+0x310>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d019      	beq.n	800191e <HAL_GPIO_Init+0x212>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4c      	ldr	r2, [pc, #304]	; (8001a20 <HAL_GPIO_Init+0x314>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d013      	beq.n	800191a <HAL_GPIO_Init+0x20e>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4b      	ldr	r2, [pc, #300]	; (8001a24 <HAL_GPIO_Init+0x318>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d00d      	beq.n	8001916 <HAL_GPIO_Init+0x20a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4a      	ldr	r2, [pc, #296]	; (8001a28 <HAL_GPIO_Init+0x31c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d007      	beq.n	8001912 <HAL_GPIO_Init+0x206>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a49      	ldr	r2, [pc, #292]	; (8001a2c <HAL_GPIO_Init+0x320>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d101      	bne.n	800190e <HAL_GPIO_Init+0x202>
 800190a:	2306      	movs	r3, #6
 800190c:	e00c      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800190e:	2307      	movs	r3, #7
 8001910:	e00a      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001912:	2305      	movs	r3, #5
 8001914:	e008      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001916:	2304      	movs	r3, #4
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800191a:	2303      	movs	r3, #3
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x21c>
 8001926:	2300      	movs	r3, #0
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001938:	4935      	ldr	r1, [pc, #212]	; (8001a10 <HAL_GPIO_Init+0x304>)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b3a      	ldr	r3, [pc, #232]	; (8001a30 <HAL_GPIO_Init+0x324>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196a:	4a31      	ldr	r2, [pc, #196]	; (8001a30 <HAL_GPIO_Init+0x324>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001970:	4b2f      	ldr	r3, [pc, #188]	; (8001a30 <HAL_GPIO_Init+0x324>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <HAL_GPIO_Init+0x324>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800199a:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_GPIO_Init+0x324>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019be:	4a1c      	ldr	r2, [pc, #112]	; (8001a30 <HAL_GPIO_Init+0x324>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c4:	4b1a      	ldr	r3, [pc, #104]	; (8001a30 <HAL_GPIO_Init+0x324>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e8:	4a11      	ldr	r2, [pc, #68]	; (8001a30 <HAL_GPIO_Init+0x324>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	f67f ae96 	bls.w	8001728 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40021400 	.word	0x40021400
 8001a2c:	40021800 	.word	0x40021800
 8001a30:	40013c00 	.word	0x40013c00

08001a34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	807b      	strh	r3, [r7, #2]
 8001a40:	4613      	mov	r3, r2
 8001a42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a44:	787b      	ldrb	r3, [r7, #1]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a4a:	887a      	ldrh	r2, [r7, #2]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a50:	e003      	b.n	8001a5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a52:	887b      	ldrh	r3, [r7, #2]
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d101      	bne.n	8001a7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e12b      	b.n	8001cd2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d106      	bne.n	8001a94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff f9fa 	bl	8000e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2224      	movs	r2, #36	; 0x24
 8001a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f022 0201 	bic.w	r2, r2, #1
 8001aaa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001aba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001aca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001acc:	f000 fd0a 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8001ad0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	4a81      	ldr	r2, [pc, #516]	; (8001cdc <HAL_I2C_Init+0x274>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d807      	bhi.n	8001aec <HAL_I2C_Init+0x84>
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4a80      	ldr	r2, [pc, #512]	; (8001ce0 <HAL_I2C_Init+0x278>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	bf94      	ite	ls
 8001ae4:	2301      	movls	r3, #1
 8001ae6:	2300      	movhi	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	e006      	b.n	8001afa <HAL_I2C_Init+0x92>
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	4a7d      	ldr	r2, [pc, #500]	; (8001ce4 <HAL_I2C_Init+0x27c>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	bf94      	ite	ls
 8001af4:	2301      	movls	r3, #1
 8001af6:	2300      	movhi	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0e7      	b.n	8001cd2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	4a78      	ldr	r2, [pc, #480]	; (8001ce8 <HAL_I2C_Init+0x280>)
 8001b06:	fba2 2303 	umull	r2, r3, r2, r3
 8001b0a:	0c9b      	lsrs	r3, r3, #18
 8001b0c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	68ba      	ldr	r2, [r7, #8]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	6a1b      	ldr	r3, [r3, #32]
 8001b28:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	4a6a      	ldr	r2, [pc, #424]	; (8001cdc <HAL_I2C_Init+0x274>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d802      	bhi.n	8001b3c <HAL_I2C_Init+0xd4>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	e009      	b.n	8001b50 <HAL_I2C_Init+0xe8>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
 8001b46:	4a69      	ldr	r2, [pc, #420]	; (8001cec <HAL_I2C_Init+0x284>)
 8001b48:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4c:	099b      	lsrs	r3, r3, #6
 8001b4e:	3301      	adds	r3, #1
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	6812      	ldr	r2, [r2, #0]
 8001b54:	430b      	orrs	r3, r1
 8001b56:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b62:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	495c      	ldr	r1, [pc, #368]	; (8001cdc <HAL_I2C_Init+0x274>)
 8001b6c:	428b      	cmp	r3, r1
 8001b6e:	d819      	bhi.n	8001ba4 <HAL_I2C_Init+0x13c>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e59      	subs	r1, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b7e:	1c59      	adds	r1, r3, #1
 8001b80:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b84:	400b      	ands	r3, r1
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00a      	beq.n	8001ba0 <HAL_I2C_Init+0x138>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	1e59      	subs	r1, r3, #1
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	005b      	lsls	r3, r3, #1
 8001b94:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b98:	3301      	adds	r3, #1
 8001b9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b9e:	e051      	b.n	8001c44 <HAL_I2C_Init+0x1dc>
 8001ba0:	2304      	movs	r3, #4
 8001ba2:	e04f      	b.n	8001c44 <HAL_I2C_Init+0x1dc>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d111      	bne.n	8001bd0 <HAL_I2C_Init+0x168>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	1e58      	subs	r0, r3, #1
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	440b      	add	r3, r1
 8001bba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	bf0c      	ite	eq
 8001bc8:	2301      	moveq	r3, #1
 8001bca:	2300      	movne	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e012      	b.n	8001bf6 <HAL_I2C_Init+0x18e>
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	1e58      	subs	r0, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6859      	ldr	r1, [r3, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	440b      	add	r3, r1
 8001bde:	0099      	lsls	r1, r3, #2
 8001be0:	440b      	add	r3, r1
 8001be2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001be6:	3301      	adds	r3, #1
 8001be8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	bf0c      	ite	eq
 8001bf0:	2301      	moveq	r3, #1
 8001bf2:	2300      	movne	r3, #0
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <HAL_I2C_Init+0x196>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e022      	b.n	8001c44 <HAL_I2C_Init+0x1dc>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d10e      	bne.n	8001c24 <HAL_I2C_Init+0x1bc>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1e58      	subs	r0, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	460b      	mov	r3, r1
 8001c10:	005b      	lsls	r3, r3, #1
 8001c12:	440b      	add	r3, r1
 8001c14:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c22:	e00f      	b.n	8001c44 <HAL_I2C_Init+0x1dc>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	1e58      	subs	r0, r3, #1
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6859      	ldr	r1, [r3, #4]
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	440b      	add	r3, r1
 8001c32:	0099      	lsls	r1, r3, #2
 8001c34:	440b      	add	r3, r1
 8001c36:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c40:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c44:	6879      	ldr	r1, [r7, #4]
 8001c46:	6809      	ldr	r1, [r1, #0]
 8001c48:	4313      	orrs	r3, r2
 8001c4a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69da      	ldr	r2, [r3, #28]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6a1b      	ldr	r3, [r3, #32]
 8001c5e:	431a      	orrs	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c72:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	6911      	ldr	r1, [r2, #16]
 8001c7a:	687a      	ldr	r2, [r7, #4]
 8001c7c:	68d2      	ldr	r2, [r2, #12]
 8001c7e:	4311      	orrs	r1, r2
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6812      	ldr	r2, [r2, #0]
 8001c84:	430b      	orrs	r3, r1
 8001c86:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	695a      	ldr	r2, [r3, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	699b      	ldr	r3, [r3, #24]
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	430a      	orrs	r2, r1
 8001ca2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2220      	movs	r2, #32
 8001cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3710      	adds	r7, #16
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
 8001cda:	bf00      	nop
 8001cdc:	000186a0 	.word	0x000186a0
 8001ce0:	001e847f 	.word	0x001e847f
 8001ce4:	003d08ff 	.word	0x003d08ff
 8001ce8:	431bde83 	.word	0x431bde83
 8001cec:	10624dd3 	.word	0x10624dd3

08001cf0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b088      	sub	sp, #32
 8001cf4:	af02      	add	r7, sp, #8
 8001cf6:	60f8      	str	r0, [r7, #12]
 8001cf8:	607a      	str	r2, [r7, #4]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	460b      	mov	r3, r1
 8001cfe:	817b      	strh	r3, [r7, #10]
 8001d00:	4613      	mov	r3, r2
 8001d02:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d04:	f7ff fb2e 	bl	8001364 <HAL_GetTick>
 8001d08:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b20      	cmp	r3, #32
 8001d14:	f040 80e0 	bne.w	8001ed8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d18:	697b      	ldr	r3, [r7, #20]
 8001d1a:	9300      	str	r3, [sp, #0]
 8001d1c:	2319      	movs	r3, #25
 8001d1e:	2201      	movs	r2, #1
 8001d20:	4970      	ldr	r1, [pc, #448]	; (8001ee4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001d22:	68f8      	ldr	r0, [r7, #12]
 8001d24:	f000 f964 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d001      	beq.n	8001d32 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e0d3      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d101      	bne.n	8001d40 <HAL_I2C_Master_Transmit+0x50>
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	e0cc      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	d007      	beq.n	8001d66 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d74:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	2221      	movs	r2, #33	; 0x21
 8001d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2210      	movs	r2, #16
 8001d82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	2200      	movs	r2, #0
 8001d8a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	687a      	ldr	r2, [r7, #4]
 8001d90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	893a      	ldrh	r2, [r7, #8]
 8001d96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4a50      	ldr	r2, [pc, #320]	; (8001ee8 <HAL_I2C_Master_Transmit+0x1f8>)
 8001da6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001da8:	8979      	ldrh	r1, [r7, #10]
 8001daa:	697b      	ldr	r3, [r7, #20]
 8001dac:	6a3a      	ldr	r2, [r7, #32]
 8001dae:	68f8      	ldr	r0, [r7, #12]
 8001db0:	f000 f89c 	bl	8001eec <I2C_MasterRequestWrite>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e08d      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	695b      	ldr	r3, [r3, #20]
 8001dc8:	613b      	str	r3, [r7, #16]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001dd4:	e066      	b.n	8001ea4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	6a39      	ldr	r1, [r7, #32]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f000 f9de 	bl	800219c <I2C_WaitOnTXEFlagUntilTimeout>
 8001de0:	4603      	mov	r3, r0
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00d      	beq.n	8001e02 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dea:	2b04      	cmp	r3, #4
 8001dec:	d107      	bne.n	8001dfe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dfc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06b      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	781a      	ldrb	r2, [r3, #0]
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	b29a      	uxth	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	b29a      	uxth	r2, r3
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	f003 0304 	and.w	r3, r3, #4
 8001e3c:	2b04      	cmp	r3, #4
 8001e3e:	d11b      	bne.n	8001e78 <HAL_I2C_Master_Transmit+0x188>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d017      	beq.n	8001e78 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	1c5a      	adds	r2, r3, #1
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	3b01      	subs	r3, #1
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e70:	3b01      	subs	r3, #1
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e78:	697a      	ldr	r2, [r7, #20]
 8001e7a:	6a39      	ldr	r1, [r7, #32]
 8001e7c:	68f8      	ldr	r0, [r7, #12]
 8001e7e:	f000 f9ce 	bl	800221e <I2C_WaitOnBTFFlagUntilTimeout>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00d      	beq.n	8001ea4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	2b04      	cmp	r3, #4
 8001e8e:	d107      	bne.n	8001ea0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e9e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e01a      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d194      	bne.n	8001dd6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2220      	movs	r2, #32
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ecc:	68fb      	ldr	r3, [r7, #12]
 8001ece:	2200      	movs	r2, #0
 8001ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	e000      	b.n	8001eda <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001ed8:	2302      	movs	r3, #2
  }
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3718      	adds	r7, #24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	00100002 	.word	0x00100002
 8001ee8:	ffff0000 	.word	0xffff0000

08001eec <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b088      	sub	sp, #32
 8001ef0:	af02      	add	r7, sp, #8
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	607a      	str	r2, [r7, #4]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	460b      	mov	r3, r1
 8001efa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f00:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	2b08      	cmp	r3, #8
 8001f06:	d006      	beq.n	8001f16 <I2C_MasterRequestWrite+0x2a>
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d003      	beq.n	8001f16 <I2C_MasterRequestWrite+0x2a>
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f14:	d108      	bne.n	8001f28 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e00b      	b.n	8001f40 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2c:	2b12      	cmp	r3, #18
 8001f2e:	d107      	bne.n	8001f40 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f3e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	9300      	str	r3, [sp, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 f84f 	bl	8001ff0 <I2C_WaitOnFlagUntilTimeout>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00d      	beq.n	8001f74 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f66:	d103      	bne.n	8001f70 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e035      	b.n	8001fe0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001f7c:	d108      	bne.n	8001f90 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f7e:	897b      	ldrh	r3, [r7, #10]
 8001f80:	b2db      	uxtb	r3, r3
 8001f82:	461a      	mov	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f8c:	611a      	str	r2, [r3, #16]
 8001f8e:	e01b      	b.n	8001fc8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001f90:	897b      	ldrh	r3, [r7, #10]
 8001f92:	11db      	asrs	r3, r3, #7
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	f003 0306 	and.w	r3, r3, #6
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	f063 030f 	orn	r3, r3, #15
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	490e      	ldr	r1, [pc, #56]	; (8001fe8 <I2C_MasterRequestWrite+0xfc>)
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f875 	bl	800209e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e010      	b.n	8001fe0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001fbe:	897b      	ldrh	r3, [r7, #10]
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	687a      	ldr	r2, [r7, #4]
 8001fcc:	4907      	ldr	r1, [pc, #28]	; (8001fec <I2C_MasterRequestWrite+0x100>)
 8001fce:	68f8      	ldr	r0, [r7, #12]
 8001fd0:	f000 f865 	bl	800209e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d001      	beq.n	8001fde <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e000      	b.n	8001fe0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3718      	adds	r7, #24
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bd80      	pop	{r7, pc}
 8001fe8:	00010008 	.word	0x00010008
 8001fec:	00010002 	.word	0x00010002

08001ff0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002000:	e025      	b.n	800204e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002008:	d021      	beq.n	800204e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7ff f9ab 	bl	8001364 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	683a      	ldr	r2, [r7, #0]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnFlagUntilTimeout+0x30>
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d116      	bne.n	800204e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e023      	b.n	8002096 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d10d      	bne.n	8002074 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf0c      	ite	eq
 800206a:	2301      	moveq	r3, #1
 800206c:	2300      	movne	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	461a      	mov	r2, r3
 8002072:	e00c      	b.n	800208e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	699b      	ldr	r3, [r3, #24]
 800207a:	43da      	mvns	r2, r3
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	4013      	ands	r3, r2
 8002080:	b29b      	uxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	bf0c      	ite	eq
 8002086:	2301      	moveq	r3, #1
 8002088:	2300      	movne	r3, #0
 800208a:	b2db      	uxtb	r3, r3
 800208c:	461a      	mov	r2, r3
 800208e:	79fb      	ldrb	r3, [r7, #7]
 8002090:	429a      	cmp	r2, r3
 8002092:	d0b6      	beq.n	8002002 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800209e:	b580      	push	{r7, lr}
 80020a0:	b084      	sub	sp, #16
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	60f8      	str	r0, [r7, #12]
 80020a6:	60b9      	str	r1, [r7, #8]
 80020a8:	607a      	str	r2, [r7, #4]
 80020aa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020ac:	e051      	b.n	8002152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695b      	ldr	r3, [r3, #20]
 80020b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020bc:	d123      	bne.n	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020cc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020d6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2220      	movs	r2, #32
 80020e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	f043 0204 	orr.w	r2, r3, #4
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e046      	b.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800210c:	d021      	beq.n	8002152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800210e:	f7ff f929 	bl	8001364 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	687a      	ldr	r2, [r7, #4]
 800211a:	429a      	cmp	r2, r3
 800211c:	d302      	bcc.n	8002124 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d116      	bne.n	8002152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2200      	movs	r2, #0
 8002136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f043 0220 	orr.w	r2, r3, #32
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e020      	b.n	8002194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	b2db      	uxtb	r3, r3
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10c      	bne.n	8002176 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	43da      	mvns	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	4013      	ands	r3, r2
 8002168:	b29b      	uxth	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	bf14      	ite	ne
 800216e:	2301      	movne	r3, #1
 8002170:	2300      	moveq	r3, #0
 8002172:	b2db      	uxtb	r3, r3
 8002174:	e00b      	b.n	800218e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	43da      	mvns	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	4013      	ands	r3, r2
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b00      	cmp	r3, #0
 8002186:	bf14      	ite	ne
 8002188:	2301      	movne	r3, #1
 800218a:	2300      	moveq	r3, #0
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d18d      	bne.n	80020ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021a8:	e02d      	b.n	8002206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021aa:	68f8      	ldr	r0, [r7, #12]
 80021ac:	f000 f878 	bl	80022a0 <I2C_IsAcknowledgeFailed>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d001      	beq.n	80021ba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e02d      	b.n	8002216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80021c0:	d021      	beq.n	8002206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021c2:	f7ff f8cf 	bl	8001364 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	68ba      	ldr	r2, [r7, #8]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d302      	bcc.n	80021d8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d116      	bne.n	8002206 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2220      	movs	r2, #32
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f043 0220 	orr.w	r2, r3, #32
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e007      	b.n	8002216 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695b      	ldr	r3, [r3, #20]
 800220c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002210:	2b80      	cmp	r3, #128	; 0x80
 8002212:	d1ca      	bne.n	80021aa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002214:	2300      	movs	r3, #0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3710      	adds	r7, #16
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b084      	sub	sp, #16
 8002222:	af00      	add	r7, sp, #0
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800222a:	e02d      	b.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f000 f837 	bl	80022a0 <I2C_IsAcknowledgeFailed>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e02d      	b.n	8002298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002242:	d021      	beq.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002244:	f7ff f88e 	bl	8001364 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	429a      	cmp	r2, r3
 8002252:	d302      	bcc.n	800225a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d116      	bne.n	8002288 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2220      	movs	r2, #32
 8002264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	2200      	movs	r2, #0
 800226c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002274:	f043 0220 	orr.w	r2, r3, #32
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e007      	b.n	8002298 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	695b      	ldr	r3, [r3, #20]
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	2b04      	cmp	r3, #4
 8002294:	d1ca      	bne.n	800222c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022b6:	d11b      	bne.n	80022f0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80022c0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2200      	movs	r2, #0
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2220      	movs	r2, #32
 80022cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022dc:	f043 0204 	orr.w	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	370c      	adds	r7, #12
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
	...

08002300 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0cc      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002314:	4b68      	ldr	r3, [pc, #416]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	683a      	ldr	r2, [r7, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	d90c      	bls.n	800233c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002322:	4b65      	ldr	r3, [pc, #404]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002324:	683a      	ldr	r2, [r7, #0]
 8002326:	b2d2      	uxtb	r2, r2
 8002328:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	4b63      	ldr	r3, [pc, #396]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d001      	beq.n	800233c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0b8      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002354:	4b59      	ldr	r3, [pc, #356]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	4a58      	ldr	r2, [pc, #352]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800235a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800235e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 0308 	and.w	r3, r3, #8
 8002368:	2b00      	cmp	r3, #0
 800236a:	d005      	beq.n	8002378 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002376:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002378:	4b50      	ldr	r3, [pc, #320]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	494d      	ldr	r1, [pc, #308]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002386:	4313      	orrs	r3, r2
 8002388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d044      	beq.n	8002420 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d107      	bne.n	80023ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800239e:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d119      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023aa:	2301      	movs	r3, #1
 80023ac:	e07f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d003      	beq.n	80023be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80023be:	4b3f      	ldr	r3, [pc, #252]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d109      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e06f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023ce:	4b3b      	ldr	r3, [pc, #236]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0302 	and.w	r3, r3, #2
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e067      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80023de:	4b37      	ldr	r3, [pc, #220]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	f023 0203 	bic.w	r2, r3, #3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	4934      	ldr	r1, [pc, #208]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023f0:	f7fe ffb8 	bl	8001364 <HAL_GetTick>
 80023f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023f6:	e00a      	b.n	800240e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023f8:	f7fe ffb4 	bl	8001364 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	f241 3288 	movw	r2, #5000	; 0x1388
 8002406:	4293      	cmp	r3, r2
 8002408:	d901      	bls.n	800240e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e04f      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	4b2b      	ldr	r3, [pc, #172]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 020c 	and.w	r2, r3, #12
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	429a      	cmp	r2, r3
 800241e:	d1eb      	bne.n	80023f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002420:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f003 030f 	and.w	r3, r3, #15
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	429a      	cmp	r2, r3
 800242c:	d20c      	bcs.n	8002448 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	b2d2      	uxtb	r2, r2
 8002434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002436:	4b20      	ldr	r3, [pc, #128]	; (80024b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d001      	beq.n	8002448 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e032      	b.n	80024ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	d008      	beq.n	8002466 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002454:	4b19      	ldr	r3, [pc, #100]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	4916      	ldr	r1, [pc, #88]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d009      	beq.n	8002486 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002472:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	691b      	ldr	r3, [r3, #16]
 800247e:	00db      	lsls	r3, r3, #3
 8002480:	490e      	ldr	r1, [pc, #56]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002486:	f000 f855 	bl	8002534 <HAL_RCC_GetSysClockFreq>
 800248a:	4602      	mov	r2, r0
 800248c:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <HAL_RCC_ClockConfig+0x1bc>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	091b      	lsrs	r3, r3, #4
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	490a      	ldr	r1, [pc, #40]	; (80024c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002498:	5ccb      	ldrb	r3, [r1, r3]
 800249a:	fa22 f303 	lsr.w	r3, r2, r3
 800249e:	4a09      	ldr	r2, [pc, #36]	; (80024c4 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80024a2:	4b09      	ldr	r3, [pc, #36]	; (80024c8 <HAL_RCC_ClockConfig+0x1c8>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe ff18 	bl	80012dc <HAL_InitTick>

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023c00 	.word	0x40023c00
 80024bc:	40023800 	.word	0x40023800
 80024c0:	08005c5c 	.word	0x08005c5c
 80024c4:	20000400 	.word	0x20000400
 80024c8:	20000404 	.word	0x20000404

080024cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b03      	ldr	r3, [pc, #12]	; (80024e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024dc:	4770      	bx	lr
 80024de:	bf00      	nop
 80024e0:	20000400 	.word	0x20000400

080024e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024e8:	f7ff fff0 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b05      	ldr	r3, [pc, #20]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0a9b      	lsrs	r3, r3, #10
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4903      	ldr	r1, [pc, #12]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002500:	4618      	mov	r0, r3
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40023800 	.word	0x40023800
 8002508:	08005c6c 	.word	0x08005c6c

0800250c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002510:	f7ff ffdc 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 8002514:	4602      	mov	r2, r0
 8002516:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	0b5b      	lsrs	r3, r3, #13
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	4903      	ldr	r1, [pc, #12]	; (8002530 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002522:	5ccb      	ldrb	r3, [r1, r3]
 8002524:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	40023800 	.word	0x40023800
 8002530:	08005c6c 	.word	0x08005c6c

08002534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002534:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002538:	b0ae      	sub	sp, #184	; 0xb8
 800253a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8002542:	2300      	movs	r3, #0
 8002544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8002548:	2300      	movs	r3, #0
 800254a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800254e:	2300      	movs	r3, #0
 8002550:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8002554:	2300      	movs	r3, #0
 8002556:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800255a:	4bcb      	ldr	r3, [pc, #812]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b0c      	cmp	r3, #12
 8002564:	f200 8206 	bhi.w	8002974 <HAL_RCC_GetSysClockFreq+0x440>
 8002568:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <HAL_RCC_GetSysClockFreq+0x3c>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	080025a5 	.word	0x080025a5
 8002574:	08002975 	.word	0x08002975
 8002578:	08002975 	.word	0x08002975
 800257c:	08002975 	.word	0x08002975
 8002580:	080025ad 	.word	0x080025ad
 8002584:	08002975 	.word	0x08002975
 8002588:	08002975 	.word	0x08002975
 800258c:	08002975 	.word	0x08002975
 8002590:	080025b5 	.word	0x080025b5
 8002594:	08002975 	.word	0x08002975
 8002598:	08002975 	.word	0x08002975
 800259c:	08002975 	.word	0x08002975
 80025a0:	080027a5 	.word	0x080027a5
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80025a4:	4bb9      	ldr	r3, [pc, #740]	; (800288c <HAL_RCC_GetSysClockFreq+0x358>)
 80025a6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 80025aa:	e1e7      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80025ac:	4bb8      	ldr	r3, [pc, #736]	; (8002890 <HAL_RCC_GetSysClockFreq+0x35c>)
 80025ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80025b2:	e1e3      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80025b4:	4bb4      	ldr	r3, [pc, #720]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025c0:	4bb1      	ldr	r3, [pc, #708]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d071      	beq.n	80026b0 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025cc:	4bae      	ldr	r3, [pc, #696]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	099b      	lsrs	r3, r3, #6
 80025d2:	2200      	movs	r2, #0
 80025d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80025d8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80025dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80025e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80025e8:	2300      	movs	r3, #0
 80025ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80025ee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80025f2:	4622      	mov	r2, r4
 80025f4:	462b      	mov	r3, r5
 80025f6:	f04f 0000 	mov.w	r0, #0
 80025fa:	f04f 0100 	mov.w	r1, #0
 80025fe:	0159      	lsls	r1, r3, #5
 8002600:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002604:	0150      	lsls	r0, r2, #5
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4621      	mov	r1, r4
 800260c:	1a51      	subs	r1, r2, r1
 800260e:	6439      	str	r1, [r7, #64]	; 0x40
 8002610:	4629      	mov	r1, r5
 8002612:	eb63 0301 	sbc.w	r3, r3, r1
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
 8002618:	f04f 0200 	mov.w	r2, #0
 800261c:	f04f 0300 	mov.w	r3, #0
 8002620:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8002624:	4649      	mov	r1, r9
 8002626:	018b      	lsls	r3, r1, #6
 8002628:	4641      	mov	r1, r8
 800262a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800262e:	4641      	mov	r1, r8
 8002630:	018a      	lsls	r2, r1, #6
 8002632:	4641      	mov	r1, r8
 8002634:	1a51      	subs	r1, r2, r1
 8002636:	63b9      	str	r1, [r7, #56]	; 0x38
 8002638:	4649      	mov	r1, r9
 800263a:	eb63 0301 	sbc.w	r3, r3, r1
 800263e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002640:	f04f 0200 	mov.w	r2, #0
 8002644:	f04f 0300 	mov.w	r3, #0
 8002648:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800264c:	4649      	mov	r1, r9
 800264e:	00cb      	lsls	r3, r1, #3
 8002650:	4641      	mov	r1, r8
 8002652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002656:	4641      	mov	r1, r8
 8002658:	00ca      	lsls	r2, r1, #3
 800265a:	4610      	mov	r0, r2
 800265c:	4619      	mov	r1, r3
 800265e:	4603      	mov	r3, r0
 8002660:	4622      	mov	r2, r4
 8002662:	189b      	adds	r3, r3, r2
 8002664:	633b      	str	r3, [r7, #48]	; 0x30
 8002666:	462b      	mov	r3, r5
 8002668:	460a      	mov	r2, r1
 800266a:	eb42 0303 	adc.w	r3, r2, r3
 800266e:	637b      	str	r3, [r7, #52]	; 0x34
 8002670:	f04f 0200 	mov.w	r2, #0
 8002674:	f04f 0300 	mov.w	r3, #0
 8002678:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800267c:	4629      	mov	r1, r5
 800267e:	024b      	lsls	r3, r1, #9
 8002680:	4621      	mov	r1, r4
 8002682:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002686:	4621      	mov	r1, r4
 8002688:	024a      	lsls	r2, r1, #9
 800268a:	4610      	mov	r0, r2
 800268c:	4619      	mov	r1, r3
 800268e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002692:	2200      	movs	r2, #0
 8002694:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002698:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800269c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80026a0:	f7fd fe1e 	bl	80002e0 <__aeabi_uldivmod>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4613      	mov	r3, r2
 80026aa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80026ae:	e067      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026b0:	4b75      	ldr	r3, [pc, #468]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	099b      	lsrs	r3, r3, #6
 80026b6:	2200      	movs	r2, #0
 80026b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80026bc:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80026c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80026c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80026ca:	2300      	movs	r3, #0
 80026cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80026ce:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80026d2:	4622      	mov	r2, r4
 80026d4:	462b      	mov	r3, r5
 80026d6:	f04f 0000 	mov.w	r0, #0
 80026da:	f04f 0100 	mov.w	r1, #0
 80026de:	0159      	lsls	r1, r3, #5
 80026e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026e4:	0150      	lsls	r0, r2, #5
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	4621      	mov	r1, r4
 80026ec:	1a51      	subs	r1, r2, r1
 80026ee:	62b9      	str	r1, [r7, #40]	; 0x28
 80026f0:	4629      	mov	r1, r5
 80026f2:	eb63 0301 	sbc.w	r3, r3, r1
 80026f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	f04f 0300 	mov.w	r3, #0
 8002700:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002704:	4649      	mov	r1, r9
 8002706:	018b      	lsls	r3, r1, #6
 8002708:	4641      	mov	r1, r8
 800270a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800270e:	4641      	mov	r1, r8
 8002710:	018a      	lsls	r2, r1, #6
 8002712:	4641      	mov	r1, r8
 8002714:	ebb2 0a01 	subs.w	sl, r2, r1
 8002718:	4649      	mov	r1, r9
 800271a:	eb63 0b01 	sbc.w	fp, r3, r1
 800271e:	f04f 0200 	mov.w	r2, #0
 8002722:	f04f 0300 	mov.w	r3, #0
 8002726:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800272a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800272e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002732:	4692      	mov	sl, r2
 8002734:	469b      	mov	fp, r3
 8002736:	4623      	mov	r3, r4
 8002738:	eb1a 0303 	adds.w	r3, sl, r3
 800273c:	623b      	str	r3, [r7, #32]
 800273e:	462b      	mov	r3, r5
 8002740:	eb4b 0303 	adc.w	r3, fp, r3
 8002744:	627b      	str	r3, [r7, #36]	; 0x24
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	f04f 0300 	mov.w	r3, #0
 800274e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002752:	4629      	mov	r1, r5
 8002754:	028b      	lsls	r3, r1, #10
 8002756:	4621      	mov	r1, r4
 8002758:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800275c:	4621      	mov	r1, r4
 800275e:	028a      	lsls	r2, r1, #10
 8002760:	4610      	mov	r0, r2
 8002762:	4619      	mov	r1, r3
 8002764:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002768:	2200      	movs	r2, #0
 800276a:	673b      	str	r3, [r7, #112]	; 0x70
 800276c:	677a      	str	r2, [r7, #116]	; 0x74
 800276e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8002772:	f7fd fdb5 	bl	80002e0 <__aeabi_uldivmod>
 8002776:	4602      	mov	r2, r0
 8002778:	460b      	mov	r3, r1
 800277a:	4613      	mov	r3, r2
 800277c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002780:	4b41      	ldr	r3, [pc, #260]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	0c1b      	lsrs	r3, r3, #16
 8002786:	f003 0303 	and.w	r3, r3, #3
 800278a:	3301      	adds	r3, #1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8002792:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002796:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800279a:	fbb2 f3f3 	udiv	r3, r2, r3
 800279e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80027a2:	e0eb      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027a4:	4b38      	ldr	r3, [pc, #224]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80027b0:	4b35      	ldr	r3, [pc, #212]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d06b      	beq.n	8002894 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027bc:	4b32      	ldr	r3, [pc, #200]	; (8002888 <HAL_RCC_GetSysClockFreq+0x354>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	099b      	lsrs	r3, r3, #6
 80027c2:	2200      	movs	r2, #0
 80027c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80027c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027ce:	663b      	str	r3, [r7, #96]	; 0x60
 80027d0:	2300      	movs	r3, #0
 80027d2:	667b      	str	r3, [r7, #100]	; 0x64
 80027d4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80027d8:	4622      	mov	r2, r4
 80027da:	462b      	mov	r3, r5
 80027dc:	f04f 0000 	mov.w	r0, #0
 80027e0:	f04f 0100 	mov.w	r1, #0
 80027e4:	0159      	lsls	r1, r3, #5
 80027e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ea:	0150      	lsls	r0, r2, #5
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4621      	mov	r1, r4
 80027f2:	1a51      	subs	r1, r2, r1
 80027f4:	61b9      	str	r1, [r7, #24]
 80027f6:	4629      	mov	r1, r5
 80027f8:	eb63 0301 	sbc.w	r3, r3, r1
 80027fc:	61fb      	str	r3, [r7, #28]
 80027fe:	f04f 0200 	mov.w	r2, #0
 8002802:	f04f 0300 	mov.w	r3, #0
 8002806:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800280a:	4659      	mov	r1, fp
 800280c:	018b      	lsls	r3, r1, #6
 800280e:	4651      	mov	r1, sl
 8002810:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002814:	4651      	mov	r1, sl
 8002816:	018a      	lsls	r2, r1, #6
 8002818:	4651      	mov	r1, sl
 800281a:	ebb2 0801 	subs.w	r8, r2, r1
 800281e:	4659      	mov	r1, fp
 8002820:	eb63 0901 	sbc.w	r9, r3, r1
 8002824:	f04f 0200 	mov.w	r2, #0
 8002828:	f04f 0300 	mov.w	r3, #0
 800282c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002830:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002834:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002838:	4690      	mov	r8, r2
 800283a:	4699      	mov	r9, r3
 800283c:	4623      	mov	r3, r4
 800283e:	eb18 0303 	adds.w	r3, r8, r3
 8002842:	613b      	str	r3, [r7, #16]
 8002844:	462b      	mov	r3, r5
 8002846:	eb49 0303 	adc.w	r3, r9, r3
 800284a:	617b      	str	r3, [r7, #20]
 800284c:	f04f 0200 	mov.w	r2, #0
 8002850:	f04f 0300 	mov.w	r3, #0
 8002854:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002858:	4629      	mov	r1, r5
 800285a:	024b      	lsls	r3, r1, #9
 800285c:	4621      	mov	r1, r4
 800285e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002862:	4621      	mov	r1, r4
 8002864:	024a      	lsls	r2, r1, #9
 8002866:	4610      	mov	r0, r2
 8002868:	4619      	mov	r1, r3
 800286a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800286e:	2200      	movs	r2, #0
 8002870:	65bb      	str	r3, [r7, #88]	; 0x58
 8002872:	65fa      	str	r2, [r7, #92]	; 0x5c
 8002874:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002878:	f7fd fd32 	bl	80002e0 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002886:	e065      	b.n	8002954 <HAL_RCC_GetSysClockFreq+0x420>
 8002888:	40023800 	.word	0x40023800
 800288c:	00f42400 	.word	0x00f42400
 8002890:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002894:	4b3d      	ldr	r3, [pc, #244]	; (800298c <HAL_RCC_GetSysClockFreq+0x458>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	099b      	lsrs	r3, r3, #6
 800289a:	2200      	movs	r2, #0
 800289c:	4618      	mov	r0, r3
 800289e:	4611      	mov	r1, r2
 80028a0:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028a4:	653b      	str	r3, [r7, #80]	; 0x50
 80028a6:	2300      	movs	r3, #0
 80028a8:	657b      	str	r3, [r7, #84]	; 0x54
 80028aa:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80028ae:	4642      	mov	r2, r8
 80028b0:	464b      	mov	r3, r9
 80028b2:	f04f 0000 	mov.w	r0, #0
 80028b6:	f04f 0100 	mov.w	r1, #0
 80028ba:	0159      	lsls	r1, r3, #5
 80028bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c0:	0150      	lsls	r0, r2, #5
 80028c2:	4602      	mov	r2, r0
 80028c4:	460b      	mov	r3, r1
 80028c6:	4641      	mov	r1, r8
 80028c8:	1a51      	subs	r1, r2, r1
 80028ca:	60b9      	str	r1, [r7, #8]
 80028cc:	4649      	mov	r1, r9
 80028ce:	eb63 0301 	sbc.w	r3, r3, r1
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80028e0:	4659      	mov	r1, fp
 80028e2:	018b      	lsls	r3, r1, #6
 80028e4:	4651      	mov	r1, sl
 80028e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80028ea:	4651      	mov	r1, sl
 80028ec:	018a      	lsls	r2, r1, #6
 80028ee:	4651      	mov	r1, sl
 80028f0:	1a54      	subs	r4, r2, r1
 80028f2:	4659      	mov	r1, fp
 80028f4:	eb63 0501 	sbc.w	r5, r3, r1
 80028f8:	f04f 0200 	mov.w	r2, #0
 80028fc:	f04f 0300 	mov.w	r3, #0
 8002900:	00eb      	lsls	r3, r5, #3
 8002902:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002906:	00e2      	lsls	r2, r4, #3
 8002908:	4614      	mov	r4, r2
 800290a:	461d      	mov	r5, r3
 800290c:	4643      	mov	r3, r8
 800290e:	18e3      	adds	r3, r4, r3
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	464b      	mov	r3, r9
 8002914:	eb45 0303 	adc.w	r3, r5, r3
 8002918:	607b      	str	r3, [r7, #4]
 800291a:	f04f 0200 	mov.w	r2, #0
 800291e:	f04f 0300 	mov.w	r3, #0
 8002922:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002926:	4629      	mov	r1, r5
 8002928:	028b      	lsls	r3, r1, #10
 800292a:	4621      	mov	r1, r4
 800292c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002930:	4621      	mov	r1, r4
 8002932:	028a      	lsls	r2, r1, #10
 8002934:	4610      	mov	r0, r2
 8002936:	4619      	mov	r1, r3
 8002938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800293c:	2200      	movs	r2, #0
 800293e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002940:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002942:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002946:	f7fd fccb 	bl	80002e0 <__aeabi_uldivmod>
 800294a:	4602      	mov	r2, r0
 800294c:	460b      	mov	r3, r1
 800294e:	4613      	mov	r3, r2
 8002950:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002954:	4b0d      	ldr	r3, [pc, #52]	; (800298c <HAL_RCC_GetSysClockFreq+0x458>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	0f1b      	lsrs	r3, r3, #28
 800295a:	f003 0307 	and.w	r3, r3, #7
 800295e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002962:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800296a:	fbb2 f3f3 	udiv	r3, r2, r3
 800296e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002972:	e003      	b.n	800297c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002974:	4b06      	ldr	r3, [pc, #24]	; (8002990 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002976:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800297a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800297c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002980:	4618      	mov	r0, r3
 8002982:	37b8      	adds	r7, #184	; 0xb8
 8002984:	46bd      	mov	sp, r7
 8002986:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800298a:	bf00      	nop
 800298c:	40023800 	.word	0x40023800
 8002990:	00f42400 	.word	0x00f42400

08002994 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b086      	sub	sp, #24
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d101      	bne.n	80029a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	e28d      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	f000 8083 	beq.w	8002aba <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029b4:	4b94      	ldr	r3, [pc, #592]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 030c 	and.w	r3, r3, #12
 80029bc:	2b04      	cmp	r3, #4
 80029be:	d019      	beq.n	80029f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029c0:	4b91      	ldr	r3, [pc, #580]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d106      	bne.n	80029da <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029cc:	4b8e      	ldr	r3, [pc, #568]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029d8:	d00c      	beq.n	80029f4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029da:	4b8b      	ldr	r3, [pc, #556]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d112      	bne.n	8002a0c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029e6:	4b88      	ldr	r3, [pc, #544]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f2:	d10b      	bne.n	8002a0c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029f4:	4b84      	ldr	r3, [pc, #528]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d05b      	beq.n	8002ab8 <HAL_RCC_OscConfig+0x124>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	685b      	ldr	r3, [r3, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d157      	bne.n	8002ab8 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e25a      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a14:	d106      	bne.n	8002a24 <HAL_RCC_OscConfig+0x90>
 8002a16:	4b7c      	ldr	r3, [pc, #496]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a7b      	ldr	r2, [pc, #492]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a20:	6013      	str	r3, [r2, #0]
 8002a22:	e01d      	b.n	8002a60 <HAL_RCC_OscConfig+0xcc>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a2c:	d10c      	bne.n	8002a48 <HAL_RCC_OscConfig+0xb4>
 8002a2e:	4b76      	ldr	r3, [pc, #472]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a75      	ldr	r2, [pc, #468]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	4b73      	ldr	r3, [pc, #460]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a72      	ldr	r2, [pc, #456]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	6013      	str	r3, [r2, #0]
 8002a46:	e00b      	b.n	8002a60 <HAL_RCC_OscConfig+0xcc>
 8002a48:	4b6f      	ldr	r3, [pc, #444]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a6e      	ldr	r2, [pc, #440]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a52:	6013      	str	r3, [r2, #0]
 8002a54:	4b6c      	ldr	r3, [pc, #432]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a6b      	ldr	r2, [pc, #428]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d013      	beq.n	8002a90 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a68:	f7fe fc7c 	bl	8001364 <HAL_GetTick>
 8002a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a70:	f7fe fc78 	bl	8001364 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b64      	cmp	r3, #100	; 0x64
 8002a7c:	d901      	bls.n	8002a82 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e21f      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a82:	4b61      	ldr	r3, [pc, #388]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d0f0      	beq.n	8002a70 <HAL_RCC_OscConfig+0xdc>
 8002a8e:	e014      	b.n	8002aba <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fc68 	bl	8001364 <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe fc64 	bl	8001364 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b64      	cmp	r3, #100	; 0x64
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e20b      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aaa:	4b57      	ldr	r3, [pc, #348]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x104>
 8002ab6:	e000      	b.n	8002aba <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ab8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d06f      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ac6:	4b50      	ldr	r3, [pc, #320]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 030c 	and.w	r3, r3, #12
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d017      	beq.n	8002b02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ad2:	4b4d      	ldr	r3, [pc, #308]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002ada:	2b08      	cmp	r3, #8
 8002adc:	d105      	bne.n	8002aea <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002ade:	4b4a      	ldr	r3, [pc, #296]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002ae0:	685b      	ldr	r3, [r3, #4]
 8002ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aea:	4b47      	ldr	r3, [pc, #284]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002af2:	2b0c      	cmp	r3, #12
 8002af4:	d11c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af6:	4b44      	ldr	r3, [pc, #272]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	4b41      	ldr	r3, [pc, #260]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x186>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e1d3      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b3b      	ldr	r3, [pc, #236]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4937      	ldr	r1, [pc, #220]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	e03a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b38:	4b34      	ldr	r3, [pc, #208]	; (8002c0c <HAL_RCC_OscConfig+0x278>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7fe fc11 	bl	8001364 <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b46:	f7fe fc0d 	bl	8001364 <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1b4      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	4b2b      	ldr	r3, [pc, #172]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4925      	ldr	r1, [pc, #148]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b24      	ldr	r3, [pc, #144]	; (8002c0c <HAL_RCC_OscConfig+0x278>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7fe fbf0 	bl	8001364 <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b88:	f7fe fbec 	bl	8001364 <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e193      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	4b1b      	ldr	r3, [pc, #108]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d036      	beq.n	8002c20 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4b15      	ldr	r3, [pc, #84]	; (8002c10 <HAL_RCC_OscConfig+0x27c>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fbd0 	bl	8001364 <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7fe fbcc 	bl	8001364 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e173      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bda:	4b0b      	ldr	r3, [pc, #44]	; (8002c08 <HAL_RCC_OscConfig+0x274>)
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x234>
 8002be6:	e01b      	b.n	8002c20 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be8:	4b09      	ldr	r3, [pc, #36]	; (8002c10 <HAL_RCC_OscConfig+0x27c>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bee:	f7fe fbb9 	bl	8001364 <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	e00e      	b.n	8002c14 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf6:	f7fe fbb5 	bl	8001364 <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d907      	bls.n	8002c14 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e15c      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
 8002c08:	40023800 	.word	0x40023800
 8002c0c:	42470000 	.word	0x42470000
 8002c10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c14:	4b8a      	ldr	r3, [pc, #552]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002c16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ea      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 8097 	beq.w	8002d5c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c32:	4b83      	ldr	r3, [pc, #524]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d10f      	bne.n	8002c5e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
 8002c42:	4b7f      	ldr	r3, [pc, #508]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a7e      	ldr	r2, [pc, #504]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002c48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b7c      	ldr	r3, [pc, #496]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c5e:	4b79      	ldr	r3, [pc, #484]	; (8002e44 <HAL_RCC_OscConfig+0x4b0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d118      	bne.n	8002c9c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c6a:	4b76      	ldr	r3, [pc, #472]	; (8002e44 <HAL_RCC_OscConfig+0x4b0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a75      	ldr	r2, [pc, #468]	; (8002e44 <HAL_RCC_OscConfig+0x4b0>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c76:	f7fe fb75 	bl	8001364 <HAL_GetTick>
 8002c7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c7c:	e008      	b.n	8002c90 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7e:	f7fe fb71 	bl	8001364 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d901      	bls.n	8002c90 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	e118      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c90:	4b6c      	ldr	r3, [pc, #432]	; (8002e44 <HAL_RCC_OscConfig+0x4b0>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f0      	beq.n	8002c7e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d106      	bne.n	8002cb2 <HAL_RCC_OscConfig+0x31e>
 8002ca4:	4b66      	ldr	r3, [pc, #408]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca8:	4a65      	ldr	r2, [pc, #404]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002caa:	f043 0301 	orr.w	r3, r3, #1
 8002cae:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb0:	e01c      	b.n	8002cec <HAL_RCC_OscConfig+0x358>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	2b05      	cmp	r3, #5
 8002cb8:	d10c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x340>
 8002cba:	4b61      	ldr	r3, [pc, #388]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4a60      	ldr	r2, [pc, #384]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002cc0:	f043 0304 	orr.w	r3, r3, #4
 8002cc4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cc6:	4b5e      	ldr	r3, [pc, #376]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cca:	4a5d      	ldr	r2, [pc, #372]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002ccc:	f043 0301 	orr.w	r3, r3, #1
 8002cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd2:	e00b      	b.n	8002cec <HAL_RCC_OscConfig+0x358>
 8002cd4:	4b5a      	ldr	r3, [pc, #360]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	4a59      	ldr	r2, [pc, #356]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002cda:	f023 0301 	bic.w	r3, r3, #1
 8002cde:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce0:	4b57      	ldr	r3, [pc, #348]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce4:	4a56      	ldr	r2, [pc, #344]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002ce6:	f023 0304 	bic.w	r3, r3, #4
 8002cea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d015      	beq.n	8002d20 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe fb36 	bl	8001364 <HAL_GetTick>
 8002cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cfa:	e00a      	b.n	8002d12 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cfc:	f7fe fb32 	bl	8001364 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d901      	bls.n	8002d12 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e0d7      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d12:	4b4b      	ldr	r3, [pc, #300]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d0ee      	beq.n	8002cfc <HAL_RCC_OscConfig+0x368>
 8002d1e:	e014      	b.n	8002d4a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d20:	f7fe fb20 	bl	8001364 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d26:	e00a      	b.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d28:	f7fe fb1c 	bl	8001364 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e0c1      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d3e:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1ee      	bne.n	8002d28 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d4a:	7dfb      	ldrb	r3, [r7, #23]
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d50:	4b3b      	ldr	r3, [pc, #236]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d54:	4a3a      	ldr	r2, [pc, #232]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	699b      	ldr	r3, [r3, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80ad 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	f003 030c 	and.w	r3, r3, #12
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d060      	beq.n	8002e34 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	699b      	ldr	r3, [r3, #24]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d145      	bne.n	8002e06 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b33      	ldr	r3, [pc, #204]	; (8002e48 <HAL_RCC_OscConfig+0x4b4>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7fe faf0 	bl	8001364 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe faec 	bl	8001364 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e093      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69da      	ldr	r2, [r3, #28]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a1b      	ldr	r3, [r3, #32]
 8002dae:	431a      	orrs	r2, r3
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	019b      	lsls	r3, r3, #6
 8002db6:	431a      	orrs	r2, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbc:	085b      	lsrs	r3, r3, #1
 8002dbe:	3b01      	subs	r3, #1
 8002dc0:	041b      	lsls	r3, r3, #16
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc8:	061b      	lsls	r3, r3, #24
 8002dca:	431a      	orrs	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd0:	071b      	lsls	r3, r3, #28
 8002dd2:	491b      	ldr	r1, [pc, #108]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd8:	4b1b      	ldr	r3, [pc, #108]	; (8002e48 <HAL_RCC_OscConfig+0x4b4>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7fe fac1 	bl	8001364 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de6:	f7fe fabd 	bl	8001364 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e064      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x452>
 8002e04:	e05c      	b.n	8002ec0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e06:	4b10      	ldr	r3, [pc, #64]	; (8002e48 <HAL_RCC_OscConfig+0x4b4>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0c:	f7fe faaa 	bl	8001364 <HAL_GetTick>
 8002e10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e12:	e008      	b.n	8002e26 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e14:	f7fe faa6 	bl	8001364 <HAL_GetTick>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	1ad3      	subs	r3, r2, r3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d901      	bls.n	8002e26 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e22:	2303      	movs	r3, #3
 8002e24:	e04d      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e26:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <HAL_RCC_OscConfig+0x4ac>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d1f0      	bne.n	8002e14 <HAL_RCC_OscConfig+0x480>
 8002e32:	e045      	b.n	8002ec0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d107      	bne.n	8002e4c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e040      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40007000 	.word	0x40007000
 8002e48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e4c:	4b1f      	ldr	r3, [pc, #124]	; (8002ecc <HAL_RCC_OscConfig+0x538>)
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d030      	beq.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d129      	bne.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d122      	bne.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e7c:	4013      	ands	r3, r2
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d119      	bne.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e92:	085b      	lsrs	r3, r3, #1
 8002e94:	3b01      	subs	r3, #1
 8002e96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d10f      	bne.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d107      	bne.n	8002ebc <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb6:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d001      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3718      	adds	r7, #24
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
 8002eca:	bf00      	nop
 8002ecc:	40023800 	.word	0x40023800

08002ed0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e03f      	b.n	8002f62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d106      	bne.n	8002efc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f7fe f80e 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2224      	movs	r2, #36	; 0x24
 8002f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68da      	ldr	r2, [r3, #12]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f14:	6878      	ldr	r0, [r7, #4]
 8002f16:	f000 fd23 	bl	8003960 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	695a      	ldr	r2, [r3, #20]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68da      	ldr	r2, [r3, #12]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2220      	movs	r2, #32
 8002f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f60:	2300      	movs	r3, #0
}
 8002f62:	4618      	mov	r0, r3
 8002f64:	3708      	adds	r7, #8
 8002f66:	46bd      	mov	sp, r7
 8002f68:	bd80      	pop	{r7, pc}

08002f6a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b085      	sub	sp, #20
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	4613      	mov	r3, r2
 8002f76:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d130      	bne.n	8002fe6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d002      	beq.n	8002f90 <HAL_UART_Transmit_IT+0x26>
 8002f8a:	88fb      	ldrh	r3, [r7, #6]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d101      	bne.n	8002f94 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e029      	b.n	8002fe8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Transmit_IT+0x38>
 8002f9e:	2302      	movs	r3, #2
 8002fa0:	e022      	b.n	8002fe8 <HAL_UART_Transmit_IT+0x7e>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	68ba      	ldr	r2, [r7, #8]
 8002fae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	88fa      	ldrh	r2, [r7, #6]
 8002fb4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	88fa      	ldrh	r2, [r7, #6]
 8002fba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	2221      	movs	r2, #33	; 0x21
 8002fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002fe0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	e000      	b.n	8002fe8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8002fe6:	2302      	movs	r3, #2
  }
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b084      	sub	sp, #16
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	4613      	mov	r3, r2
 8003000:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b20      	cmp	r3, #32
 800300c:	d11d      	bne.n	800304a <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d002      	beq.n	800301a <HAL_UART_Receive_IT+0x26>
 8003014:	88fb      	ldrh	r3, [r7, #6]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d101      	bne.n	800301e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e016      	b.n	800304c <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_UART_Receive_IT+0x38>
 8003028:	2302      	movs	r3, #2
 800302a:	e00f      	b.n	800304c <HAL_UART_Receive_IT+0x58>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2200      	movs	r2, #0
 8003038:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800303a:	88fb      	ldrh	r3, [r7, #6]
 800303c:	461a      	mov	r2, r3
 800303e:	68b9      	ldr	r1, [r7, #8]
 8003040:	68f8      	ldr	r0, [r7, #12]
 8003042:	f000 fab5 	bl	80035b0 <UART_Start_Receive_IT>
 8003046:	4603      	mov	r3, r0
 8003048:	e000      	b.n	800304c <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800304a:	2302      	movs	r3, #2
  }
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b0ba      	sub	sp, #232	; 0xe8
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695b      	ldr	r3, [r3, #20]
 8003076:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800307a:	2300      	movs	r3, #0
 800307c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003080:	2300      	movs	r3, #0
 8003082:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800308a:	f003 030f 	and.w	r3, r3, #15
 800308e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003092:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800309a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800309e:	f003 0320 	and.w	r3, r3, #32
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d009      	beq.n	80030ba <HAL_UART_IRQHandler+0x66>
 80030a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030aa:	f003 0320 	and.w	r3, r3, #32
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d003      	beq.n	80030ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fb99 	bl	80037ea <UART_Receive_IT>
      return;
 80030b8:	e256      	b.n	8003568 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 80de 	beq.w	8003280 <HAL_UART_IRQHandler+0x22c>
 80030c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d106      	bne.n	80030de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80d1 	beq.w	8003280 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00b      	beq.n	8003102 <HAL_UART_IRQHandler+0xae>
 80030ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d005      	beq.n	8003102 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f043 0201 	orr.w	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003102:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00b      	beq.n	8003126 <HAL_UART_IRQHandler+0xd2>
 800310e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003112:	f003 0301 	and.w	r3, r3, #1
 8003116:	2b00      	cmp	r3, #0
 8003118:	d005      	beq.n	8003126 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311e:	f043 0202 	orr.w	r2, r3, #2
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003126:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00b      	beq.n	800314a <HAL_UART_IRQHandler+0xf6>
 8003132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003136:	f003 0301 	and.w	r3, r3, #1
 800313a:	2b00      	cmp	r3, #0
 800313c:	d005      	beq.n	800314a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003142:	f043 0204 	orr.w	r2, r3, #4
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800314a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800314e:	f003 0308 	and.w	r3, r3, #8
 8003152:	2b00      	cmp	r3, #0
 8003154:	d011      	beq.n	800317a <HAL_UART_IRQHandler+0x126>
 8003156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d105      	bne.n	800316e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d005      	beq.n	800317a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f043 0208 	orr.w	r2, r3, #8
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	2b00      	cmp	r3, #0
 8003180:	f000 81ed 	beq.w	800355e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003184:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003188:	f003 0320 	and.w	r3, r3, #32
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_UART_IRQHandler+0x14e>
 8003190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003194:	f003 0320 	and.w	r3, r3, #32
 8003198:	2b00      	cmp	r3, #0
 800319a:	d002      	beq.n	80031a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800319c:	6878      	ldr	r0, [r7, #4]
 800319e:	f000 fb24 	bl	80037ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ac:	2b40      	cmp	r3, #64	; 0x40
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d103      	bne.n	80031ce <HAL_UART_IRQHandler+0x17a>
 80031c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d04f      	beq.n	800326e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fa2c 	bl	800362c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	695b      	ldr	r3, [r3, #20]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b40      	cmp	r3, #64	; 0x40
 80031e0:	d141      	bne.n	8003266 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3314      	adds	r3, #20
 80031e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80031f0:	e853 3f00 	ldrex	r3, [r3]
 80031f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80031f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003200:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	3314      	adds	r3, #20
 800320a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800320e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003212:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003216:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800321a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800321e:	e841 2300 	strex	r3, r2, [r1]
 8003222:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003226:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1d9      	bne.n	80031e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003232:	2b00      	cmp	r3, #0
 8003234:	d013      	beq.n	800325e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800323a:	4a7d      	ldr	r2, [pc, #500]	; (8003430 <HAL_UART_IRQHandler+0x3dc>)
 800323c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003242:	4618      	mov	r0, r3
 8003244:	f7fe fa3f 	bl	80016c6 <HAL_DMA_Abort_IT>
 8003248:	4603      	mov	r3, r0
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003252:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003258:	4610      	mov	r0, r2
 800325a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800325c:	e00e      	b.n	800327c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f990 	bl	8003584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003264:	e00a      	b.n	800327c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f98c 	bl	8003584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	e006      	b.n	800327c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f988 	bl	8003584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2200      	movs	r2, #0
 8003278:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800327a:	e170      	b.n	800355e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800327c:	bf00      	nop
    return;
 800327e:	e16e      	b.n	800355e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003284:	2b01      	cmp	r3, #1
 8003286:	f040 814a 	bne.w	800351e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800328a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800328e:	f003 0310 	and.w	r3, r3, #16
 8003292:	2b00      	cmp	r3, #0
 8003294:	f000 8143 	beq.w	800351e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003298:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800329c:	f003 0310 	and.w	r3, r3, #16
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 813c 	beq.w	800351e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80032a6:	2300      	movs	r3, #0
 80032a8:	60bb      	str	r3, [r7, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	60bb      	str	r3, [r7, #8]
 80032ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	695b      	ldr	r3, [r3, #20]
 80032c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032c6:	2b40      	cmp	r3, #64	; 0x40
 80032c8:	f040 80b4 	bne.w	8003434 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80032d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8140 	beq.w	8003562 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032ea:	429a      	cmp	r2, r3
 80032ec:	f080 8139 	bcs.w	8003562 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80032f6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003302:	f000 8088 	beq.w	8003416 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	330c      	adds	r3, #12
 800330c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800331c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003320:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003324:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003332:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003336:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800333e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003342:	e841 2300 	strex	r3, r2, [r1]
 8003346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800334a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800334e:	2b00      	cmp	r3, #0
 8003350:	d1d9      	bne.n	8003306 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3314      	adds	r3, #20
 8003358:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003362:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3314      	adds	r3, #20
 8003372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003376:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800337a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800337e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003382:	e841 2300 	strex	r3, r2, [r1]
 8003386:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800338a:	2b00      	cmp	r3, #0
 800338c:	d1e1      	bne.n	8003352 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	3314      	adds	r3, #20
 8003394:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003398:	e853 3f00 	ldrex	r3, [r3]
 800339c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800339e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	3314      	adds	r3, #20
 80033ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80033b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80033b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80033b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80033c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e3      	bne.n	800338e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	330c      	adds	r3, #12
 80033da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033de:	e853 3f00 	ldrex	r3, [r3]
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80033e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80033e6:	f023 0310 	bic.w	r3, r3, #16
 80033ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	330c      	adds	r3, #12
 80033f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80033f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80033fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80033fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003400:	e841 2300 	strex	r3, r2, [r1]
 8003404:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003406:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1e3      	bne.n	80033d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003410:	4618      	mov	r0, r3
 8003412:	f7fe f8e8 	bl	80015e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800341e:	b29b      	uxth	r3, r3
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	b29b      	uxth	r3, r3
 8003424:	4619      	mov	r1, r3
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f000 f8b6 	bl	8003598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800342c:	e099      	b.n	8003562 <HAL_UART_IRQHandler+0x50e>
 800342e:	bf00      	nop
 8003430:	080036f3 	.word	0x080036f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800343c:	b29b      	uxth	r3, r3
 800343e:	1ad3      	subs	r3, r2, r3
 8003440:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 808b 	beq.w	8003566 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003450:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003454:	2b00      	cmp	r3, #0
 8003456:	f000 8086 	beq.w	8003566 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	330c      	adds	r3, #12
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800346a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003470:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	330c      	adds	r3, #12
 800347a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800347e:	647a      	str	r2, [r7, #68]	; 0x44
 8003480:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003482:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003484:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003486:	e841 2300 	strex	r3, r2, [r1]
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800348c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800348e:	2b00      	cmp	r3, #0
 8003490:	d1e3      	bne.n	800345a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	3314      	adds	r3, #20
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	e853 3f00 	ldrex	r3, [r3]
 80034a0:	623b      	str	r3, [r7, #32]
   return(result);
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	f023 0301 	bic.w	r3, r3, #1
 80034a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80034b6:	633a      	str	r2, [r7, #48]	; 0x30
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80034bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034be:	e841 2300 	strex	r3, r2, [r1]
 80034c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80034c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d1e3      	bne.n	8003492 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	330c      	adds	r3, #12
 80034de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	e853 3f00 	ldrex	r3, [r3]
 80034e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f023 0310 	bic.w	r3, r3, #16
 80034ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	330c      	adds	r3, #12
 80034f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80034fc:	61fa      	str	r2, [r7, #28]
 80034fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003500:	69b9      	ldr	r1, [r7, #24]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	e841 2300 	strex	r3, r2, [r1]
 8003508:	617b      	str	r3, [r7, #20]
   return(result);
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d1e3      	bne.n	80034d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003510:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003514:	4619      	mov	r1, r3
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f83e 	bl	8003598 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800351c:	e023      	b.n	8003566 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800351e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003522:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003526:	2b00      	cmp	r3, #0
 8003528:	d009      	beq.n	800353e <HAL_UART_IRQHandler+0x4ea>
 800352a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800352e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8ef 	bl	800371a <UART_Transmit_IT>
    return;
 800353c:	e014      	b.n	8003568 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800353e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00e      	beq.n	8003568 <HAL_UART_IRQHandler+0x514>
 800354a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800354e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f92f 	bl	80037ba <UART_EndTransmit_IT>
    return;
 800355c:	e004      	b.n	8003568 <HAL_UART_IRQHandler+0x514>
    return;
 800355e:	bf00      	nop
 8003560:	e002      	b.n	8003568 <HAL_UART_IRQHandler+0x514>
      return;
 8003562:	bf00      	nop
 8003564:	e000      	b.n	8003568 <HAL_UART_IRQHandler+0x514>
      return;
 8003566:	bf00      	nop
  }
}
 8003568:	37e8      	adds	r7, #232	; 0xe8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop

08003570 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	460b      	mov	r3, r1
 80035a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	4613      	mov	r3, r2
 80035bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	68ba      	ldr	r2, [r7, #8]
 80035c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	88fa      	ldrh	r2, [r7, #6]
 80035c8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	88fa      	ldrh	r2, [r7, #6]
 80035ce:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2222      	movs	r2, #34	; 0x22
 80035da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	691b      	ldr	r3, [r3, #16]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d007      	beq.n	80035fe <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68da      	ldr	r2, [r3, #12]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80035fc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695a      	ldr	r2, [r3, #20]
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f042 0201 	orr.w	r2, r2, #1
 800360c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	68da      	ldr	r2, [r3, #12]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f042 0220 	orr.w	r2, r2, #32
 800361c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800362c:	b480      	push	{r7}
 800362e:	b095      	sub	sp, #84	; 0x54
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	330c      	adds	r3, #12
 800363a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800363c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800363e:	e853 3f00 	ldrex	r3, [r3]
 8003642:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003644:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003646:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800364a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	330c      	adds	r3, #12
 8003652:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003654:	643a      	str	r2, [r7, #64]	; 0x40
 8003656:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003658:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800365a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800365c:	e841 2300 	strex	r3, r2, [r1]
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003664:	2b00      	cmp	r3, #0
 8003666:	d1e5      	bne.n	8003634 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3314      	adds	r3, #20
 800366e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	e853 3f00 	ldrex	r3, [r3]
 8003676:	61fb      	str	r3, [r7, #28]
   return(result);
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f023 0301 	bic.w	r3, r3, #1
 800367e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	3314      	adds	r3, #20
 8003686:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003688:	62fa      	str	r2, [r7, #44]	; 0x2c
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800368c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800368e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003690:	e841 2300 	strex	r3, r2, [r1]
 8003694:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1e5      	bne.n	8003668 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d119      	bne.n	80036d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	330c      	adds	r3, #12
 80036aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	e853 3f00 	ldrex	r3, [r3]
 80036b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	f023 0310 	bic.w	r3, r3, #16
 80036ba:	647b      	str	r3, [r7, #68]	; 0x44
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	330c      	adds	r3, #12
 80036c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80036c4:	61ba      	str	r2, [r7, #24]
 80036c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c8:	6979      	ldr	r1, [r7, #20]
 80036ca:	69ba      	ldr	r2, [r7, #24]
 80036cc:	e841 2300 	strex	r3, r2, [r1]
 80036d0:	613b      	str	r3, [r7, #16]
   return(result);
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d1e5      	bne.n	80036a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2220      	movs	r2, #32
 80036dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80036e6:	bf00      	nop
 80036e8:	3754      	adds	r7, #84	; 0x54
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b084      	sub	sp, #16
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800370c:	68f8      	ldr	r0, [r7, #12]
 800370e:	f7ff ff39 	bl	8003584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003712:	bf00      	nop
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}

0800371a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800371a:	b480      	push	{r7}
 800371c:	b085      	sub	sp, #20
 800371e:	af00      	add	r7, sp, #0
 8003720:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003728:	b2db      	uxtb	r3, r3
 800372a:	2b21      	cmp	r3, #33	; 0x21
 800372c:	d13e      	bne.n	80037ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003736:	d114      	bne.n	8003762 <UART_Transmit_IT+0x48>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d110      	bne.n	8003762 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	881b      	ldrh	r3, [r3, #0]
 800374a:	461a      	mov	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003754:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	1c9a      	adds	r2, r3, #2
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	621a      	str	r2, [r3, #32]
 8003760:	e008      	b.n	8003774 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	1c59      	adds	r1, r3, #1
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6211      	str	r1, [r2, #32]
 800376c:	781a      	ldrb	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003778:	b29b      	uxth	r3, r3
 800377a:	3b01      	subs	r3, #1
 800377c:	b29b      	uxth	r3, r3
 800377e:	687a      	ldr	r2, [r7, #4]
 8003780:	4619      	mov	r1, r3
 8003782:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10f      	bne.n	80037a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68da      	ldr	r2, [r3, #12]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003796:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80037ac:	2302      	movs	r3, #2
  }
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	3714      	adds	r7, #20
 80037b2:	46bd      	mov	sp, r7
 80037b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b8:	4770      	bx	lr

080037ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68da      	ldr	r2, [r3, #12]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2220      	movs	r2, #32
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f7ff fec8 	bl	8003570 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3708      	adds	r7, #8
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b08c      	sub	sp, #48	; 0x30
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b22      	cmp	r3, #34	; 0x22
 80037fc:	f040 80ab 	bne.w	8003956 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003808:	d117      	bne.n	800383a <UART_Receive_IT+0x50>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d113      	bne.n	800383a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003812:	2300      	movs	r3, #0
 8003814:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	b29b      	uxth	r3, r3
 8003824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003828:	b29a      	uxth	r2, r3
 800382a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800382c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003832:	1c9a      	adds	r2, r3, #2
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	629a      	str	r2, [r3, #40]	; 0x28
 8003838:	e026      	b.n	8003888 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003840:	2300      	movs	r3, #0
 8003842:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800384c:	d007      	beq.n	800385e <UART_Receive_IT+0x74>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10a      	bne.n	800386c <UART_Receive_IT+0x82>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d106      	bne.n	800386c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	b2da      	uxtb	r2, r3
 8003866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003868:	701a      	strb	r2, [r3, #0]
 800386a:	e008      	b.n	800387e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	b2db      	uxtb	r3, r3
 8003874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003878:	b2da      	uxtb	r2, r3
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800388c:	b29b      	uxth	r3, r3
 800388e:	3b01      	subs	r3, #1
 8003890:	b29b      	uxth	r3, r3
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	4619      	mov	r1, r3
 8003896:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003898:	2b00      	cmp	r3, #0
 800389a:	d15a      	bne.n	8003952 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f022 0220 	bic.w	r2, r2, #32
 80038aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68da      	ldr	r2, [r3, #12]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80038ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 0201 	bic.w	r2, r2, #1
 80038ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d135      	bne.n	8003948 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	330c      	adds	r3, #12
 80038e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	e853 3f00 	ldrex	r3, [r3]
 80038f0:	613b      	str	r3, [r7, #16]
   return(result);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	f023 0310 	bic.w	r3, r3, #16
 80038f8:	627b      	str	r3, [r7, #36]	; 0x24
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003902:	623a      	str	r2, [r7, #32]
 8003904:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	69f9      	ldr	r1, [r7, #28]
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	61bb      	str	r3, [r7, #24]
   return(result);
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e5      	bne.n	80038e2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0310 	and.w	r3, r3, #16
 8003920:	2b10      	cmp	r3, #16
 8003922:	d10a      	bne.n	800393a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003924:	2300      	movs	r3, #0
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	60fb      	str	r3, [r7, #12]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	60fb      	str	r3, [r7, #12]
 8003938:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800393e:	4619      	mov	r1, r3
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f7ff fe29 	bl	8003598 <HAL_UARTEx_RxEventCallback>
 8003946:	e002      	b.n	800394e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7fc ff8d 	bl	8000868 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800394e:	2300      	movs	r3, #0
 8003950:	e002      	b.n	8003958 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003952:	2300      	movs	r3, #0
 8003954:	e000      	b.n	8003958 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8003956:	2302      	movs	r3, #2
  }
}
 8003958:	4618      	mov	r0, r3
 800395a:	3730      	adds	r7, #48	; 0x30
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003960:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003964:	b0c0      	sub	sp, #256	; 0x100
 8003966:	af00      	add	r7, sp, #0
 8003968:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800396c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003978:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800397c:	68d9      	ldr	r1, [r3, #12]
 800397e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	ea40 0301 	orr.w	r3, r0, r1
 8003988:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800398a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	431a      	orrs	r2, r3
 8003998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	431a      	orrs	r2, r3
 80039a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80039ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80039b8:	f021 010c 	bic.w	r1, r1, #12
 80039bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80039c6:	430b      	orrs	r3, r1
 80039c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80039ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80039d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039da:	6999      	ldr	r1, [r3, #24]
 80039dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	ea40 0301 	orr.w	r3, r0, r1
 80039e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80039e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039ec:	681a      	ldr	r2, [r3, #0]
 80039ee:	4b8f      	ldr	r3, [pc, #572]	; (8003c2c <UART_SetConfig+0x2cc>)
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d005      	beq.n	8003a00 <UART_SetConfig+0xa0>
 80039f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b8d      	ldr	r3, [pc, #564]	; (8003c30 <UART_SetConfig+0x2d0>)
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d104      	bne.n	8003a0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003a00:	f7fe fd84 	bl	800250c <HAL_RCC_GetPCLK2Freq>
 8003a04:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003a08:	e003      	b.n	8003a12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a0a:	f7fe fd6b 	bl	80024e4 <HAL_RCC_GetPCLK1Freq>
 8003a0e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a1c:	f040 810c 	bne.w	8003c38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a2a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003a2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003a32:	4622      	mov	r2, r4
 8003a34:	462b      	mov	r3, r5
 8003a36:	1891      	adds	r1, r2, r2
 8003a38:	65b9      	str	r1, [r7, #88]	; 0x58
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003a3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003a42:	4621      	mov	r1, r4
 8003a44:	eb12 0801 	adds.w	r8, r2, r1
 8003a48:	4629      	mov	r1, r5
 8003a4a:	eb43 0901 	adc.w	r9, r3, r1
 8003a4e:	f04f 0200 	mov.w	r2, #0
 8003a52:	f04f 0300 	mov.w	r3, #0
 8003a56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003a5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003a5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003a62:	4690      	mov	r8, r2
 8003a64:	4699      	mov	r9, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	eb18 0303 	adds.w	r3, r8, r3
 8003a6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003a70:	462b      	mov	r3, r5
 8003a72:	eb49 0303 	adc.w	r3, r9, r3
 8003a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003a7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a86:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003a8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a8e:	460b      	mov	r3, r1
 8003a90:	18db      	adds	r3, r3, r3
 8003a92:	653b      	str	r3, [r7, #80]	; 0x50
 8003a94:	4613      	mov	r3, r2
 8003a96:	eb42 0303 	adc.w	r3, r2, r3
 8003a9a:	657b      	str	r3, [r7, #84]	; 0x54
 8003a9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003aa0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003aa4:	f7fc fc1c 	bl	80002e0 <__aeabi_uldivmod>
 8003aa8:	4602      	mov	r2, r0
 8003aaa:	460b      	mov	r3, r1
 8003aac:	4b61      	ldr	r3, [pc, #388]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003aae:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab2:	095b      	lsrs	r3, r3, #5
 8003ab4:	011c      	lsls	r4, r3, #4
 8003ab6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003aba:	2200      	movs	r2, #0
 8003abc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ac0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ac4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ac8:	4642      	mov	r2, r8
 8003aca:	464b      	mov	r3, r9
 8003acc:	1891      	adds	r1, r2, r2
 8003ace:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ad0:	415b      	adcs	r3, r3
 8003ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ad4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ad8:	4641      	mov	r1, r8
 8003ada:	eb12 0a01 	adds.w	sl, r2, r1
 8003ade:	4649      	mov	r1, r9
 8003ae0:	eb43 0b01 	adc.w	fp, r3, r1
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003af0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003af4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003af8:	4692      	mov	sl, r2
 8003afa:	469b      	mov	fp, r3
 8003afc:	4643      	mov	r3, r8
 8003afe:	eb1a 0303 	adds.w	r3, sl, r3
 8003b02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b06:	464b      	mov	r3, r9
 8003b08:	eb4b 0303 	adc.w	r3, fp, r3
 8003b0c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b1c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003b20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b24:	460b      	mov	r3, r1
 8003b26:	18db      	adds	r3, r3, r3
 8003b28:	643b      	str	r3, [r7, #64]	; 0x40
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	eb42 0303 	adc.w	r3, r2, r3
 8003b30:	647b      	str	r3, [r7, #68]	; 0x44
 8003b32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003b36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003b3a:	f7fc fbd1 	bl	80002e0 <__aeabi_uldivmod>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	460b      	mov	r3, r1
 8003b42:	4611      	mov	r1, r2
 8003b44:	4b3b      	ldr	r3, [pc, #236]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003b46:	fba3 2301 	umull	r2, r3, r3, r1
 8003b4a:	095b      	lsrs	r3, r3, #5
 8003b4c:	2264      	movs	r2, #100	; 0x64
 8003b4e:	fb02 f303 	mul.w	r3, r2, r3
 8003b52:	1acb      	subs	r3, r1, r3
 8003b54:	00db      	lsls	r3, r3, #3
 8003b56:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003b5c:	fba3 2302 	umull	r2, r3, r3, r2
 8003b60:	095b      	lsrs	r3, r3, #5
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b68:	441c      	add	r4, r3
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003b74:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003b78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	464b      	mov	r3, r9
 8003b80:	1891      	adds	r1, r2, r2
 8003b82:	63b9      	str	r1, [r7, #56]	; 0x38
 8003b84:	415b      	adcs	r3, r3
 8003b86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003b8c:	4641      	mov	r1, r8
 8003b8e:	1851      	adds	r1, r2, r1
 8003b90:	6339      	str	r1, [r7, #48]	; 0x30
 8003b92:	4649      	mov	r1, r9
 8003b94:	414b      	adcs	r3, r1
 8003b96:	637b      	str	r3, [r7, #52]	; 0x34
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	00cb      	lsls	r3, r1, #3
 8003ba8:	4651      	mov	r1, sl
 8003baa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003bae:	4651      	mov	r1, sl
 8003bb0:	00ca      	lsls	r2, r1, #3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4642      	mov	r2, r8
 8003bba:	189b      	adds	r3, r3, r2
 8003bbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003bc0:	464b      	mov	r3, r9
 8003bc2:	460a      	mov	r2, r1
 8003bc4:	eb42 0303 	adc.w	r3, r2, r3
 8003bc8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bd0:	685b      	ldr	r3, [r3, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bd8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003bdc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003be0:	460b      	mov	r3, r1
 8003be2:	18db      	adds	r3, r3, r3
 8003be4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003be6:	4613      	mov	r3, r2
 8003be8:	eb42 0303 	adc.w	r3, r2, r3
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003bf2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003bf6:	f7fc fb73 	bl	80002e0 <__aeabi_uldivmod>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003c00:	fba3 1302 	umull	r1, r3, r3, r2
 8003c04:	095b      	lsrs	r3, r3, #5
 8003c06:	2164      	movs	r1, #100	; 0x64
 8003c08:	fb01 f303 	mul.w	r3, r1, r3
 8003c0c:	1ad3      	subs	r3, r2, r3
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	3332      	adds	r3, #50	; 0x32
 8003c12:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <UART_SetConfig+0x2d4>)
 8003c14:	fba2 2303 	umull	r2, r3, r2, r3
 8003c18:	095b      	lsrs	r3, r3, #5
 8003c1a:	f003 0207 	and.w	r2, r3, #7
 8003c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4422      	add	r2, r4
 8003c26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003c28:	e105      	b.n	8003e36 <UART_SetConfig+0x4d6>
 8003c2a:	bf00      	nop
 8003c2c:	40011000 	.word	0x40011000
 8003c30:	40011400 	.word	0x40011400
 8003c34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c42:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003c46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003c4a:	4642      	mov	r2, r8
 8003c4c:	464b      	mov	r3, r9
 8003c4e:	1891      	adds	r1, r2, r2
 8003c50:	6239      	str	r1, [r7, #32]
 8003c52:	415b      	adcs	r3, r3
 8003c54:	627b      	str	r3, [r7, #36]	; 0x24
 8003c56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003c5a:	4641      	mov	r1, r8
 8003c5c:	1854      	adds	r4, r2, r1
 8003c5e:	4649      	mov	r1, r9
 8003c60:	eb43 0501 	adc.w	r5, r3, r1
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	00eb      	lsls	r3, r5, #3
 8003c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c72:	00e2      	lsls	r2, r4, #3
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	18e3      	adds	r3, r4, r3
 8003c7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003c80:	464b      	mov	r3, r9
 8003c82:	eb45 0303 	adc.w	r3, r5, r3
 8003c86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003c96:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003c9a:	f04f 0200 	mov.w	r2, #0
 8003c9e:	f04f 0300 	mov.w	r3, #0
 8003ca2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003ca6:	4629      	mov	r1, r5
 8003ca8:	008b      	lsls	r3, r1, #2
 8003caa:	4621      	mov	r1, r4
 8003cac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003cb0:	4621      	mov	r1, r4
 8003cb2:	008a      	lsls	r2, r1, #2
 8003cb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003cb8:	f7fc fb12 	bl	80002e0 <__aeabi_uldivmod>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	460b      	mov	r3, r1
 8003cc0:	4b60      	ldr	r3, [pc, #384]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003cc2:	fba3 2302 	umull	r2, r3, r3, r2
 8003cc6:	095b      	lsrs	r3, r3, #5
 8003cc8:	011c      	lsls	r4, r3, #4
 8003cca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003cd4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003cd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003cdc:	4642      	mov	r2, r8
 8003cde:	464b      	mov	r3, r9
 8003ce0:	1891      	adds	r1, r2, r2
 8003ce2:	61b9      	str	r1, [r7, #24]
 8003ce4:	415b      	adcs	r3, r3
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cec:	4641      	mov	r1, r8
 8003cee:	1851      	adds	r1, r2, r1
 8003cf0:	6139      	str	r1, [r7, #16]
 8003cf2:	4649      	mov	r1, r9
 8003cf4:	414b      	adcs	r3, r1
 8003cf6:	617b      	str	r3, [r7, #20]
 8003cf8:	f04f 0200 	mov.w	r2, #0
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d04:	4659      	mov	r1, fp
 8003d06:	00cb      	lsls	r3, r1, #3
 8003d08:	4651      	mov	r1, sl
 8003d0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003d0e:	4651      	mov	r1, sl
 8003d10:	00ca      	lsls	r2, r1, #3
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	4603      	mov	r3, r0
 8003d18:	4642      	mov	r2, r8
 8003d1a:	189b      	adds	r3, r3, r2
 8003d1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003d20:	464b      	mov	r3, r9
 8003d22:	460a      	mov	r2, r1
 8003d24:	eb42 0303 	adc.w	r3, r2, r3
 8003d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	67bb      	str	r3, [r7, #120]	; 0x78
 8003d36:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003d38:	f04f 0200 	mov.w	r2, #0
 8003d3c:	f04f 0300 	mov.w	r3, #0
 8003d40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003d44:	4649      	mov	r1, r9
 8003d46:	008b      	lsls	r3, r1, #2
 8003d48:	4641      	mov	r1, r8
 8003d4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d4e:	4641      	mov	r1, r8
 8003d50:	008a      	lsls	r2, r1, #2
 8003d52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003d56:	f7fc fac3 	bl	80002e0 <__aeabi_uldivmod>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003d60:	fba3 1302 	umull	r1, r3, r3, r2
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	2164      	movs	r1, #100	; 0x64
 8003d68:	fb01 f303 	mul.w	r3, r1, r3
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	011b      	lsls	r3, r3, #4
 8003d70:	3332      	adds	r3, #50	; 0x32
 8003d72:	4a34      	ldr	r2, [pc, #208]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	095b      	lsrs	r3, r3, #5
 8003d7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d7e:	441c      	add	r4, r3
 8003d80:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d84:	2200      	movs	r2, #0
 8003d86:	673b      	str	r3, [r7, #112]	; 0x70
 8003d88:	677a      	str	r2, [r7, #116]	; 0x74
 8003d8a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003d8e:	4642      	mov	r2, r8
 8003d90:	464b      	mov	r3, r9
 8003d92:	1891      	adds	r1, r2, r2
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	415b      	adcs	r3, r3
 8003d98:	60fb      	str	r3, [r7, #12]
 8003d9a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d9e:	4641      	mov	r1, r8
 8003da0:	1851      	adds	r1, r2, r1
 8003da2:	6039      	str	r1, [r7, #0]
 8003da4:	4649      	mov	r1, r9
 8003da6:	414b      	adcs	r3, r1
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003db6:	4659      	mov	r1, fp
 8003db8:	00cb      	lsls	r3, r1, #3
 8003dba:	4651      	mov	r1, sl
 8003dbc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dc0:	4651      	mov	r1, sl
 8003dc2:	00ca      	lsls	r2, r1, #3
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4642      	mov	r2, r8
 8003dcc:	189b      	adds	r3, r3, r2
 8003dce:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dd0:	464b      	mov	r3, r9
 8003dd2:	460a      	mov	r2, r1
 8003dd4:	eb42 0303 	adc.w	r3, r2, r3
 8003dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	663b      	str	r3, [r7, #96]	; 0x60
 8003de4:	667a      	str	r2, [r7, #100]	; 0x64
 8003de6:	f04f 0200 	mov.w	r2, #0
 8003dea:	f04f 0300 	mov.w	r3, #0
 8003dee:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003df2:	4649      	mov	r1, r9
 8003df4:	008b      	lsls	r3, r1, #2
 8003df6:	4641      	mov	r1, r8
 8003df8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003dfc:	4641      	mov	r1, r8
 8003dfe:	008a      	lsls	r2, r1, #2
 8003e00:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003e04:	f7fc fa6c 	bl	80002e0 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003e0e:	fba3 1302 	umull	r1, r3, r3, r2
 8003e12:	095b      	lsrs	r3, r3, #5
 8003e14:	2164      	movs	r1, #100	; 0x64
 8003e16:	fb01 f303 	mul.w	r3, r1, r3
 8003e1a:	1ad3      	subs	r3, r2, r3
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	3332      	adds	r3, #50	; 0x32
 8003e20:	4a08      	ldr	r2, [pc, #32]	; (8003e44 <UART_SetConfig+0x4e4>)
 8003e22:	fba2 2303 	umull	r2, r3, r2, r3
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	f003 020f 	and.w	r2, r3, #15
 8003e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4422      	add	r2, r4
 8003e34:	609a      	str	r2, [r3, #8]
}
 8003e36:	bf00      	nop
 8003e38:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e42:	bf00      	nop
 8003e44:	51eb851f 	.word	0x51eb851f

08003e48 <__errno>:
 8003e48:	4b01      	ldr	r3, [pc, #4]	; (8003e50 <__errno+0x8>)
 8003e4a:	6818      	ldr	r0, [r3, #0]
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	2000040c 	.word	0x2000040c

08003e54 <__libc_init_array>:
 8003e54:	b570      	push	{r4, r5, r6, lr}
 8003e56:	4d0d      	ldr	r5, [pc, #52]	; (8003e8c <__libc_init_array+0x38>)
 8003e58:	4c0d      	ldr	r4, [pc, #52]	; (8003e90 <__libc_init_array+0x3c>)
 8003e5a:	1b64      	subs	r4, r4, r5
 8003e5c:	10a4      	asrs	r4, r4, #2
 8003e5e:	2600      	movs	r6, #0
 8003e60:	42a6      	cmp	r6, r4
 8003e62:	d109      	bne.n	8003e78 <__libc_init_array+0x24>
 8003e64:	4d0b      	ldr	r5, [pc, #44]	; (8003e94 <__libc_init_array+0x40>)
 8003e66:	4c0c      	ldr	r4, [pc, #48]	; (8003e98 <__libc_init_array+0x44>)
 8003e68:	f001 fe90 	bl	8005b8c <_init>
 8003e6c:	1b64      	subs	r4, r4, r5
 8003e6e:	10a4      	asrs	r4, r4, #2
 8003e70:	2600      	movs	r6, #0
 8003e72:	42a6      	cmp	r6, r4
 8003e74:	d105      	bne.n	8003e82 <__libc_init_array+0x2e>
 8003e76:	bd70      	pop	{r4, r5, r6, pc}
 8003e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7c:	4798      	blx	r3
 8003e7e:	3601      	adds	r6, #1
 8003e80:	e7ee      	b.n	8003e60 <__libc_init_array+0xc>
 8003e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e86:	4798      	blx	r3
 8003e88:	3601      	adds	r6, #1
 8003e8a:	e7f2      	b.n	8003e72 <__libc_init_array+0x1e>
 8003e8c:	08005e30 	.word	0x08005e30
 8003e90:	08005e30 	.word	0x08005e30
 8003e94:	08005e30 	.word	0x08005e30
 8003e98:	08005e34 	.word	0x08005e34

08003e9c <memset>:
 8003e9c:	4402      	add	r2, r0
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d100      	bne.n	8003ea6 <memset+0xa>
 8003ea4:	4770      	bx	lr
 8003ea6:	f803 1b01 	strb.w	r1, [r3], #1
 8003eaa:	e7f9      	b.n	8003ea0 <memset+0x4>

08003eac <iprintf>:
 8003eac:	b40f      	push	{r0, r1, r2, r3}
 8003eae:	4b0a      	ldr	r3, [pc, #40]	; (8003ed8 <iprintf+0x2c>)
 8003eb0:	b513      	push	{r0, r1, r4, lr}
 8003eb2:	681c      	ldr	r4, [r3, #0]
 8003eb4:	b124      	cbz	r4, 8003ec0 <iprintf+0x14>
 8003eb6:	69a3      	ldr	r3, [r4, #24]
 8003eb8:	b913      	cbnz	r3, 8003ec0 <iprintf+0x14>
 8003eba:	4620      	mov	r0, r4
 8003ebc:	f000 f964 	bl	8004188 <__sinit>
 8003ec0:	ab05      	add	r3, sp, #20
 8003ec2:	9a04      	ldr	r2, [sp, #16]
 8003ec4:	68a1      	ldr	r1, [r4, #8]
 8003ec6:	9301      	str	r3, [sp, #4]
 8003ec8:	4620      	mov	r0, r4
 8003eca:	f000 fdfb 	bl	8004ac4 <_vfiprintf_r>
 8003ece:	b002      	add	sp, #8
 8003ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ed4:	b004      	add	sp, #16
 8003ed6:	4770      	bx	lr
 8003ed8:	2000040c 	.word	0x2000040c

08003edc <sniprintf>:
 8003edc:	b40c      	push	{r2, r3}
 8003ede:	b530      	push	{r4, r5, lr}
 8003ee0:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <sniprintf+0x64>)
 8003ee2:	1e0c      	subs	r4, r1, #0
 8003ee4:	681d      	ldr	r5, [r3, #0]
 8003ee6:	b09d      	sub	sp, #116	; 0x74
 8003ee8:	da08      	bge.n	8003efc <sniprintf+0x20>
 8003eea:	238b      	movs	r3, #139	; 0x8b
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ef2:	b01d      	add	sp, #116	; 0x74
 8003ef4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003ef8:	b002      	add	sp, #8
 8003efa:	4770      	bx	lr
 8003efc:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003f00:	f8ad 3014 	strh.w	r3, [sp, #20]
 8003f04:	bf14      	ite	ne
 8003f06:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8003f0a:	4623      	moveq	r3, r4
 8003f0c:	9304      	str	r3, [sp, #16]
 8003f0e:	9307      	str	r3, [sp, #28]
 8003f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f14:	9002      	str	r0, [sp, #8]
 8003f16:	9006      	str	r0, [sp, #24]
 8003f18:	f8ad 3016 	strh.w	r3, [sp, #22]
 8003f1c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003f1e:	ab21      	add	r3, sp, #132	; 0x84
 8003f20:	a902      	add	r1, sp, #8
 8003f22:	4628      	mov	r0, r5
 8003f24:	9301      	str	r3, [sp, #4]
 8003f26:	f000 fad1 	bl	80044cc <_svfiprintf_r>
 8003f2a:	1c43      	adds	r3, r0, #1
 8003f2c:	bfbc      	itt	lt
 8003f2e:	238b      	movlt	r3, #139	; 0x8b
 8003f30:	602b      	strlt	r3, [r5, #0]
 8003f32:	2c00      	cmp	r4, #0
 8003f34:	d0dd      	beq.n	8003ef2 <sniprintf+0x16>
 8003f36:	9b02      	ldr	r3, [sp, #8]
 8003f38:	2200      	movs	r2, #0
 8003f3a:	701a      	strb	r2, [r3, #0]
 8003f3c:	e7d9      	b.n	8003ef2 <sniprintf+0x16>
 8003f3e:	bf00      	nop
 8003f40:	2000040c 	.word	0x2000040c

08003f44 <siscanf>:
 8003f44:	b40e      	push	{r1, r2, r3}
 8003f46:	b510      	push	{r4, lr}
 8003f48:	b09f      	sub	sp, #124	; 0x7c
 8003f4a:	ac21      	add	r4, sp, #132	; 0x84
 8003f4c:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003f50:	f854 2b04 	ldr.w	r2, [r4], #4
 8003f54:	9201      	str	r2, [sp, #4]
 8003f56:	f8ad 101c 	strh.w	r1, [sp, #28]
 8003f5a:	9004      	str	r0, [sp, #16]
 8003f5c:	9008      	str	r0, [sp, #32]
 8003f5e:	f7fc f961 	bl	8000224 <strlen>
 8003f62:	4b0c      	ldr	r3, [pc, #48]	; (8003f94 <siscanf+0x50>)
 8003f64:	9005      	str	r0, [sp, #20]
 8003f66:	9009      	str	r0, [sp, #36]	; 0x24
 8003f68:	930d      	str	r3, [sp, #52]	; 0x34
 8003f6a:	480b      	ldr	r0, [pc, #44]	; (8003f98 <siscanf+0x54>)
 8003f6c:	9a01      	ldr	r2, [sp, #4]
 8003f6e:	6800      	ldr	r0, [r0, #0]
 8003f70:	9403      	str	r4, [sp, #12]
 8003f72:	2300      	movs	r3, #0
 8003f74:	9311      	str	r3, [sp, #68]	; 0x44
 8003f76:	9316      	str	r3, [sp, #88]	; 0x58
 8003f78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8003f80:	a904      	add	r1, sp, #16
 8003f82:	4623      	mov	r3, r4
 8003f84:	f000 fbfc 	bl	8004780 <__ssvfiscanf_r>
 8003f88:	b01f      	add	sp, #124	; 0x7c
 8003f8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f8e:	b003      	add	sp, #12
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	08003fbf 	.word	0x08003fbf
 8003f98:	2000040c 	.word	0x2000040c

08003f9c <__sread>:
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	460c      	mov	r4, r1
 8003fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fa4:	f001 f9a4 	bl	80052f0 <_read_r>
 8003fa8:	2800      	cmp	r0, #0
 8003faa:	bfab      	itete	ge
 8003fac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003fae:	89a3      	ldrhlt	r3, [r4, #12]
 8003fb0:	181b      	addge	r3, r3, r0
 8003fb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003fb6:	bfac      	ite	ge
 8003fb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8003fba:	81a3      	strhlt	r3, [r4, #12]
 8003fbc:	bd10      	pop	{r4, pc}

08003fbe <__seofread>:
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	4770      	bx	lr

08003fc2 <__swrite>:
 8003fc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fc6:	461f      	mov	r7, r3
 8003fc8:	898b      	ldrh	r3, [r1, #12]
 8003fca:	05db      	lsls	r3, r3, #23
 8003fcc:	4605      	mov	r5, r0
 8003fce:	460c      	mov	r4, r1
 8003fd0:	4616      	mov	r6, r2
 8003fd2:	d505      	bpl.n	8003fe0 <__swrite+0x1e>
 8003fd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003fd8:	2302      	movs	r3, #2
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f000 f974 	bl	80042c8 <_lseek_r>
 8003fe0:	89a3      	ldrh	r3, [r4, #12]
 8003fe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003fea:	81a3      	strh	r3, [r4, #12]
 8003fec:	4632      	mov	r2, r6
 8003fee:	463b      	mov	r3, r7
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ff6:	f000 b84d 	b.w	8004094 <_write_r>

08003ffa <__sseek>:
 8003ffa:	b510      	push	{r4, lr}
 8003ffc:	460c      	mov	r4, r1
 8003ffe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004002:	f000 f961 	bl	80042c8 <_lseek_r>
 8004006:	1c43      	adds	r3, r0, #1
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	bf15      	itete	ne
 800400c:	6560      	strne	r0, [r4, #84]	; 0x54
 800400e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004016:	81a3      	strheq	r3, [r4, #12]
 8004018:	bf18      	it	ne
 800401a:	81a3      	strhne	r3, [r4, #12]
 800401c:	bd10      	pop	{r4, pc}

0800401e <__sclose>:
 800401e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004022:	f000 b849 	b.w	80040b8 <_close_r>

08004026 <strchr>:
 8004026:	b2c9      	uxtb	r1, r1
 8004028:	4603      	mov	r3, r0
 800402a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800402e:	b11a      	cbz	r2, 8004038 <strchr+0x12>
 8004030:	428a      	cmp	r2, r1
 8004032:	d1f9      	bne.n	8004028 <strchr+0x2>
 8004034:	4618      	mov	r0, r3
 8004036:	4770      	bx	lr
 8004038:	2900      	cmp	r1, #0
 800403a:	bf18      	it	ne
 800403c:	2300      	movne	r3, #0
 800403e:	e7f9      	b.n	8004034 <strchr+0xe>

08004040 <strncpy>:
 8004040:	b510      	push	{r4, lr}
 8004042:	3901      	subs	r1, #1
 8004044:	4603      	mov	r3, r0
 8004046:	b132      	cbz	r2, 8004056 <strncpy+0x16>
 8004048:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800404c:	f803 4b01 	strb.w	r4, [r3], #1
 8004050:	3a01      	subs	r2, #1
 8004052:	2c00      	cmp	r4, #0
 8004054:	d1f7      	bne.n	8004046 <strncpy+0x6>
 8004056:	441a      	add	r2, r3
 8004058:	2100      	movs	r1, #0
 800405a:	4293      	cmp	r3, r2
 800405c:	d100      	bne.n	8004060 <strncpy+0x20>
 800405e:	bd10      	pop	{r4, pc}
 8004060:	f803 1b01 	strb.w	r1, [r3], #1
 8004064:	e7f9      	b.n	800405a <strncpy+0x1a>

08004066 <strstr>:
 8004066:	780a      	ldrb	r2, [r1, #0]
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	b96a      	cbnz	r2, 8004088 <strstr+0x22>
 800406c:	bd70      	pop	{r4, r5, r6, pc}
 800406e:	429a      	cmp	r2, r3
 8004070:	d109      	bne.n	8004086 <strstr+0x20>
 8004072:	460c      	mov	r4, r1
 8004074:	4605      	mov	r5, r0
 8004076:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0f6      	beq.n	800406c <strstr+0x6>
 800407e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8004082:	429e      	cmp	r6, r3
 8004084:	d0f7      	beq.n	8004076 <strstr+0x10>
 8004086:	3001      	adds	r0, #1
 8004088:	7803      	ldrb	r3, [r0, #0]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1ef      	bne.n	800406e <strstr+0x8>
 800408e:	4618      	mov	r0, r3
 8004090:	e7ec      	b.n	800406c <strstr+0x6>
	...

08004094 <_write_r>:
 8004094:	b538      	push	{r3, r4, r5, lr}
 8004096:	4d07      	ldr	r5, [pc, #28]	; (80040b4 <_write_r+0x20>)
 8004098:	4604      	mov	r4, r0
 800409a:	4608      	mov	r0, r1
 800409c:	4611      	mov	r1, r2
 800409e:	2200      	movs	r2, #0
 80040a0:	602a      	str	r2, [r5, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f7fd f835 	bl	8001112 <_write>
 80040a8:	1c43      	adds	r3, r0, #1
 80040aa:	d102      	bne.n	80040b2 <_write_r+0x1e>
 80040ac:	682b      	ldr	r3, [r5, #0]
 80040ae:	b103      	cbz	r3, 80040b2 <_write_r+0x1e>
 80040b0:	6023      	str	r3, [r4, #0]
 80040b2:	bd38      	pop	{r3, r4, r5, pc}
 80040b4:	20000684 	.word	0x20000684

080040b8 <_close_r>:
 80040b8:	b538      	push	{r3, r4, r5, lr}
 80040ba:	4d06      	ldr	r5, [pc, #24]	; (80040d4 <_close_r+0x1c>)
 80040bc:	2300      	movs	r3, #0
 80040be:	4604      	mov	r4, r0
 80040c0:	4608      	mov	r0, r1
 80040c2:	602b      	str	r3, [r5, #0]
 80040c4:	f7fd f841 	bl	800114a <_close>
 80040c8:	1c43      	adds	r3, r0, #1
 80040ca:	d102      	bne.n	80040d2 <_close_r+0x1a>
 80040cc:	682b      	ldr	r3, [r5, #0]
 80040ce:	b103      	cbz	r3, 80040d2 <_close_r+0x1a>
 80040d0:	6023      	str	r3, [r4, #0]
 80040d2:	bd38      	pop	{r3, r4, r5, pc}
 80040d4:	20000684 	.word	0x20000684

080040d8 <std>:
 80040d8:	2300      	movs	r3, #0
 80040da:	b510      	push	{r4, lr}
 80040dc:	4604      	mov	r4, r0
 80040de:	e9c0 3300 	strd	r3, r3, [r0]
 80040e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040e6:	6083      	str	r3, [r0, #8]
 80040e8:	8181      	strh	r1, [r0, #12]
 80040ea:	6643      	str	r3, [r0, #100]	; 0x64
 80040ec:	81c2      	strh	r2, [r0, #14]
 80040ee:	6183      	str	r3, [r0, #24]
 80040f0:	4619      	mov	r1, r3
 80040f2:	2208      	movs	r2, #8
 80040f4:	305c      	adds	r0, #92	; 0x5c
 80040f6:	f7ff fed1 	bl	8003e9c <memset>
 80040fa:	4b05      	ldr	r3, [pc, #20]	; (8004110 <std+0x38>)
 80040fc:	6263      	str	r3, [r4, #36]	; 0x24
 80040fe:	4b05      	ldr	r3, [pc, #20]	; (8004114 <std+0x3c>)
 8004100:	62a3      	str	r3, [r4, #40]	; 0x28
 8004102:	4b05      	ldr	r3, [pc, #20]	; (8004118 <std+0x40>)
 8004104:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <std+0x44>)
 8004108:	6224      	str	r4, [r4, #32]
 800410a:	6323      	str	r3, [r4, #48]	; 0x30
 800410c:	bd10      	pop	{r4, pc}
 800410e:	bf00      	nop
 8004110:	08003f9d 	.word	0x08003f9d
 8004114:	08003fc3 	.word	0x08003fc3
 8004118:	08003ffb 	.word	0x08003ffb
 800411c:	0800401f 	.word	0x0800401f

08004120 <_cleanup_r>:
 8004120:	4901      	ldr	r1, [pc, #4]	; (8004128 <_cleanup_r+0x8>)
 8004122:	f000 b8af 	b.w	8004284 <_fwalk_reent>
 8004126:	bf00      	nop
 8004128:	08005895 	.word	0x08005895

0800412c <__sfmoreglue>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	2268      	movs	r2, #104	; 0x68
 8004130:	1e4d      	subs	r5, r1, #1
 8004132:	4355      	muls	r5, r2
 8004134:	460e      	mov	r6, r1
 8004136:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800413a:	f000 f8f7 	bl	800432c <_malloc_r>
 800413e:	4604      	mov	r4, r0
 8004140:	b140      	cbz	r0, 8004154 <__sfmoreglue+0x28>
 8004142:	2100      	movs	r1, #0
 8004144:	e9c0 1600 	strd	r1, r6, [r0]
 8004148:	300c      	adds	r0, #12
 800414a:	60a0      	str	r0, [r4, #8]
 800414c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004150:	f7ff fea4 	bl	8003e9c <memset>
 8004154:	4620      	mov	r0, r4
 8004156:	bd70      	pop	{r4, r5, r6, pc}

08004158 <__sfp_lock_acquire>:
 8004158:	4801      	ldr	r0, [pc, #4]	; (8004160 <__sfp_lock_acquire+0x8>)
 800415a:	f000 b8b3 	b.w	80042c4 <__retarget_lock_acquire_recursive>
 800415e:	bf00      	nop
 8004160:	20000679 	.word	0x20000679

08004164 <__sfp_lock_release>:
 8004164:	4801      	ldr	r0, [pc, #4]	; (800416c <__sfp_lock_release+0x8>)
 8004166:	f000 b8ae 	b.w	80042c6 <__retarget_lock_release_recursive>
 800416a:	bf00      	nop
 800416c:	20000679 	.word	0x20000679

08004170 <__sinit_lock_acquire>:
 8004170:	4801      	ldr	r0, [pc, #4]	; (8004178 <__sinit_lock_acquire+0x8>)
 8004172:	f000 b8a7 	b.w	80042c4 <__retarget_lock_acquire_recursive>
 8004176:	bf00      	nop
 8004178:	2000067a 	.word	0x2000067a

0800417c <__sinit_lock_release>:
 800417c:	4801      	ldr	r0, [pc, #4]	; (8004184 <__sinit_lock_release+0x8>)
 800417e:	f000 b8a2 	b.w	80042c6 <__retarget_lock_release_recursive>
 8004182:	bf00      	nop
 8004184:	2000067a 	.word	0x2000067a

08004188 <__sinit>:
 8004188:	b510      	push	{r4, lr}
 800418a:	4604      	mov	r4, r0
 800418c:	f7ff fff0 	bl	8004170 <__sinit_lock_acquire>
 8004190:	69a3      	ldr	r3, [r4, #24]
 8004192:	b11b      	cbz	r3, 800419c <__sinit+0x14>
 8004194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004198:	f7ff bff0 	b.w	800417c <__sinit_lock_release>
 800419c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80041a0:	6523      	str	r3, [r4, #80]	; 0x50
 80041a2:	4b13      	ldr	r3, [pc, #76]	; (80041f0 <__sinit+0x68>)
 80041a4:	4a13      	ldr	r2, [pc, #76]	; (80041f4 <__sinit+0x6c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80041aa:	42a3      	cmp	r3, r4
 80041ac:	bf04      	itt	eq
 80041ae:	2301      	moveq	r3, #1
 80041b0:	61a3      	streq	r3, [r4, #24]
 80041b2:	4620      	mov	r0, r4
 80041b4:	f000 f820 	bl	80041f8 <__sfp>
 80041b8:	6060      	str	r0, [r4, #4]
 80041ba:	4620      	mov	r0, r4
 80041bc:	f000 f81c 	bl	80041f8 <__sfp>
 80041c0:	60a0      	str	r0, [r4, #8]
 80041c2:	4620      	mov	r0, r4
 80041c4:	f000 f818 	bl	80041f8 <__sfp>
 80041c8:	2200      	movs	r2, #0
 80041ca:	60e0      	str	r0, [r4, #12]
 80041cc:	2104      	movs	r1, #4
 80041ce:	6860      	ldr	r0, [r4, #4]
 80041d0:	f7ff ff82 	bl	80040d8 <std>
 80041d4:	68a0      	ldr	r0, [r4, #8]
 80041d6:	2201      	movs	r2, #1
 80041d8:	2109      	movs	r1, #9
 80041da:	f7ff ff7d 	bl	80040d8 <std>
 80041de:	68e0      	ldr	r0, [r4, #12]
 80041e0:	2202      	movs	r2, #2
 80041e2:	2112      	movs	r1, #18
 80041e4:	f7ff ff78 	bl	80040d8 <std>
 80041e8:	2301      	movs	r3, #1
 80041ea:	61a3      	str	r3, [r4, #24]
 80041ec:	e7d2      	b.n	8004194 <__sinit+0xc>
 80041ee:	bf00      	nop
 80041f0:	08005c74 	.word	0x08005c74
 80041f4:	08004121 	.word	0x08004121

080041f8 <__sfp>:
 80041f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041fa:	4607      	mov	r7, r0
 80041fc:	f7ff ffac 	bl	8004158 <__sfp_lock_acquire>
 8004200:	4b1e      	ldr	r3, [pc, #120]	; (800427c <__sfp+0x84>)
 8004202:	681e      	ldr	r6, [r3, #0]
 8004204:	69b3      	ldr	r3, [r6, #24]
 8004206:	b913      	cbnz	r3, 800420e <__sfp+0x16>
 8004208:	4630      	mov	r0, r6
 800420a:	f7ff ffbd 	bl	8004188 <__sinit>
 800420e:	3648      	adds	r6, #72	; 0x48
 8004210:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004214:	3b01      	subs	r3, #1
 8004216:	d503      	bpl.n	8004220 <__sfp+0x28>
 8004218:	6833      	ldr	r3, [r6, #0]
 800421a:	b30b      	cbz	r3, 8004260 <__sfp+0x68>
 800421c:	6836      	ldr	r6, [r6, #0]
 800421e:	e7f7      	b.n	8004210 <__sfp+0x18>
 8004220:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004224:	b9d5      	cbnz	r5, 800425c <__sfp+0x64>
 8004226:	4b16      	ldr	r3, [pc, #88]	; (8004280 <__sfp+0x88>)
 8004228:	60e3      	str	r3, [r4, #12]
 800422a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800422e:	6665      	str	r5, [r4, #100]	; 0x64
 8004230:	f000 f847 	bl	80042c2 <__retarget_lock_init_recursive>
 8004234:	f7ff ff96 	bl	8004164 <__sfp_lock_release>
 8004238:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800423c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004240:	6025      	str	r5, [r4, #0]
 8004242:	61a5      	str	r5, [r4, #24]
 8004244:	2208      	movs	r2, #8
 8004246:	4629      	mov	r1, r5
 8004248:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800424c:	f7ff fe26 	bl	8003e9c <memset>
 8004250:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004254:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004258:	4620      	mov	r0, r4
 800425a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800425c:	3468      	adds	r4, #104	; 0x68
 800425e:	e7d9      	b.n	8004214 <__sfp+0x1c>
 8004260:	2104      	movs	r1, #4
 8004262:	4638      	mov	r0, r7
 8004264:	f7ff ff62 	bl	800412c <__sfmoreglue>
 8004268:	4604      	mov	r4, r0
 800426a:	6030      	str	r0, [r6, #0]
 800426c:	2800      	cmp	r0, #0
 800426e:	d1d5      	bne.n	800421c <__sfp+0x24>
 8004270:	f7ff ff78 	bl	8004164 <__sfp_lock_release>
 8004274:	230c      	movs	r3, #12
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	e7ee      	b.n	8004258 <__sfp+0x60>
 800427a:	bf00      	nop
 800427c:	08005c74 	.word	0x08005c74
 8004280:	ffff0001 	.word	0xffff0001

08004284 <_fwalk_reent>:
 8004284:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004288:	4606      	mov	r6, r0
 800428a:	4688      	mov	r8, r1
 800428c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004290:	2700      	movs	r7, #0
 8004292:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004296:	f1b9 0901 	subs.w	r9, r9, #1
 800429a:	d505      	bpl.n	80042a8 <_fwalk_reent+0x24>
 800429c:	6824      	ldr	r4, [r4, #0]
 800429e:	2c00      	cmp	r4, #0
 80042a0:	d1f7      	bne.n	8004292 <_fwalk_reent+0xe>
 80042a2:	4638      	mov	r0, r7
 80042a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80042a8:	89ab      	ldrh	r3, [r5, #12]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d907      	bls.n	80042be <_fwalk_reent+0x3a>
 80042ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042b2:	3301      	adds	r3, #1
 80042b4:	d003      	beq.n	80042be <_fwalk_reent+0x3a>
 80042b6:	4629      	mov	r1, r5
 80042b8:	4630      	mov	r0, r6
 80042ba:	47c0      	blx	r8
 80042bc:	4307      	orrs	r7, r0
 80042be:	3568      	adds	r5, #104	; 0x68
 80042c0:	e7e9      	b.n	8004296 <_fwalk_reent+0x12>

080042c2 <__retarget_lock_init_recursive>:
 80042c2:	4770      	bx	lr

080042c4 <__retarget_lock_acquire_recursive>:
 80042c4:	4770      	bx	lr

080042c6 <__retarget_lock_release_recursive>:
 80042c6:	4770      	bx	lr

080042c8 <_lseek_r>:
 80042c8:	b538      	push	{r3, r4, r5, lr}
 80042ca:	4d07      	ldr	r5, [pc, #28]	; (80042e8 <_lseek_r+0x20>)
 80042cc:	4604      	mov	r4, r0
 80042ce:	4608      	mov	r0, r1
 80042d0:	4611      	mov	r1, r2
 80042d2:	2200      	movs	r2, #0
 80042d4:	602a      	str	r2, [r5, #0]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f7fc ff5e 	bl	8001198 <_lseek>
 80042dc:	1c43      	adds	r3, r0, #1
 80042de:	d102      	bne.n	80042e6 <_lseek_r+0x1e>
 80042e0:	682b      	ldr	r3, [r5, #0]
 80042e2:	b103      	cbz	r3, 80042e6 <_lseek_r+0x1e>
 80042e4:	6023      	str	r3, [r4, #0]
 80042e6:	bd38      	pop	{r3, r4, r5, pc}
 80042e8:	20000684 	.word	0x20000684

080042ec <sbrk_aligned>:
 80042ec:	b570      	push	{r4, r5, r6, lr}
 80042ee:	4e0e      	ldr	r6, [pc, #56]	; (8004328 <sbrk_aligned+0x3c>)
 80042f0:	460c      	mov	r4, r1
 80042f2:	6831      	ldr	r1, [r6, #0]
 80042f4:	4605      	mov	r5, r0
 80042f6:	b911      	cbnz	r1, 80042fe <sbrk_aligned+0x12>
 80042f8:	f001 f80c 	bl	8005314 <_sbrk_r>
 80042fc:	6030      	str	r0, [r6, #0]
 80042fe:	4621      	mov	r1, r4
 8004300:	4628      	mov	r0, r5
 8004302:	f001 f807 	bl	8005314 <_sbrk_r>
 8004306:	1c43      	adds	r3, r0, #1
 8004308:	d00a      	beq.n	8004320 <sbrk_aligned+0x34>
 800430a:	1cc4      	adds	r4, r0, #3
 800430c:	f024 0403 	bic.w	r4, r4, #3
 8004310:	42a0      	cmp	r0, r4
 8004312:	d007      	beq.n	8004324 <sbrk_aligned+0x38>
 8004314:	1a21      	subs	r1, r4, r0
 8004316:	4628      	mov	r0, r5
 8004318:	f000 fffc 	bl	8005314 <_sbrk_r>
 800431c:	3001      	adds	r0, #1
 800431e:	d101      	bne.n	8004324 <sbrk_aligned+0x38>
 8004320:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004324:	4620      	mov	r0, r4
 8004326:	bd70      	pop	{r4, r5, r6, pc}
 8004328:	20000680 	.word	0x20000680

0800432c <_malloc_r>:
 800432c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004330:	1ccd      	adds	r5, r1, #3
 8004332:	f025 0503 	bic.w	r5, r5, #3
 8004336:	3508      	adds	r5, #8
 8004338:	2d0c      	cmp	r5, #12
 800433a:	bf38      	it	cc
 800433c:	250c      	movcc	r5, #12
 800433e:	2d00      	cmp	r5, #0
 8004340:	4607      	mov	r7, r0
 8004342:	db01      	blt.n	8004348 <_malloc_r+0x1c>
 8004344:	42a9      	cmp	r1, r5
 8004346:	d905      	bls.n	8004354 <_malloc_r+0x28>
 8004348:	230c      	movs	r3, #12
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	2600      	movs	r6, #0
 800434e:	4630      	mov	r0, r6
 8004350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004354:	4e2e      	ldr	r6, [pc, #184]	; (8004410 <_malloc_r+0xe4>)
 8004356:	f001 fb67 	bl	8005a28 <__malloc_lock>
 800435a:	6833      	ldr	r3, [r6, #0]
 800435c:	461c      	mov	r4, r3
 800435e:	bb34      	cbnz	r4, 80043ae <_malloc_r+0x82>
 8004360:	4629      	mov	r1, r5
 8004362:	4638      	mov	r0, r7
 8004364:	f7ff ffc2 	bl	80042ec <sbrk_aligned>
 8004368:	1c43      	adds	r3, r0, #1
 800436a:	4604      	mov	r4, r0
 800436c:	d14d      	bne.n	800440a <_malloc_r+0xde>
 800436e:	6834      	ldr	r4, [r6, #0]
 8004370:	4626      	mov	r6, r4
 8004372:	2e00      	cmp	r6, #0
 8004374:	d140      	bne.n	80043f8 <_malloc_r+0xcc>
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	4631      	mov	r1, r6
 800437a:	4638      	mov	r0, r7
 800437c:	eb04 0803 	add.w	r8, r4, r3
 8004380:	f000 ffc8 	bl	8005314 <_sbrk_r>
 8004384:	4580      	cmp	r8, r0
 8004386:	d13a      	bne.n	80043fe <_malloc_r+0xd2>
 8004388:	6821      	ldr	r1, [r4, #0]
 800438a:	3503      	adds	r5, #3
 800438c:	1a6d      	subs	r5, r5, r1
 800438e:	f025 0503 	bic.w	r5, r5, #3
 8004392:	3508      	adds	r5, #8
 8004394:	2d0c      	cmp	r5, #12
 8004396:	bf38      	it	cc
 8004398:	250c      	movcc	r5, #12
 800439a:	4629      	mov	r1, r5
 800439c:	4638      	mov	r0, r7
 800439e:	f7ff ffa5 	bl	80042ec <sbrk_aligned>
 80043a2:	3001      	adds	r0, #1
 80043a4:	d02b      	beq.n	80043fe <_malloc_r+0xd2>
 80043a6:	6823      	ldr	r3, [r4, #0]
 80043a8:	442b      	add	r3, r5
 80043aa:	6023      	str	r3, [r4, #0]
 80043ac:	e00e      	b.n	80043cc <_malloc_r+0xa0>
 80043ae:	6822      	ldr	r2, [r4, #0]
 80043b0:	1b52      	subs	r2, r2, r5
 80043b2:	d41e      	bmi.n	80043f2 <_malloc_r+0xc6>
 80043b4:	2a0b      	cmp	r2, #11
 80043b6:	d916      	bls.n	80043e6 <_malloc_r+0xba>
 80043b8:	1961      	adds	r1, r4, r5
 80043ba:	42a3      	cmp	r3, r4
 80043bc:	6025      	str	r5, [r4, #0]
 80043be:	bf18      	it	ne
 80043c0:	6059      	strne	r1, [r3, #4]
 80043c2:	6863      	ldr	r3, [r4, #4]
 80043c4:	bf08      	it	eq
 80043c6:	6031      	streq	r1, [r6, #0]
 80043c8:	5162      	str	r2, [r4, r5]
 80043ca:	604b      	str	r3, [r1, #4]
 80043cc:	4638      	mov	r0, r7
 80043ce:	f104 060b 	add.w	r6, r4, #11
 80043d2:	f001 fb2f 	bl	8005a34 <__malloc_unlock>
 80043d6:	f026 0607 	bic.w	r6, r6, #7
 80043da:	1d23      	adds	r3, r4, #4
 80043dc:	1af2      	subs	r2, r6, r3
 80043de:	d0b6      	beq.n	800434e <_malloc_r+0x22>
 80043e0:	1b9b      	subs	r3, r3, r6
 80043e2:	50a3      	str	r3, [r4, r2]
 80043e4:	e7b3      	b.n	800434e <_malloc_r+0x22>
 80043e6:	6862      	ldr	r2, [r4, #4]
 80043e8:	42a3      	cmp	r3, r4
 80043ea:	bf0c      	ite	eq
 80043ec:	6032      	streq	r2, [r6, #0]
 80043ee:	605a      	strne	r2, [r3, #4]
 80043f0:	e7ec      	b.n	80043cc <_malloc_r+0xa0>
 80043f2:	4623      	mov	r3, r4
 80043f4:	6864      	ldr	r4, [r4, #4]
 80043f6:	e7b2      	b.n	800435e <_malloc_r+0x32>
 80043f8:	4634      	mov	r4, r6
 80043fa:	6876      	ldr	r6, [r6, #4]
 80043fc:	e7b9      	b.n	8004372 <_malloc_r+0x46>
 80043fe:	230c      	movs	r3, #12
 8004400:	603b      	str	r3, [r7, #0]
 8004402:	4638      	mov	r0, r7
 8004404:	f001 fb16 	bl	8005a34 <__malloc_unlock>
 8004408:	e7a1      	b.n	800434e <_malloc_r+0x22>
 800440a:	6025      	str	r5, [r4, #0]
 800440c:	e7de      	b.n	80043cc <_malloc_r+0xa0>
 800440e:	bf00      	nop
 8004410:	2000067c 	.word	0x2000067c

08004414 <__ssputs_r>:
 8004414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004418:	688e      	ldr	r6, [r1, #8]
 800441a:	429e      	cmp	r6, r3
 800441c:	4682      	mov	sl, r0
 800441e:	460c      	mov	r4, r1
 8004420:	4690      	mov	r8, r2
 8004422:	461f      	mov	r7, r3
 8004424:	d838      	bhi.n	8004498 <__ssputs_r+0x84>
 8004426:	898a      	ldrh	r2, [r1, #12]
 8004428:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800442c:	d032      	beq.n	8004494 <__ssputs_r+0x80>
 800442e:	6825      	ldr	r5, [r4, #0]
 8004430:	6909      	ldr	r1, [r1, #16]
 8004432:	eba5 0901 	sub.w	r9, r5, r1
 8004436:	6965      	ldr	r5, [r4, #20]
 8004438:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800443c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004440:	3301      	adds	r3, #1
 8004442:	444b      	add	r3, r9
 8004444:	106d      	asrs	r5, r5, #1
 8004446:	429d      	cmp	r5, r3
 8004448:	bf38      	it	cc
 800444a:	461d      	movcc	r5, r3
 800444c:	0553      	lsls	r3, r2, #21
 800444e:	d531      	bpl.n	80044b4 <__ssputs_r+0xa0>
 8004450:	4629      	mov	r1, r5
 8004452:	f7ff ff6b 	bl	800432c <_malloc_r>
 8004456:	4606      	mov	r6, r0
 8004458:	b950      	cbnz	r0, 8004470 <__ssputs_r+0x5c>
 800445a:	230c      	movs	r3, #12
 800445c:	f8ca 3000 	str.w	r3, [sl]
 8004460:	89a3      	ldrh	r3, [r4, #12]
 8004462:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004466:	81a3      	strh	r3, [r4, #12]
 8004468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800446c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004470:	6921      	ldr	r1, [r4, #16]
 8004472:	464a      	mov	r2, r9
 8004474:	f001 fab0 	bl	80059d8 <memcpy>
 8004478:	89a3      	ldrh	r3, [r4, #12]
 800447a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800447e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004482:	81a3      	strh	r3, [r4, #12]
 8004484:	6126      	str	r6, [r4, #16]
 8004486:	6165      	str	r5, [r4, #20]
 8004488:	444e      	add	r6, r9
 800448a:	eba5 0509 	sub.w	r5, r5, r9
 800448e:	6026      	str	r6, [r4, #0]
 8004490:	60a5      	str	r5, [r4, #8]
 8004492:	463e      	mov	r6, r7
 8004494:	42be      	cmp	r6, r7
 8004496:	d900      	bls.n	800449a <__ssputs_r+0x86>
 8004498:	463e      	mov	r6, r7
 800449a:	6820      	ldr	r0, [r4, #0]
 800449c:	4632      	mov	r2, r6
 800449e:	4641      	mov	r1, r8
 80044a0:	f001 faa8 	bl	80059f4 <memmove>
 80044a4:	68a3      	ldr	r3, [r4, #8]
 80044a6:	1b9b      	subs	r3, r3, r6
 80044a8:	60a3      	str	r3, [r4, #8]
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	4433      	add	r3, r6
 80044ae:	6023      	str	r3, [r4, #0]
 80044b0:	2000      	movs	r0, #0
 80044b2:	e7db      	b.n	800446c <__ssputs_r+0x58>
 80044b4:	462a      	mov	r2, r5
 80044b6:	f001 fb0f 	bl	8005ad8 <_realloc_r>
 80044ba:	4606      	mov	r6, r0
 80044bc:	2800      	cmp	r0, #0
 80044be:	d1e1      	bne.n	8004484 <__ssputs_r+0x70>
 80044c0:	6921      	ldr	r1, [r4, #16]
 80044c2:	4650      	mov	r0, sl
 80044c4:	f001 fabc 	bl	8005a40 <_free_r>
 80044c8:	e7c7      	b.n	800445a <__ssputs_r+0x46>
	...

080044cc <_svfiprintf_r>:
 80044cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044d0:	4698      	mov	r8, r3
 80044d2:	898b      	ldrh	r3, [r1, #12]
 80044d4:	061b      	lsls	r3, r3, #24
 80044d6:	b09d      	sub	sp, #116	; 0x74
 80044d8:	4607      	mov	r7, r0
 80044da:	460d      	mov	r5, r1
 80044dc:	4614      	mov	r4, r2
 80044de:	d50e      	bpl.n	80044fe <_svfiprintf_r+0x32>
 80044e0:	690b      	ldr	r3, [r1, #16]
 80044e2:	b963      	cbnz	r3, 80044fe <_svfiprintf_r+0x32>
 80044e4:	2140      	movs	r1, #64	; 0x40
 80044e6:	f7ff ff21 	bl	800432c <_malloc_r>
 80044ea:	6028      	str	r0, [r5, #0]
 80044ec:	6128      	str	r0, [r5, #16]
 80044ee:	b920      	cbnz	r0, 80044fa <_svfiprintf_r+0x2e>
 80044f0:	230c      	movs	r3, #12
 80044f2:	603b      	str	r3, [r7, #0]
 80044f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80044f8:	e0d1      	b.n	800469e <_svfiprintf_r+0x1d2>
 80044fa:	2340      	movs	r3, #64	; 0x40
 80044fc:	616b      	str	r3, [r5, #20]
 80044fe:	2300      	movs	r3, #0
 8004500:	9309      	str	r3, [sp, #36]	; 0x24
 8004502:	2320      	movs	r3, #32
 8004504:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004508:	f8cd 800c 	str.w	r8, [sp, #12]
 800450c:	2330      	movs	r3, #48	; 0x30
 800450e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80046b8 <_svfiprintf_r+0x1ec>
 8004512:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004516:	f04f 0901 	mov.w	r9, #1
 800451a:	4623      	mov	r3, r4
 800451c:	469a      	mov	sl, r3
 800451e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004522:	b10a      	cbz	r2, 8004528 <_svfiprintf_r+0x5c>
 8004524:	2a25      	cmp	r2, #37	; 0x25
 8004526:	d1f9      	bne.n	800451c <_svfiprintf_r+0x50>
 8004528:	ebba 0b04 	subs.w	fp, sl, r4
 800452c:	d00b      	beq.n	8004546 <_svfiprintf_r+0x7a>
 800452e:	465b      	mov	r3, fp
 8004530:	4622      	mov	r2, r4
 8004532:	4629      	mov	r1, r5
 8004534:	4638      	mov	r0, r7
 8004536:	f7ff ff6d 	bl	8004414 <__ssputs_r>
 800453a:	3001      	adds	r0, #1
 800453c:	f000 80aa 	beq.w	8004694 <_svfiprintf_r+0x1c8>
 8004540:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004542:	445a      	add	r2, fp
 8004544:	9209      	str	r2, [sp, #36]	; 0x24
 8004546:	f89a 3000 	ldrb.w	r3, [sl]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f000 80a2 	beq.w	8004694 <_svfiprintf_r+0x1c8>
 8004550:	2300      	movs	r3, #0
 8004552:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004556:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800455a:	f10a 0a01 	add.w	sl, sl, #1
 800455e:	9304      	str	r3, [sp, #16]
 8004560:	9307      	str	r3, [sp, #28]
 8004562:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004566:	931a      	str	r3, [sp, #104]	; 0x68
 8004568:	4654      	mov	r4, sl
 800456a:	2205      	movs	r2, #5
 800456c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004570:	4851      	ldr	r0, [pc, #324]	; (80046b8 <_svfiprintf_r+0x1ec>)
 8004572:	f7fb fe65 	bl	8000240 <memchr>
 8004576:	9a04      	ldr	r2, [sp, #16]
 8004578:	b9d8      	cbnz	r0, 80045b2 <_svfiprintf_r+0xe6>
 800457a:	06d0      	lsls	r0, r2, #27
 800457c:	bf44      	itt	mi
 800457e:	2320      	movmi	r3, #32
 8004580:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004584:	0711      	lsls	r1, r2, #28
 8004586:	bf44      	itt	mi
 8004588:	232b      	movmi	r3, #43	; 0x2b
 800458a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800458e:	f89a 3000 	ldrb.w	r3, [sl]
 8004592:	2b2a      	cmp	r3, #42	; 0x2a
 8004594:	d015      	beq.n	80045c2 <_svfiprintf_r+0xf6>
 8004596:	9a07      	ldr	r2, [sp, #28]
 8004598:	4654      	mov	r4, sl
 800459a:	2000      	movs	r0, #0
 800459c:	f04f 0c0a 	mov.w	ip, #10
 80045a0:	4621      	mov	r1, r4
 80045a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80045a6:	3b30      	subs	r3, #48	; 0x30
 80045a8:	2b09      	cmp	r3, #9
 80045aa:	d94e      	bls.n	800464a <_svfiprintf_r+0x17e>
 80045ac:	b1b0      	cbz	r0, 80045dc <_svfiprintf_r+0x110>
 80045ae:	9207      	str	r2, [sp, #28]
 80045b0:	e014      	b.n	80045dc <_svfiprintf_r+0x110>
 80045b2:	eba0 0308 	sub.w	r3, r0, r8
 80045b6:	fa09 f303 	lsl.w	r3, r9, r3
 80045ba:	4313      	orrs	r3, r2
 80045bc:	9304      	str	r3, [sp, #16]
 80045be:	46a2      	mov	sl, r4
 80045c0:	e7d2      	b.n	8004568 <_svfiprintf_r+0x9c>
 80045c2:	9b03      	ldr	r3, [sp, #12]
 80045c4:	1d19      	adds	r1, r3, #4
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	9103      	str	r1, [sp, #12]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	bfbb      	ittet	lt
 80045ce:	425b      	neglt	r3, r3
 80045d0:	f042 0202 	orrlt.w	r2, r2, #2
 80045d4:	9307      	strge	r3, [sp, #28]
 80045d6:	9307      	strlt	r3, [sp, #28]
 80045d8:	bfb8      	it	lt
 80045da:	9204      	strlt	r2, [sp, #16]
 80045dc:	7823      	ldrb	r3, [r4, #0]
 80045de:	2b2e      	cmp	r3, #46	; 0x2e
 80045e0:	d10c      	bne.n	80045fc <_svfiprintf_r+0x130>
 80045e2:	7863      	ldrb	r3, [r4, #1]
 80045e4:	2b2a      	cmp	r3, #42	; 0x2a
 80045e6:	d135      	bne.n	8004654 <_svfiprintf_r+0x188>
 80045e8:	9b03      	ldr	r3, [sp, #12]
 80045ea:	1d1a      	adds	r2, r3, #4
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	9203      	str	r2, [sp, #12]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bfb8      	it	lt
 80045f4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80045f8:	3402      	adds	r4, #2
 80045fa:	9305      	str	r3, [sp, #20]
 80045fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80046c8 <_svfiprintf_r+0x1fc>
 8004600:	7821      	ldrb	r1, [r4, #0]
 8004602:	2203      	movs	r2, #3
 8004604:	4650      	mov	r0, sl
 8004606:	f7fb fe1b 	bl	8000240 <memchr>
 800460a:	b140      	cbz	r0, 800461e <_svfiprintf_r+0x152>
 800460c:	2340      	movs	r3, #64	; 0x40
 800460e:	eba0 000a 	sub.w	r0, r0, sl
 8004612:	fa03 f000 	lsl.w	r0, r3, r0
 8004616:	9b04      	ldr	r3, [sp, #16]
 8004618:	4303      	orrs	r3, r0
 800461a:	3401      	adds	r4, #1
 800461c:	9304      	str	r3, [sp, #16]
 800461e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004622:	4826      	ldr	r0, [pc, #152]	; (80046bc <_svfiprintf_r+0x1f0>)
 8004624:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004628:	2206      	movs	r2, #6
 800462a:	f7fb fe09 	bl	8000240 <memchr>
 800462e:	2800      	cmp	r0, #0
 8004630:	d038      	beq.n	80046a4 <_svfiprintf_r+0x1d8>
 8004632:	4b23      	ldr	r3, [pc, #140]	; (80046c0 <_svfiprintf_r+0x1f4>)
 8004634:	bb1b      	cbnz	r3, 800467e <_svfiprintf_r+0x1b2>
 8004636:	9b03      	ldr	r3, [sp, #12]
 8004638:	3307      	adds	r3, #7
 800463a:	f023 0307 	bic.w	r3, r3, #7
 800463e:	3308      	adds	r3, #8
 8004640:	9303      	str	r3, [sp, #12]
 8004642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004644:	4433      	add	r3, r6
 8004646:	9309      	str	r3, [sp, #36]	; 0x24
 8004648:	e767      	b.n	800451a <_svfiprintf_r+0x4e>
 800464a:	fb0c 3202 	mla	r2, ip, r2, r3
 800464e:	460c      	mov	r4, r1
 8004650:	2001      	movs	r0, #1
 8004652:	e7a5      	b.n	80045a0 <_svfiprintf_r+0xd4>
 8004654:	2300      	movs	r3, #0
 8004656:	3401      	adds	r4, #1
 8004658:	9305      	str	r3, [sp, #20]
 800465a:	4619      	mov	r1, r3
 800465c:	f04f 0c0a 	mov.w	ip, #10
 8004660:	4620      	mov	r0, r4
 8004662:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004666:	3a30      	subs	r2, #48	; 0x30
 8004668:	2a09      	cmp	r2, #9
 800466a:	d903      	bls.n	8004674 <_svfiprintf_r+0x1a8>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d0c5      	beq.n	80045fc <_svfiprintf_r+0x130>
 8004670:	9105      	str	r1, [sp, #20]
 8004672:	e7c3      	b.n	80045fc <_svfiprintf_r+0x130>
 8004674:	fb0c 2101 	mla	r1, ip, r1, r2
 8004678:	4604      	mov	r4, r0
 800467a:	2301      	movs	r3, #1
 800467c:	e7f0      	b.n	8004660 <_svfiprintf_r+0x194>
 800467e:	ab03      	add	r3, sp, #12
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	462a      	mov	r2, r5
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <_svfiprintf_r+0x1f8>)
 8004686:	a904      	add	r1, sp, #16
 8004688:	4638      	mov	r0, r7
 800468a:	f3af 8000 	nop.w
 800468e:	1c42      	adds	r2, r0, #1
 8004690:	4606      	mov	r6, r0
 8004692:	d1d6      	bne.n	8004642 <_svfiprintf_r+0x176>
 8004694:	89ab      	ldrh	r3, [r5, #12]
 8004696:	065b      	lsls	r3, r3, #25
 8004698:	f53f af2c 	bmi.w	80044f4 <_svfiprintf_r+0x28>
 800469c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800469e:	b01d      	add	sp, #116	; 0x74
 80046a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046a4:	ab03      	add	r3, sp, #12
 80046a6:	9300      	str	r3, [sp, #0]
 80046a8:	462a      	mov	r2, r5
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <_svfiprintf_r+0x1f8>)
 80046ac:	a904      	add	r1, sp, #16
 80046ae:	4638      	mov	r0, r7
 80046b0:	f000 fba6 	bl	8004e00 <_printf_i>
 80046b4:	e7eb      	b.n	800468e <_svfiprintf_r+0x1c2>
 80046b6:	bf00      	nop
 80046b8:	08005cd8 	.word	0x08005cd8
 80046bc:	08005ce2 	.word	0x08005ce2
 80046c0:	00000000 	.word	0x00000000
 80046c4:	08004415 	.word	0x08004415
 80046c8:	08005cde 	.word	0x08005cde

080046cc <_sungetc_r>:
 80046cc:	b538      	push	{r3, r4, r5, lr}
 80046ce:	1c4b      	adds	r3, r1, #1
 80046d0:	4614      	mov	r4, r2
 80046d2:	d103      	bne.n	80046dc <_sungetc_r+0x10>
 80046d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80046d8:	4628      	mov	r0, r5
 80046da:	bd38      	pop	{r3, r4, r5, pc}
 80046dc:	8993      	ldrh	r3, [r2, #12]
 80046de:	f023 0320 	bic.w	r3, r3, #32
 80046e2:	8193      	strh	r3, [r2, #12]
 80046e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80046e6:	6852      	ldr	r2, [r2, #4]
 80046e8:	b2cd      	uxtb	r5, r1
 80046ea:	b18b      	cbz	r3, 8004710 <_sungetc_r+0x44>
 80046ec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80046ee:	4293      	cmp	r3, r2
 80046f0:	dd08      	ble.n	8004704 <_sungetc_r+0x38>
 80046f2:	6823      	ldr	r3, [r4, #0]
 80046f4:	1e5a      	subs	r2, r3, #1
 80046f6:	6022      	str	r2, [r4, #0]
 80046f8:	f803 5c01 	strb.w	r5, [r3, #-1]
 80046fc:	6863      	ldr	r3, [r4, #4]
 80046fe:	3301      	adds	r3, #1
 8004700:	6063      	str	r3, [r4, #4]
 8004702:	e7e9      	b.n	80046d8 <_sungetc_r+0xc>
 8004704:	4621      	mov	r1, r4
 8004706:	f000 ff45 	bl	8005594 <__submore>
 800470a:	2800      	cmp	r0, #0
 800470c:	d0f1      	beq.n	80046f2 <_sungetc_r+0x26>
 800470e:	e7e1      	b.n	80046d4 <_sungetc_r+0x8>
 8004710:	6921      	ldr	r1, [r4, #16]
 8004712:	6823      	ldr	r3, [r4, #0]
 8004714:	b151      	cbz	r1, 800472c <_sungetc_r+0x60>
 8004716:	4299      	cmp	r1, r3
 8004718:	d208      	bcs.n	800472c <_sungetc_r+0x60>
 800471a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800471e:	42a9      	cmp	r1, r5
 8004720:	d104      	bne.n	800472c <_sungetc_r+0x60>
 8004722:	3b01      	subs	r3, #1
 8004724:	3201      	adds	r2, #1
 8004726:	6023      	str	r3, [r4, #0]
 8004728:	6062      	str	r2, [r4, #4]
 800472a:	e7d5      	b.n	80046d8 <_sungetc_r+0xc>
 800472c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8004730:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004734:	6363      	str	r3, [r4, #52]	; 0x34
 8004736:	2303      	movs	r3, #3
 8004738:	63a3      	str	r3, [r4, #56]	; 0x38
 800473a:	4623      	mov	r3, r4
 800473c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004740:	6023      	str	r3, [r4, #0]
 8004742:	2301      	movs	r3, #1
 8004744:	e7dc      	b.n	8004700 <_sungetc_r+0x34>

08004746 <__ssrefill_r>:
 8004746:	b510      	push	{r4, lr}
 8004748:	460c      	mov	r4, r1
 800474a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800474c:	b169      	cbz	r1, 800476a <__ssrefill_r+0x24>
 800474e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004752:	4299      	cmp	r1, r3
 8004754:	d001      	beq.n	800475a <__ssrefill_r+0x14>
 8004756:	f001 f973 	bl	8005a40 <_free_r>
 800475a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800475c:	6063      	str	r3, [r4, #4]
 800475e:	2000      	movs	r0, #0
 8004760:	6360      	str	r0, [r4, #52]	; 0x34
 8004762:	b113      	cbz	r3, 800476a <__ssrefill_r+0x24>
 8004764:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004766:	6023      	str	r3, [r4, #0]
 8004768:	bd10      	pop	{r4, pc}
 800476a:	6923      	ldr	r3, [r4, #16]
 800476c:	6023      	str	r3, [r4, #0]
 800476e:	2300      	movs	r3, #0
 8004770:	6063      	str	r3, [r4, #4]
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	f043 0320 	orr.w	r3, r3, #32
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800477e:	e7f3      	b.n	8004768 <__ssrefill_r+0x22>

08004780 <__ssvfiscanf_r>:
 8004780:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004784:	460c      	mov	r4, r1
 8004786:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800478a:	2100      	movs	r1, #0
 800478c:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8004790:	49a6      	ldr	r1, [pc, #664]	; (8004a2c <__ssvfiscanf_r+0x2ac>)
 8004792:	91a0      	str	r1, [sp, #640]	; 0x280
 8004794:	f10d 0804 	add.w	r8, sp, #4
 8004798:	49a5      	ldr	r1, [pc, #660]	; (8004a30 <__ssvfiscanf_r+0x2b0>)
 800479a:	4fa6      	ldr	r7, [pc, #664]	; (8004a34 <__ssvfiscanf_r+0x2b4>)
 800479c:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004a38 <__ssvfiscanf_r+0x2b8>
 80047a0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80047a4:	4606      	mov	r6, r0
 80047a6:	91a1      	str	r1, [sp, #644]	; 0x284
 80047a8:	9300      	str	r3, [sp, #0]
 80047aa:	7813      	ldrb	r3, [r2, #0]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 815a 	beq.w	8004a66 <__ssvfiscanf_r+0x2e6>
 80047b2:	5dd9      	ldrb	r1, [r3, r7]
 80047b4:	f011 0108 	ands.w	r1, r1, #8
 80047b8:	f102 0501 	add.w	r5, r2, #1
 80047bc:	d019      	beq.n	80047f2 <__ssvfiscanf_r+0x72>
 80047be:	6863      	ldr	r3, [r4, #4]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	dd0f      	ble.n	80047e4 <__ssvfiscanf_r+0x64>
 80047c4:	6823      	ldr	r3, [r4, #0]
 80047c6:	781a      	ldrb	r2, [r3, #0]
 80047c8:	5cba      	ldrb	r2, [r7, r2]
 80047ca:	0712      	lsls	r2, r2, #28
 80047cc:	d401      	bmi.n	80047d2 <__ssvfiscanf_r+0x52>
 80047ce:	462a      	mov	r2, r5
 80047d0:	e7eb      	b.n	80047aa <__ssvfiscanf_r+0x2a>
 80047d2:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80047d4:	3201      	adds	r2, #1
 80047d6:	9245      	str	r2, [sp, #276]	; 0x114
 80047d8:	6862      	ldr	r2, [r4, #4]
 80047da:	3301      	adds	r3, #1
 80047dc:	3a01      	subs	r2, #1
 80047de:	6062      	str	r2, [r4, #4]
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	e7ec      	b.n	80047be <__ssvfiscanf_r+0x3e>
 80047e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80047e6:	4621      	mov	r1, r4
 80047e8:	4630      	mov	r0, r6
 80047ea:	4798      	blx	r3
 80047ec:	2800      	cmp	r0, #0
 80047ee:	d0e9      	beq.n	80047c4 <__ssvfiscanf_r+0x44>
 80047f0:	e7ed      	b.n	80047ce <__ssvfiscanf_r+0x4e>
 80047f2:	2b25      	cmp	r3, #37	; 0x25
 80047f4:	d012      	beq.n	800481c <__ssvfiscanf_r+0x9c>
 80047f6:	469a      	mov	sl, r3
 80047f8:	6863      	ldr	r3, [r4, #4]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f340 8091 	ble.w	8004922 <__ssvfiscanf_r+0x1a2>
 8004800:	6822      	ldr	r2, [r4, #0]
 8004802:	7813      	ldrb	r3, [r2, #0]
 8004804:	4553      	cmp	r3, sl
 8004806:	f040 812e 	bne.w	8004a66 <__ssvfiscanf_r+0x2e6>
 800480a:	6863      	ldr	r3, [r4, #4]
 800480c:	3b01      	subs	r3, #1
 800480e:	6063      	str	r3, [r4, #4]
 8004810:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8004812:	3201      	adds	r2, #1
 8004814:	3301      	adds	r3, #1
 8004816:	6022      	str	r2, [r4, #0]
 8004818:	9345      	str	r3, [sp, #276]	; 0x114
 800481a:	e7d8      	b.n	80047ce <__ssvfiscanf_r+0x4e>
 800481c:	9141      	str	r1, [sp, #260]	; 0x104
 800481e:	9143      	str	r1, [sp, #268]	; 0x10c
 8004820:	7853      	ldrb	r3, [r2, #1]
 8004822:	2b2a      	cmp	r3, #42	; 0x2a
 8004824:	bf02      	ittt	eq
 8004826:	2310      	moveq	r3, #16
 8004828:	1c95      	addeq	r5, r2, #2
 800482a:	9341      	streq	r3, [sp, #260]	; 0x104
 800482c:	220a      	movs	r2, #10
 800482e:	46aa      	mov	sl, r5
 8004830:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004834:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004838:	2b09      	cmp	r3, #9
 800483a:	d91d      	bls.n	8004878 <__ssvfiscanf_r+0xf8>
 800483c:	487e      	ldr	r0, [pc, #504]	; (8004a38 <__ssvfiscanf_r+0x2b8>)
 800483e:	2203      	movs	r2, #3
 8004840:	f7fb fcfe 	bl	8000240 <memchr>
 8004844:	b140      	cbz	r0, 8004858 <__ssvfiscanf_r+0xd8>
 8004846:	2301      	movs	r3, #1
 8004848:	eba0 0009 	sub.w	r0, r0, r9
 800484c:	fa03 f000 	lsl.w	r0, r3, r0
 8004850:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004852:	4318      	orrs	r0, r3
 8004854:	9041      	str	r0, [sp, #260]	; 0x104
 8004856:	4655      	mov	r5, sl
 8004858:	f815 3b01 	ldrb.w	r3, [r5], #1
 800485c:	2b78      	cmp	r3, #120	; 0x78
 800485e:	d806      	bhi.n	800486e <__ssvfiscanf_r+0xee>
 8004860:	2b57      	cmp	r3, #87	; 0x57
 8004862:	d810      	bhi.n	8004886 <__ssvfiscanf_r+0x106>
 8004864:	2b25      	cmp	r3, #37	; 0x25
 8004866:	d0c6      	beq.n	80047f6 <__ssvfiscanf_r+0x76>
 8004868:	d856      	bhi.n	8004918 <__ssvfiscanf_r+0x198>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d064      	beq.n	8004938 <__ssvfiscanf_r+0x1b8>
 800486e:	2303      	movs	r3, #3
 8004870:	9347      	str	r3, [sp, #284]	; 0x11c
 8004872:	230a      	movs	r3, #10
 8004874:	9342      	str	r3, [sp, #264]	; 0x108
 8004876:	e071      	b.n	800495c <__ssvfiscanf_r+0x1dc>
 8004878:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800487a:	fb02 1103 	mla	r1, r2, r3, r1
 800487e:	3930      	subs	r1, #48	; 0x30
 8004880:	9143      	str	r1, [sp, #268]	; 0x10c
 8004882:	4655      	mov	r5, sl
 8004884:	e7d3      	b.n	800482e <__ssvfiscanf_r+0xae>
 8004886:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800488a:	2a20      	cmp	r2, #32
 800488c:	d8ef      	bhi.n	800486e <__ssvfiscanf_r+0xee>
 800488e:	a101      	add	r1, pc, #4	; (adr r1, 8004894 <__ssvfiscanf_r+0x114>)
 8004890:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004894:	08004947 	.word	0x08004947
 8004898:	0800486f 	.word	0x0800486f
 800489c:	0800486f 	.word	0x0800486f
 80048a0:	080049a5 	.word	0x080049a5
 80048a4:	0800486f 	.word	0x0800486f
 80048a8:	0800486f 	.word	0x0800486f
 80048ac:	0800486f 	.word	0x0800486f
 80048b0:	0800486f 	.word	0x0800486f
 80048b4:	0800486f 	.word	0x0800486f
 80048b8:	0800486f 	.word	0x0800486f
 80048bc:	0800486f 	.word	0x0800486f
 80048c0:	080049bb 	.word	0x080049bb
 80048c4:	08004991 	.word	0x08004991
 80048c8:	0800491f 	.word	0x0800491f
 80048cc:	0800491f 	.word	0x0800491f
 80048d0:	0800491f 	.word	0x0800491f
 80048d4:	0800486f 	.word	0x0800486f
 80048d8:	08004995 	.word	0x08004995
 80048dc:	0800486f 	.word	0x0800486f
 80048e0:	0800486f 	.word	0x0800486f
 80048e4:	0800486f 	.word	0x0800486f
 80048e8:	0800486f 	.word	0x0800486f
 80048ec:	080049cb 	.word	0x080049cb
 80048f0:	0800499d 	.word	0x0800499d
 80048f4:	0800493f 	.word	0x0800493f
 80048f8:	0800486f 	.word	0x0800486f
 80048fc:	0800486f 	.word	0x0800486f
 8004900:	080049c7 	.word	0x080049c7
 8004904:	0800486f 	.word	0x0800486f
 8004908:	08004991 	.word	0x08004991
 800490c:	0800486f 	.word	0x0800486f
 8004910:	0800486f 	.word	0x0800486f
 8004914:	08004947 	.word	0x08004947
 8004918:	3b45      	subs	r3, #69	; 0x45
 800491a:	2b02      	cmp	r3, #2
 800491c:	d8a7      	bhi.n	800486e <__ssvfiscanf_r+0xee>
 800491e:	2305      	movs	r3, #5
 8004920:	e01b      	b.n	800495a <__ssvfiscanf_r+0x1da>
 8004922:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004924:	4621      	mov	r1, r4
 8004926:	4630      	mov	r0, r6
 8004928:	4798      	blx	r3
 800492a:	2800      	cmp	r0, #0
 800492c:	f43f af68 	beq.w	8004800 <__ssvfiscanf_r+0x80>
 8004930:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004932:	2800      	cmp	r0, #0
 8004934:	f040 808d 	bne.w	8004a52 <__ssvfiscanf_r+0x2d2>
 8004938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800493c:	e08f      	b.n	8004a5e <__ssvfiscanf_r+0x2de>
 800493e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004940:	f042 0220 	orr.w	r2, r2, #32
 8004944:	9241      	str	r2, [sp, #260]	; 0x104
 8004946:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800494c:	9241      	str	r2, [sp, #260]	; 0x104
 800494e:	2210      	movs	r2, #16
 8004950:	2b6f      	cmp	r3, #111	; 0x6f
 8004952:	9242      	str	r2, [sp, #264]	; 0x108
 8004954:	bf34      	ite	cc
 8004956:	2303      	movcc	r3, #3
 8004958:	2304      	movcs	r3, #4
 800495a:	9347      	str	r3, [sp, #284]	; 0x11c
 800495c:	6863      	ldr	r3, [r4, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	dd42      	ble.n	80049e8 <__ssvfiscanf_r+0x268>
 8004962:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004964:	0659      	lsls	r1, r3, #25
 8004966:	d404      	bmi.n	8004972 <__ssvfiscanf_r+0x1f2>
 8004968:	6823      	ldr	r3, [r4, #0]
 800496a:	781a      	ldrb	r2, [r3, #0]
 800496c:	5cba      	ldrb	r2, [r7, r2]
 800496e:	0712      	lsls	r2, r2, #28
 8004970:	d441      	bmi.n	80049f6 <__ssvfiscanf_r+0x276>
 8004972:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8004974:	2b02      	cmp	r3, #2
 8004976:	dc50      	bgt.n	8004a1a <__ssvfiscanf_r+0x29a>
 8004978:	466b      	mov	r3, sp
 800497a:	4622      	mov	r2, r4
 800497c:	a941      	add	r1, sp, #260	; 0x104
 800497e:	4630      	mov	r0, r6
 8004980:	f000 fb64 	bl	800504c <_scanf_chars>
 8004984:	2801      	cmp	r0, #1
 8004986:	d06e      	beq.n	8004a66 <__ssvfiscanf_r+0x2e6>
 8004988:	2802      	cmp	r0, #2
 800498a:	f47f af20 	bne.w	80047ce <__ssvfiscanf_r+0x4e>
 800498e:	e7cf      	b.n	8004930 <__ssvfiscanf_r+0x1b0>
 8004990:	220a      	movs	r2, #10
 8004992:	e7dd      	b.n	8004950 <__ssvfiscanf_r+0x1d0>
 8004994:	2300      	movs	r3, #0
 8004996:	9342      	str	r3, [sp, #264]	; 0x108
 8004998:	2303      	movs	r3, #3
 800499a:	e7de      	b.n	800495a <__ssvfiscanf_r+0x1da>
 800499c:	2308      	movs	r3, #8
 800499e:	9342      	str	r3, [sp, #264]	; 0x108
 80049a0:	2304      	movs	r3, #4
 80049a2:	e7da      	b.n	800495a <__ssvfiscanf_r+0x1da>
 80049a4:	4629      	mov	r1, r5
 80049a6:	4640      	mov	r0, r8
 80049a8:	f000 fcc4 	bl	8005334 <__sccl>
 80049ac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80049ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049b2:	9341      	str	r3, [sp, #260]	; 0x104
 80049b4:	4605      	mov	r5, r0
 80049b6:	2301      	movs	r3, #1
 80049b8:	e7cf      	b.n	800495a <__ssvfiscanf_r+0x1da>
 80049ba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80049bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049c0:	9341      	str	r3, [sp, #260]	; 0x104
 80049c2:	2300      	movs	r3, #0
 80049c4:	e7c9      	b.n	800495a <__ssvfiscanf_r+0x1da>
 80049c6:	2302      	movs	r3, #2
 80049c8:	e7c7      	b.n	800495a <__ssvfiscanf_r+0x1da>
 80049ca:	9841      	ldr	r0, [sp, #260]	; 0x104
 80049cc:	06c3      	lsls	r3, r0, #27
 80049ce:	f53f aefe 	bmi.w	80047ce <__ssvfiscanf_r+0x4e>
 80049d2:	9b00      	ldr	r3, [sp, #0]
 80049d4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80049d6:	1d19      	adds	r1, r3, #4
 80049d8:	9100      	str	r1, [sp, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f010 0f01 	tst.w	r0, #1
 80049e0:	bf14      	ite	ne
 80049e2:	801a      	strhne	r2, [r3, #0]
 80049e4:	601a      	streq	r2, [r3, #0]
 80049e6:	e6f2      	b.n	80047ce <__ssvfiscanf_r+0x4e>
 80049e8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80049ea:	4621      	mov	r1, r4
 80049ec:	4630      	mov	r0, r6
 80049ee:	4798      	blx	r3
 80049f0:	2800      	cmp	r0, #0
 80049f2:	d0b6      	beq.n	8004962 <__ssvfiscanf_r+0x1e2>
 80049f4:	e79c      	b.n	8004930 <__ssvfiscanf_r+0x1b0>
 80049f6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80049f8:	3201      	adds	r2, #1
 80049fa:	9245      	str	r2, [sp, #276]	; 0x114
 80049fc:	6862      	ldr	r2, [r4, #4]
 80049fe:	3a01      	subs	r2, #1
 8004a00:	2a00      	cmp	r2, #0
 8004a02:	6062      	str	r2, [r4, #4]
 8004a04:	dd02      	ble.n	8004a0c <__ssvfiscanf_r+0x28c>
 8004a06:	3301      	adds	r3, #1
 8004a08:	6023      	str	r3, [r4, #0]
 8004a0a:	e7ad      	b.n	8004968 <__ssvfiscanf_r+0x1e8>
 8004a0c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004a0e:	4621      	mov	r1, r4
 8004a10:	4630      	mov	r0, r6
 8004a12:	4798      	blx	r3
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d0a7      	beq.n	8004968 <__ssvfiscanf_r+0x1e8>
 8004a18:	e78a      	b.n	8004930 <__ssvfiscanf_r+0x1b0>
 8004a1a:	2b04      	cmp	r3, #4
 8004a1c:	dc0e      	bgt.n	8004a3c <__ssvfiscanf_r+0x2bc>
 8004a1e:	466b      	mov	r3, sp
 8004a20:	4622      	mov	r2, r4
 8004a22:	a941      	add	r1, sp, #260	; 0x104
 8004a24:	4630      	mov	r0, r6
 8004a26:	f000 fb6b 	bl	8005100 <_scanf_i>
 8004a2a:	e7ab      	b.n	8004984 <__ssvfiscanf_r+0x204>
 8004a2c:	080046cd 	.word	0x080046cd
 8004a30:	08004747 	.word	0x08004747
 8004a34:	08005d27 	.word	0x08005d27
 8004a38:	08005cde 	.word	0x08005cde
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <__ssvfiscanf_r+0x2ec>)
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	f43f aec5 	beq.w	80047ce <__ssvfiscanf_r+0x4e>
 8004a44:	466b      	mov	r3, sp
 8004a46:	4622      	mov	r2, r4
 8004a48:	a941      	add	r1, sp, #260	; 0x104
 8004a4a:	4630      	mov	r0, r6
 8004a4c:	f3af 8000 	nop.w
 8004a50:	e798      	b.n	8004984 <__ssvfiscanf_r+0x204>
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004a58:	bf18      	it	ne
 8004a5a:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8004a5e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8004a62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a66:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004a68:	e7f9      	b.n	8004a5e <__ssvfiscanf_r+0x2de>
 8004a6a:	bf00      	nop
 8004a6c:	00000000 	.word	0x00000000

08004a70 <__sfputc_r>:
 8004a70:	6893      	ldr	r3, [r2, #8]
 8004a72:	3b01      	subs	r3, #1
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	b410      	push	{r4}
 8004a78:	6093      	str	r3, [r2, #8]
 8004a7a:	da08      	bge.n	8004a8e <__sfputc_r+0x1e>
 8004a7c:	6994      	ldr	r4, [r2, #24]
 8004a7e:	42a3      	cmp	r3, r4
 8004a80:	db01      	blt.n	8004a86 <__sfputc_r+0x16>
 8004a82:	290a      	cmp	r1, #10
 8004a84:	d103      	bne.n	8004a8e <__sfputc_r+0x1e>
 8004a86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a8a:	f000 bdbd 	b.w	8005608 <__swbuf_r>
 8004a8e:	6813      	ldr	r3, [r2, #0]
 8004a90:	1c58      	adds	r0, r3, #1
 8004a92:	6010      	str	r0, [r2, #0]
 8004a94:	7019      	strb	r1, [r3, #0]
 8004a96:	4608      	mov	r0, r1
 8004a98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <__sfputs_r>:
 8004a9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aa0:	4606      	mov	r6, r0
 8004aa2:	460f      	mov	r7, r1
 8004aa4:	4614      	mov	r4, r2
 8004aa6:	18d5      	adds	r5, r2, r3
 8004aa8:	42ac      	cmp	r4, r5
 8004aaa:	d101      	bne.n	8004ab0 <__sfputs_r+0x12>
 8004aac:	2000      	movs	r0, #0
 8004aae:	e007      	b.n	8004ac0 <__sfputs_r+0x22>
 8004ab0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ab4:	463a      	mov	r2, r7
 8004ab6:	4630      	mov	r0, r6
 8004ab8:	f7ff ffda 	bl	8004a70 <__sfputc_r>
 8004abc:	1c43      	adds	r3, r0, #1
 8004abe:	d1f3      	bne.n	8004aa8 <__sfputs_r+0xa>
 8004ac0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ac4 <_vfiprintf_r>:
 8004ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ac8:	460d      	mov	r5, r1
 8004aca:	b09d      	sub	sp, #116	; 0x74
 8004acc:	4614      	mov	r4, r2
 8004ace:	4698      	mov	r8, r3
 8004ad0:	4606      	mov	r6, r0
 8004ad2:	b118      	cbz	r0, 8004adc <_vfiprintf_r+0x18>
 8004ad4:	6983      	ldr	r3, [r0, #24]
 8004ad6:	b90b      	cbnz	r3, 8004adc <_vfiprintf_r+0x18>
 8004ad8:	f7ff fb56 	bl	8004188 <__sinit>
 8004adc:	4b89      	ldr	r3, [pc, #548]	; (8004d04 <_vfiprintf_r+0x240>)
 8004ade:	429d      	cmp	r5, r3
 8004ae0:	d11b      	bne.n	8004b1a <_vfiprintf_r+0x56>
 8004ae2:	6875      	ldr	r5, [r6, #4]
 8004ae4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ae6:	07d9      	lsls	r1, r3, #31
 8004ae8:	d405      	bmi.n	8004af6 <_vfiprintf_r+0x32>
 8004aea:	89ab      	ldrh	r3, [r5, #12]
 8004aec:	059a      	lsls	r2, r3, #22
 8004aee:	d402      	bmi.n	8004af6 <_vfiprintf_r+0x32>
 8004af0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004af2:	f7ff fbe7 	bl	80042c4 <__retarget_lock_acquire_recursive>
 8004af6:	89ab      	ldrh	r3, [r5, #12]
 8004af8:	071b      	lsls	r3, r3, #28
 8004afa:	d501      	bpl.n	8004b00 <_vfiprintf_r+0x3c>
 8004afc:	692b      	ldr	r3, [r5, #16]
 8004afe:	b9eb      	cbnz	r3, 8004b3c <_vfiprintf_r+0x78>
 8004b00:	4629      	mov	r1, r5
 8004b02:	4630      	mov	r0, r6
 8004b04:	f000 fdd2 	bl	80056ac <__swsetup_r>
 8004b08:	b1c0      	cbz	r0, 8004b3c <_vfiprintf_r+0x78>
 8004b0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b0c:	07dc      	lsls	r4, r3, #31
 8004b0e:	d50e      	bpl.n	8004b2e <_vfiprintf_r+0x6a>
 8004b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b14:	b01d      	add	sp, #116	; 0x74
 8004b16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1a:	4b7b      	ldr	r3, [pc, #492]	; (8004d08 <_vfiprintf_r+0x244>)
 8004b1c:	429d      	cmp	r5, r3
 8004b1e:	d101      	bne.n	8004b24 <_vfiprintf_r+0x60>
 8004b20:	68b5      	ldr	r5, [r6, #8]
 8004b22:	e7df      	b.n	8004ae4 <_vfiprintf_r+0x20>
 8004b24:	4b79      	ldr	r3, [pc, #484]	; (8004d0c <_vfiprintf_r+0x248>)
 8004b26:	429d      	cmp	r5, r3
 8004b28:	bf08      	it	eq
 8004b2a:	68f5      	ldreq	r5, [r6, #12]
 8004b2c:	e7da      	b.n	8004ae4 <_vfiprintf_r+0x20>
 8004b2e:	89ab      	ldrh	r3, [r5, #12]
 8004b30:	0598      	lsls	r0, r3, #22
 8004b32:	d4ed      	bmi.n	8004b10 <_vfiprintf_r+0x4c>
 8004b34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b36:	f7ff fbc6 	bl	80042c6 <__retarget_lock_release_recursive>
 8004b3a:	e7e9      	b.n	8004b10 <_vfiprintf_r+0x4c>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b40:	2320      	movs	r3, #32
 8004b42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b46:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b4a:	2330      	movs	r3, #48	; 0x30
 8004b4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d10 <_vfiprintf_r+0x24c>
 8004b50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b54:	f04f 0901 	mov.w	r9, #1
 8004b58:	4623      	mov	r3, r4
 8004b5a:	469a      	mov	sl, r3
 8004b5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b60:	b10a      	cbz	r2, 8004b66 <_vfiprintf_r+0xa2>
 8004b62:	2a25      	cmp	r2, #37	; 0x25
 8004b64:	d1f9      	bne.n	8004b5a <_vfiprintf_r+0x96>
 8004b66:	ebba 0b04 	subs.w	fp, sl, r4
 8004b6a:	d00b      	beq.n	8004b84 <_vfiprintf_r+0xc0>
 8004b6c:	465b      	mov	r3, fp
 8004b6e:	4622      	mov	r2, r4
 8004b70:	4629      	mov	r1, r5
 8004b72:	4630      	mov	r0, r6
 8004b74:	f7ff ff93 	bl	8004a9e <__sfputs_r>
 8004b78:	3001      	adds	r0, #1
 8004b7a:	f000 80aa 	beq.w	8004cd2 <_vfiprintf_r+0x20e>
 8004b7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b80:	445a      	add	r2, fp
 8004b82:	9209      	str	r2, [sp, #36]	; 0x24
 8004b84:	f89a 3000 	ldrb.w	r3, [sl]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 80a2 	beq.w	8004cd2 <_vfiprintf_r+0x20e>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b98:	f10a 0a01 	add.w	sl, sl, #1
 8004b9c:	9304      	str	r3, [sp, #16]
 8004b9e:	9307      	str	r3, [sp, #28]
 8004ba0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ba4:	931a      	str	r3, [sp, #104]	; 0x68
 8004ba6:	4654      	mov	r4, sl
 8004ba8:	2205      	movs	r2, #5
 8004baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bae:	4858      	ldr	r0, [pc, #352]	; (8004d10 <_vfiprintf_r+0x24c>)
 8004bb0:	f7fb fb46 	bl	8000240 <memchr>
 8004bb4:	9a04      	ldr	r2, [sp, #16]
 8004bb6:	b9d8      	cbnz	r0, 8004bf0 <_vfiprintf_r+0x12c>
 8004bb8:	06d1      	lsls	r1, r2, #27
 8004bba:	bf44      	itt	mi
 8004bbc:	2320      	movmi	r3, #32
 8004bbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc2:	0713      	lsls	r3, r2, #28
 8004bc4:	bf44      	itt	mi
 8004bc6:	232b      	movmi	r3, #43	; 0x2b
 8004bc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8004bd0:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd2:	d015      	beq.n	8004c00 <_vfiprintf_r+0x13c>
 8004bd4:	9a07      	ldr	r2, [sp, #28]
 8004bd6:	4654      	mov	r4, sl
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f04f 0c0a 	mov.w	ip, #10
 8004bde:	4621      	mov	r1, r4
 8004be0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004be4:	3b30      	subs	r3, #48	; 0x30
 8004be6:	2b09      	cmp	r3, #9
 8004be8:	d94e      	bls.n	8004c88 <_vfiprintf_r+0x1c4>
 8004bea:	b1b0      	cbz	r0, 8004c1a <_vfiprintf_r+0x156>
 8004bec:	9207      	str	r2, [sp, #28]
 8004bee:	e014      	b.n	8004c1a <_vfiprintf_r+0x156>
 8004bf0:	eba0 0308 	sub.w	r3, r0, r8
 8004bf4:	fa09 f303 	lsl.w	r3, r9, r3
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	9304      	str	r3, [sp, #16]
 8004bfc:	46a2      	mov	sl, r4
 8004bfe:	e7d2      	b.n	8004ba6 <_vfiprintf_r+0xe2>
 8004c00:	9b03      	ldr	r3, [sp, #12]
 8004c02:	1d19      	adds	r1, r3, #4
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	9103      	str	r1, [sp, #12]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	bfbb      	ittet	lt
 8004c0c:	425b      	neglt	r3, r3
 8004c0e:	f042 0202 	orrlt.w	r2, r2, #2
 8004c12:	9307      	strge	r3, [sp, #28]
 8004c14:	9307      	strlt	r3, [sp, #28]
 8004c16:	bfb8      	it	lt
 8004c18:	9204      	strlt	r2, [sp, #16]
 8004c1a:	7823      	ldrb	r3, [r4, #0]
 8004c1c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c1e:	d10c      	bne.n	8004c3a <_vfiprintf_r+0x176>
 8004c20:	7863      	ldrb	r3, [r4, #1]
 8004c22:	2b2a      	cmp	r3, #42	; 0x2a
 8004c24:	d135      	bne.n	8004c92 <_vfiprintf_r+0x1ce>
 8004c26:	9b03      	ldr	r3, [sp, #12]
 8004c28:	1d1a      	adds	r2, r3, #4
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	9203      	str	r2, [sp, #12]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	bfb8      	it	lt
 8004c32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c36:	3402      	adds	r4, #2
 8004c38:	9305      	str	r3, [sp, #20]
 8004c3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d20 <_vfiprintf_r+0x25c>
 8004c3e:	7821      	ldrb	r1, [r4, #0]
 8004c40:	2203      	movs	r2, #3
 8004c42:	4650      	mov	r0, sl
 8004c44:	f7fb fafc 	bl	8000240 <memchr>
 8004c48:	b140      	cbz	r0, 8004c5c <_vfiprintf_r+0x198>
 8004c4a:	2340      	movs	r3, #64	; 0x40
 8004c4c:	eba0 000a 	sub.w	r0, r0, sl
 8004c50:	fa03 f000 	lsl.w	r0, r3, r0
 8004c54:	9b04      	ldr	r3, [sp, #16]
 8004c56:	4303      	orrs	r3, r0
 8004c58:	3401      	adds	r4, #1
 8004c5a:	9304      	str	r3, [sp, #16]
 8004c5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c60:	482c      	ldr	r0, [pc, #176]	; (8004d14 <_vfiprintf_r+0x250>)
 8004c62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c66:	2206      	movs	r2, #6
 8004c68:	f7fb faea 	bl	8000240 <memchr>
 8004c6c:	2800      	cmp	r0, #0
 8004c6e:	d03f      	beq.n	8004cf0 <_vfiprintf_r+0x22c>
 8004c70:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <_vfiprintf_r+0x254>)
 8004c72:	bb1b      	cbnz	r3, 8004cbc <_vfiprintf_r+0x1f8>
 8004c74:	9b03      	ldr	r3, [sp, #12]
 8004c76:	3307      	adds	r3, #7
 8004c78:	f023 0307 	bic.w	r3, r3, #7
 8004c7c:	3308      	adds	r3, #8
 8004c7e:	9303      	str	r3, [sp, #12]
 8004c80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c82:	443b      	add	r3, r7
 8004c84:	9309      	str	r3, [sp, #36]	; 0x24
 8004c86:	e767      	b.n	8004b58 <_vfiprintf_r+0x94>
 8004c88:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c8c:	460c      	mov	r4, r1
 8004c8e:	2001      	movs	r0, #1
 8004c90:	e7a5      	b.n	8004bde <_vfiprintf_r+0x11a>
 8004c92:	2300      	movs	r3, #0
 8004c94:	3401      	adds	r4, #1
 8004c96:	9305      	str	r3, [sp, #20]
 8004c98:	4619      	mov	r1, r3
 8004c9a:	f04f 0c0a 	mov.w	ip, #10
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ca4:	3a30      	subs	r2, #48	; 0x30
 8004ca6:	2a09      	cmp	r2, #9
 8004ca8:	d903      	bls.n	8004cb2 <_vfiprintf_r+0x1ee>
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d0c5      	beq.n	8004c3a <_vfiprintf_r+0x176>
 8004cae:	9105      	str	r1, [sp, #20]
 8004cb0:	e7c3      	b.n	8004c3a <_vfiprintf_r+0x176>
 8004cb2:	fb0c 2101 	mla	r1, ip, r1, r2
 8004cb6:	4604      	mov	r4, r0
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e7f0      	b.n	8004c9e <_vfiprintf_r+0x1da>
 8004cbc:	ab03      	add	r3, sp, #12
 8004cbe:	9300      	str	r3, [sp, #0]
 8004cc0:	462a      	mov	r2, r5
 8004cc2:	4b16      	ldr	r3, [pc, #88]	; (8004d1c <_vfiprintf_r+0x258>)
 8004cc4:	a904      	add	r1, sp, #16
 8004cc6:	4630      	mov	r0, r6
 8004cc8:	f3af 8000 	nop.w
 8004ccc:	4607      	mov	r7, r0
 8004cce:	1c78      	adds	r0, r7, #1
 8004cd0:	d1d6      	bne.n	8004c80 <_vfiprintf_r+0x1bc>
 8004cd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cd4:	07d9      	lsls	r1, r3, #31
 8004cd6:	d405      	bmi.n	8004ce4 <_vfiprintf_r+0x220>
 8004cd8:	89ab      	ldrh	r3, [r5, #12]
 8004cda:	059a      	lsls	r2, r3, #22
 8004cdc:	d402      	bmi.n	8004ce4 <_vfiprintf_r+0x220>
 8004cde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ce0:	f7ff faf1 	bl	80042c6 <__retarget_lock_release_recursive>
 8004ce4:	89ab      	ldrh	r3, [r5, #12]
 8004ce6:	065b      	lsls	r3, r3, #25
 8004ce8:	f53f af12 	bmi.w	8004b10 <_vfiprintf_r+0x4c>
 8004cec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cee:	e711      	b.n	8004b14 <_vfiprintf_r+0x50>
 8004cf0:	ab03      	add	r3, sp, #12
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	462a      	mov	r2, r5
 8004cf6:	4b09      	ldr	r3, [pc, #36]	; (8004d1c <_vfiprintf_r+0x258>)
 8004cf8:	a904      	add	r1, sp, #16
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f000 f880 	bl	8004e00 <_printf_i>
 8004d00:	e7e4      	b.n	8004ccc <_vfiprintf_r+0x208>
 8004d02:	bf00      	nop
 8004d04:	08005c98 	.word	0x08005c98
 8004d08:	08005cb8 	.word	0x08005cb8
 8004d0c:	08005c78 	.word	0x08005c78
 8004d10:	08005cd8 	.word	0x08005cd8
 8004d14:	08005ce2 	.word	0x08005ce2
 8004d18:	00000000 	.word	0x00000000
 8004d1c:	08004a9f 	.word	0x08004a9f
 8004d20:	08005cde 	.word	0x08005cde

08004d24 <_printf_common>:
 8004d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d28:	4616      	mov	r6, r2
 8004d2a:	4699      	mov	r9, r3
 8004d2c:	688a      	ldr	r2, [r1, #8]
 8004d2e:	690b      	ldr	r3, [r1, #16]
 8004d30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d34:	4293      	cmp	r3, r2
 8004d36:	bfb8      	it	lt
 8004d38:	4613      	movlt	r3, r2
 8004d3a:	6033      	str	r3, [r6, #0]
 8004d3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d40:	4607      	mov	r7, r0
 8004d42:	460c      	mov	r4, r1
 8004d44:	b10a      	cbz	r2, 8004d4a <_printf_common+0x26>
 8004d46:	3301      	adds	r3, #1
 8004d48:	6033      	str	r3, [r6, #0]
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	0699      	lsls	r1, r3, #26
 8004d4e:	bf42      	ittt	mi
 8004d50:	6833      	ldrmi	r3, [r6, #0]
 8004d52:	3302      	addmi	r3, #2
 8004d54:	6033      	strmi	r3, [r6, #0]
 8004d56:	6825      	ldr	r5, [r4, #0]
 8004d58:	f015 0506 	ands.w	r5, r5, #6
 8004d5c:	d106      	bne.n	8004d6c <_printf_common+0x48>
 8004d5e:	f104 0a19 	add.w	sl, r4, #25
 8004d62:	68e3      	ldr	r3, [r4, #12]
 8004d64:	6832      	ldr	r2, [r6, #0]
 8004d66:	1a9b      	subs	r3, r3, r2
 8004d68:	42ab      	cmp	r3, r5
 8004d6a:	dc26      	bgt.n	8004dba <_printf_common+0x96>
 8004d6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d70:	1e13      	subs	r3, r2, #0
 8004d72:	6822      	ldr	r2, [r4, #0]
 8004d74:	bf18      	it	ne
 8004d76:	2301      	movne	r3, #1
 8004d78:	0692      	lsls	r2, r2, #26
 8004d7a:	d42b      	bmi.n	8004dd4 <_printf_common+0xb0>
 8004d7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d80:	4649      	mov	r1, r9
 8004d82:	4638      	mov	r0, r7
 8004d84:	47c0      	blx	r8
 8004d86:	3001      	adds	r0, #1
 8004d88:	d01e      	beq.n	8004dc8 <_printf_common+0xa4>
 8004d8a:	6823      	ldr	r3, [r4, #0]
 8004d8c:	68e5      	ldr	r5, [r4, #12]
 8004d8e:	6832      	ldr	r2, [r6, #0]
 8004d90:	f003 0306 	and.w	r3, r3, #6
 8004d94:	2b04      	cmp	r3, #4
 8004d96:	bf08      	it	eq
 8004d98:	1aad      	subeq	r5, r5, r2
 8004d9a:	68a3      	ldr	r3, [r4, #8]
 8004d9c:	6922      	ldr	r2, [r4, #16]
 8004d9e:	bf0c      	ite	eq
 8004da0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004da4:	2500      	movne	r5, #0
 8004da6:	4293      	cmp	r3, r2
 8004da8:	bfc4      	itt	gt
 8004daa:	1a9b      	subgt	r3, r3, r2
 8004dac:	18ed      	addgt	r5, r5, r3
 8004dae:	2600      	movs	r6, #0
 8004db0:	341a      	adds	r4, #26
 8004db2:	42b5      	cmp	r5, r6
 8004db4:	d11a      	bne.n	8004dec <_printf_common+0xc8>
 8004db6:	2000      	movs	r0, #0
 8004db8:	e008      	b.n	8004dcc <_printf_common+0xa8>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	4652      	mov	r2, sl
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	4638      	mov	r0, r7
 8004dc2:	47c0      	blx	r8
 8004dc4:	3001      	adds	r0, #1
 8004dc6:	d103      	bne.n	8004dd0 <_printf_common+0xac>
 8004dc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd0:	3501      	adds	r5, #1
 8004dd2:	e7c6      	b.n	8004d62 <_printf_common+0x3e>
 8004dd4:	18e1      	adds	r1, r4, r3
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	2030      	movs	r0, #48	; 0x30
 8004dda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dde:	4422      	add	r2, r4
 8004de0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004de4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004de8:	3302      	adds	r3, #2
 8004dea:	e7c7      	b.n	8004d7c <_printf_common+0x58>
 8004dec:	2301      	movs	r3, #1
 8004dee:	4622      	mov	r2, r4
 8004df0:	4649      	mov	r1, r9
 8004df2:	4638      	mov	r0, r7
 8004df4:	47c0      	blx	r8
 8004df6:	3001      	adds	r0, #1
 8004df8:	d0e6      	beq.n	8004dc8 <_printf_common+0xa4>
 8004dfa:	3601      	adds	r6, #1
 8004dfc:	e7d9      	b.n	8004db2 <_printf_common+0x8e>
	...

08004e00 <_printf_i>:
 8004e00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e04:	7e0f      	ldrb	r7, [r1, #24]
 8004e06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004e08:	2f78      	cmp	r7, #120	; 0x78
 8004e0a:	4691      	mov	r9, r2
 8004e0c:	4680      	mov	r8, r0
 8004e0e:	460c      	mov	r4, r1
 8004e10:	469a      	mov	sl, r3
 8004e12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e16:	d807      	bhi.n	8004e28 <_printf_i+0x28>
 8004e18:	2f62      	cmp	r7, #98	; 0x62
 8004e1a:	d80a      	bhi.n	8004e32 <_printf_i+0x32>
 8004e1c:	2f00      	cmp	r7, #0
 8004e1e:	f000 80d8 	beq.w	8004fd2 <_printf_i+0x1d2>
 8004e22:	2f58      	cmp	r7, #88	; 0x58
 8004e24:	f000 80a3 	beq.w	8004f6e <_printf_i+0x16e>
 8004e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e30:	e03a      	b.n	8004ea8 <_printf_i+0xa8>
 8004e32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e36:	2b15      	cmp	r3, #21
 8004e38:	d8f6      	bhi.n	8004e28 <_printf_i+0x28>
 8004e3a:	a101      	add	r1, pc, #4	; (adr r1, 8004e40 <_printf_i+0x40>)
 8004e3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e40:	08004e99 	.word	0x08004e99
 8004e44:	08004ead 	.word	0x08004ead
 8004e48:	08004e29 	.word	0x08004e29
 8004e4c:	08004e29 	.word	0x08004e29
 8004e50:	08004e29 	.word	0x08004e29
 8004e54:	08004e29 	.word	0x08004e29
 8004e58:	08004ead 	.word	0x08004ead
 8004e5c:	08004e29 	.word	0x08004e29
 8004e60:	08004e29 	.word	0x08004e29
 8004e64:	08004e29 	.word	0x08004e29
 8004e68:	08004e29 	.word	0x08004e29
 8004e6c:	08004fb9 	.word	0x08004fb9
 8004e70:	08004edd 	.word	0x08004edd
 8004e74:	08004f9b 	.word	0x08004f9b
 8004e78:	08004e29 	.word	0x08004e29
 8004e7c:	08004e29 	.word	0x08004e29
 8004e80:	08004fdb 	.word	0x08004fdb
 8004e84:	08004e29 	.word	0x08004e29
 8004e88:	08004edd 	.word	0x08004edd
 8004e8c:	08004e29 	.word	0x08004e29
 8004e90:	08004e29 	.word	0x08004e29
 8004e94:	08004fa3 	.word	0x08004fa3
 8004e98:	682b      	ldr	r3, [r5, #0]
 8004e9a:	1d1a      	adds	r2, r3, #4
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	602a      	str	r2, [r5, #0]
 8004ea0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ea4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	e0a3      	b.n	8004ff4 <_printf_i+0x1f4>
 8004eac:	6820      	ldr	r0, [r4, #0]
 8004eae:	6829      	ldr	r1, [r5, #0]
 8004eb0:	0606      	lsls	r6, r0, #24
 8004eb2:	f101 0304 	add.w	r3, r1, #4
 8004eb6:	d50a      	bpl.n	8004ece <_printf_i+0xce>
 8004eb8:	680e      	ldr	r6, [r1, #0]
 8004eba:	602b      	str	r3, [r5, #0]
 8004ebc:	2e00      	cmp	r6, #0
 8004ebe:	da03      	bge.n	8004ec8 <_printf_i+0xc8>
 8004ec0:	232d      	movs	r3, #45	; 0x2d
 8004ec2:	4276      	negs	r6, r6
 8004ec4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ec8:	485e      	ldr	r0, [pc, #376]	; (8005044 <_printf_i+0x244>)
 8004eca:	230a      	movs	r3, #10
 8004ecc:	e019      	b.n	8004f02 <_printf_i+0x102>
 8004ece:	680e      	ldr	r6, [r1, #0]
 8004ed0:	602b      	str	r3, [r5, #0]
 8004ed2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004ed6:	bf18      	it	ne
 8004ed8:	b236      	sxthne	r6, r6
 8004eda:	e7ef      	b.n	8004ebc <_printf_i+0xbc>
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	1d19      	adds	r1, r3, #4
 8004ee2:	6029      	str	r1, [r5, #0]
 8004ee4:	0601      	lsls	r1, r0, #24
 8004ee6:	d501      	bpl.n	8004eec <_printf_i+0xec>
 8004ee8:	681e      	ldr	r6, [r3, #0]
 8004eea:	e002      	b.n	8004ef2 <_printf_i+0xf2>
 8004eec:	0646      	lsls	r6, r0, #25
 8004eee:	d5fb      	bpl.n	8004ee8 <_printf_i+0xe8>
 8004ef0:	881e      	ldrh	r6, [r3, #0]
 8004ef2:	4854      	ldr	r0, [pc, #336]	; (8005044 <_printf_i+0x244>)
 8004ef4:	2f6f      	cmp	r7, #111	; 0x6f
 8004ef6:	bf0c      	ite	eq
 8004ef8:	2308      	moveq	r3, #8
 8004efa:	230a      	movne	r3, #10
 8004efc:	2100      	movs	r1, #0
 8004efe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004f02:	6865      	ldr	r5, [r4, #4]
 8004f04:	60a5      	str	r5, [r4, #8]
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	bfa2      	ittt	ge
 8004f0a:	6821      	ldrge	r1, [r4, #0]
 8004f0c:	f021 0104 	bicge.w	r1, r1, #4
 8004f10:	6021      	strge	r1, [r4, #0]
 8004f12:	b90e      	cbnz	r6, 8004f18 <_printf_i+0x118>
 8004f14:	2d00      	cmp	r5, #0
 8004f16:	d04d      	beq.n	8004fb4 <_printf_i+0x1b4>
 8004f18:	4615      	mov	r5, r2
 8004f1a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f1e:	fb03 6711 	mls	r7, r3, r1, r6
 8004f22:	5dc7      	ldrb	r7, [r0, r7]
 8004f24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f28:	4637      	mov	r7, r6
 8004f2a:	42bb      	cmp	r3, r7
 8004f2c:	460e      	mov	r6, r1
 8004f2e:	d9f4      	bls.n	8004f1a <_printf_i+0x11a>
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d10b      	bne.n	8004f4c <_printf_i+0x14c>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	07de      	lsls	r6, r3, #31
 8004f38:	d508      	bpl.n	8004f4c <_printf_i+0x14c>
 8004f3a:	6923      	ldr	r3, [r4, #16]
 8004f3c:	6861      	ldr	r1, [r4, #4]
 8004f3e:	4299      	cmp	r1, r3
 8004f40:	bfde      	ittt	le
 8004f42:	2330      	movle	r3, #48	; 0x30
 8004f44:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f48:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f4c:	1b52      	subs	r2, r2, r5
 8004f4e:	6122      	str	r2, [r4, #16]
 8004f50:	f8cd a000 	str.w	sl, [sp]
 8004f54:	464b      	mov	r3, r9
 8004f56:	aa03      	add	r2, sp, #12
 8004f58:	4621      	mov	r1, r4
 8004f5a:	4640      	mov	r0, r8
 8004f5c:	f7ff fee2 	bl	8004d24 <_printf_common>
 8004f60:	3001      	adds	r0, #1
 8004f62:	d14c      	bne.n	8004ffe <_printf_i+0x1fe>
 8004f64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f68:	b004      	add	sp, #16
 8004f6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f6e:	4835      	ldr	r0, [pc, #212]	; (8005044 <_printf_i+0x244>)
 8004f70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f74:	6829      	ldr	r1, [r5, #0]
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f7c:	6029      	str	r1, [r5, #0]
 8004f7e:	061d      	lsls	r5, r3, #24
 8004f80:	d514      	bpl.n	8004fac <_printf_i+0x1ac>
 8004f82:	07df      	lsls	r7, r3, #31
 8004f84:	bf44      	itt	mi
 8004f86:	f043 0320 	orrmi.w	r3, r3, #32
 8004f8a:	6023      	strmi	r3, [r4, #0]
 8004f8c:	b91e      	cbnz	r6, 8004f96 <_printf_i+0x196>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	f023 0320 	bic.w	r3, r3, #32
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	2310      	movs	r3, #16
 8004f98:	e7b0      	b.n	8004efc <_printf_i+0xfc>
 8004f9a:	6823      	ldr	r3, [r4, #0]
 8004f9c:	f043 0320 	orr.w	r3, r3, #32
 8004fa0:	6023      	str	r3, [r4, #0]
 8004fa2:	2378      	movs	r3, #120	; 0x78
 8004fa4:	4828      	ldr	r0, [pc, #160]	; (8005048 <_printf_i+0x248>)
 8004fa6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004faa:	e7e3      	b.n	8004f74 <_printf_i+0x174>
 8004fac:	0659      	lsls	r1, r3, #25
 8004fae:	bf48      	it	mi
 8004fb0:	b2b6      	uxthmi	r6, r6
 8004fb2:	e7e6      	b.n	8004f82 <_printf_i+0x182>
 8004fb4:	4615      	mov	r5, r2
 8004fb6:	e7bb      	b.n	8004f30 <_printf_i+0x130>
 8004fb8:	682b      	ldr	r3, [r5, #0]
 8004fba:	6826      	ldr	r6, [r4, #0]
 8004fbc:	6961      	ldr	r1, [r4, #20]
 8004fbe:	1d18      	adds	r0, r3, #4
 8004fc0:	6028      	str	r0, [r5, #0]
 8004fc2:	0635      	lsls	r5, r6, #24
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	d501      	bpl.n	8004fcc <_printf_i+0x1cc>
 8004fc8:	6019      	str	r1, [r3, #0]
 8004fca:	e002      	b.n	8004fd2 <_printf_i+0x1d2>
 8004fcc:	0670      	lsls	r0, r6, #25
 8004fce:	d5fb      	bpl.n	8004fc8 <_printf_i+0x1c8>
 8004fd0:	8019      	strh	r1, [r3, #0]
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6123      	str	r3, [r4, #16]
 8004fd6:	4615      	mov	r5, r2
 8004fd8:	e7ba      	b.n	8004f50 <_printf_i+0x150>
 8004fda:	682b      	ldr	r3, [r5, #0]
 8004fdc:	1d1a      	adds	r2, r3, #4
 8004fde:	602a      	str	r2, [r5, #0]
 8004fe0:	681d      	ldr	r5, [r3, #0]
 8004fe2:	6862      	ldr	r2, [r4, #4]
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	f7fb f92a 	bl	8000240 <memchr>
 8004fec:	b108      	cbz	r0, 8004ff2 <_printf_i+0x1f2>
 8004fee:	1b40      	subs	r0, r0, r5
 8004ff0:	6060      	str	r0, [r4, #4]
 8004ff2:	6863      	ldr	r3, [r4, #4]
 8004ff4:	6123      	str	r3, [r4, #16]
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffc:	e7a8      	b.n	8004f50 <_printf_i+0x150>
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	462a      	mov	r2, r5
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	47d0      	blx	sl
 8005008:	3001      	adds	r0, #1
 800500a:	d0ab      	beq.n	8004f64 <_printf_i+0x164>
 800500c:	6823      	ldr	r3, [r4, #0]
 800500e:	079b      	lsls	r3, r3, #30
 8005010:	d413      	bmi.n	800503a <_printf_i+0x23a>
 8005012:	68e0      	ldr	r0, [r4, #12]
 8005014:	9b03      	ldr	r3, [sp, #12]
 8005016:	4298      	cmp	r0, r3
 8005018:	bfb8      	it	lt
 800501a:	4618      	movlt	r0, r3
 800501c:	e7a4      	b.n	8004f68 <_printf_i+0x168>
 800501e:	2301      	movs	r3, #1
 8005020:	4632      	mov	r2, r6
 8005022:	4649      	mov	r1, r9
 8005024:	4640      	mov	r0, r8
 8005026:	47d0      	blx	sl
 8005028:	3001      	adds	r0, #1
 800502a:	d09b      	beq.n	8004f64 <_printf_i+0x164>
 800502c:	3501      	adds	r5, #1
 800502e:	68e3      	ldr	r3, [r4, #12]
 8005030:	9903      	ldr	r1, [sp, #12]
 8005032:	1a5b      	subs	r3, r3, r1
 8005034:	42ab      	cmp	r3, r5
 8005036:	dcf2      	bgt.n	800501e <_printf_i+0x21e>
 8005038:	e7eb      	b.n	8005012 <_printf_i+0x212>
 800503a:	2500      	movs	r5, #0
 800503c:	f104 0619 	add.w	r6, r4, #25
 8005040:	e7f5      	b.n	800502e <_printf_i+0x22e>
 8005042:	bf00      	nop
 8005044:	08005ce9 	.word	0x08005ce9
 8005048:	08005cfa 	.word	0x08005cfa

0800504c <_scanf_chars>:
 800504c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005050:	4615      	mov	r5, r2
 8005052:	688a      	ldr	r2, [r1, #8]
 8005054:	4680      	mov	r8, r0
 8005056:	460c      	mov	r4, r1
 8005058:	b932      	cbnz	r2, 8005068 <_scanf_chars+0x1c>
 800505a:	698a      	ldr	r2, [r1, #24]
 800505c:	2a00      	cmp	r2, #0
 800505e:	bf0c      	ite	eq
 8005060:	2201      	moveq	r2, #1
 8005062:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8005066:	608a      	str	r2, [r1, #8]
 8005068:	6822      	ldr	r2, [r4, #0]
 800506a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80050fc <_scanf_chars+0xb0>
 800506e:	06d1      	lsls	r1, r2, #27
 8005070:	bf5f      	itttt	pl
 8005072:	681a      	ldrpl	r2, [r3, #0]
 8005074:	1d11      	addpl	r1, r2, #4
 8005076:	6019      	strpl	r1, [r3, #0]
 8005078:	6816      	ldrpl	r6, [r2, #0]
 800507a:	2700      	movs	r7, #0
 800507c:	69a0      	ldr	r0, [r4, #24]
 800507e:	b188      	cbz	r0, 80050a4 <_scanf_chars+0x58>
 8005080:	2801      	cmp	r0, #1
 8005082:	d107      	bne.n	8005094 <_scanf_chars+0x48>
 8005084:	682a      	ldr	r2, [r5, #0]
 8005086:	7811      	ldrb	r1, [r2, #0]
 8005088:	6962      	ldr	r2, [r4, #20]
 800508a:	5c52      	ldrb	r2, [r2, r1]
 800508c:	b952      	cbnz	r2, 80050a4 <_scanf_chars+0x58>
 800508e:	2f00      	cmp	r7, #0
 8005090:	d031      	beq.n	80050f6 <_scanf_chars+0xaa>
 8005092:	e022      	b.n	80050da <_scanf_chars+0x8e>
 8005094:	2802      	cmp	r0, #2
 8005096:	d120      	bne.n	80050da <_scanf_chars+0x8e>
 8005098:	682b      	ldr	r3, [r5, #0]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	f813 3009 	ldrb.w	r3, [r3, r9]
 80050a0:	071b      	lsls	r3, r3, #28
 80050a2:	d41a      	bmi.n	80050da <_scanf_chars+0x8e>
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	06da      	lsls	r2, r3, #27
 80050a8:	bf5e      	ittt	pl
 80050aa:	682b      	ldrpl	r3, [r5, #0]
 80050ac:	781b      	ldrbpl	r3, [r3, #0]
 80050ae:	f806 3b01 	strbpl.w	r3, [r6], #1
 80050b2:	682a      	ldr	r2, [r5, #0]
 80050b4:	686b      	ldr	r3, [r5, #4]
 80050b6:	3201      	adds	r2, #1
 80050b8:	602a      	str	r2, [r5, #0]
 80050ba:	68a2      	ldr	r2, [r4, #8]
 80050bc:	3b01      	subs	r3, #1
 80050be:	3a01      	subs	r2, #1
 80050c0:	606b      	str	r3, [r5, #4]
 80050c2:	3701      	adds	r7, #1
 80050c4:	60a2      	str	r2, [r4, #8]
 80050c6:	b142      	cbz	r2, 80050da <_scanf_chars+0x8e>
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	dcd7      	bgt.n	800507c <_scanf_chars+0x30>
 80050cc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80050d0:	4629      	mov	r1, r5
 80050d2:	4640      	mov	r0, r8
 80050d4:	4798      	blx	r3
 80050d6:	2800      	cmp	r0, #0
 80050d8:	d0d0      	beq.n	800507c <_scanf_chars+0x30>
 80050da:	6823      	ldr	r3, [r4, #0]
 80050dc:	f013 0310 	ands.w	r3, r3, #16
 80050e0:	d105      	bne.n	80050ee <_scanf_chars+0xa2>
 80050e2:	68e2      	ldr	r2, [r4, #12]
 80050e4:	3201      	adds	r2, #1
 80050e6:	60e2      	str	r2, [r4, #12]
 80050e8:	69a2      	ldr	r2, [r4, #24]
 80050ea:	b102      	cbz	r2, 80050ee <_scanf_chars+0xa2>
 80050ec:	7033      	strb	r3, [r6, #0]
 80050ee:	6923      	ldr	r3, [r4, #16]
 80050f0:	443b      	add	r3, r7
 80050f2:	6123      	str	r3, [r4, #16]
 80050f4:	2000      	movs	r0, #0
 80050f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050fa:	bf00      	nop
 80050fc:	08005d27 	.word	0x08005d27

08005100 <_scanf_i>:
 8005100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005104:	4698      	mov	r8, r3
 8005106:	4b76      	ldr	r3, [pc, #472]	; (80052e0 <_scanf_i+0x1e0>)
 8005108:	460c      	mov	r4, r1
 800510a:	4682      	mov	sl, r0
 800510c:	4616      	mov	r6, r2
 800510e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005112:	b087      	sub	sp, #28
 8005114:	ab03      	add	r3, sp, #12
 8005116:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800511a:	4b72      	ldr	r3, [pc, #456]	; (80052e4 <_scanf_i+0x1e4>)
 800511c:	69a1      	ldr	r1, [r4, #24]
 800511e:	4a72      	ldr	r2, [pc, #456]	; (80052e8 <_scanf_i+0x1e8>)
 8005120:	2903      	cmp	r1, #3
 8005122:	bf18      	it	ne
 8005124:	461a      	movne	r2, r3
 8005126:	68a3      	ldr	r3, [r4, #8]
 8005128:	9201      	str	r2, [sp, #4]
 800512a:	1e5a      	subs	r2, r3, #1
 800512c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005130:	bf88      	it	hi
 8005132:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005136:	4627      	mov	r7, r4
 8005138:	bf82      	ittt	hi
 800513a:	eb03 0905 	addhi.w	r9, r3, r5
 800513e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005142:	60a3      	strhi	r3, [r4, #8]
 8005144:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005148:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800514c:	bf98      	it	ls
 800514e:	f04f 0900 	movls.w	r9, #0
 8005152:	6023      	str	r3, [r4, #0]
 8005154:	463d      	mov	r5, r7
 8005156:	f04f 0b00 	mov.w	fp, #0
 800515a:	6831      	ldr	r1, [r6, #0]
 800515c:	ab03      	add	r3, sp, #12
 800515e:	7809      	ldrb	r1, [r1, #0]
 8005160:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005164:	2202      	movs	r2, #2
 8005166:	f7fb f86b 	bl	8000240 <memchr>
 800516a:	b328      	cbz	r0, 80051b8 <_scanf_i+0xb8>
 800516c:	f1bb 0f01 	cmp.w	fp, #1
 8005170:	d159      	bne.n	8005226 <_scanf_i+0x126>
 8005172:	6862      	ldr	r2, [r4, #4]
 8005174:	b92a      	cbnz	r2, 8005182 <_scanf_i+0x82>
 8005176:	6822      	ldr	r2, [r4, #0]
 8005178:	2308      	movs	r3, #8
 800517a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800517e:	6063      	str	r3, [r4, #4]
 8005180:	6022      	str	r2, [r4, #0]
 8005182:	6822      	ldr	r2, [r4, #0]
 8005184:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005188:	6022      	str	r2, [r4, #0]
 800518a:	68a2      	ldr	r2, [r4, #8]
 800518c:	1e51      	subs	r1, r2, #1
 800518e:	60a1      	str	r1, [r4, #8]
 8005190:	b192      	cbz	r2, 80051b8 <_scanf_i+0xb8>
 8005192:	6832      	ldr	r2, [r6, #0]
 8005194:	1c51      	adds	r1, r2, #1
 8005196:	6031      	str	r1, [r6, #0]
 8005198:	7812      	ldrb	r2, [r2, #0]
 800519a:	f805 2b01 	strb.w	r2, [r5], #1
 800519e:	6872      	ldr	r2, [r6, #4]
 80051a0:	3a01      	subs	r2, #1
 80051a2:	2a00      	cmp	r2, #0
 80051a4:	6072      	str	r2, [r6, #4]
 80051a6:	dc07      	bgt.n	80051b8 <_scanf_i+0xb8>
 80051a8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80051ac:	4631      	mov	r1, r6
 80051ae:	4650      	mov	r0, sl
 80051b0:	4790      	blx	r2
 80051b2:	2800      	cmp	r0, #0
 80051b4:	f040 8085 	bne.w	80052c2 <_scanf_i+0x1c2>
 80051b8:	f10b 0b01 	add.w	fp, fp, #1
 80051bc:	f1bb 0f03 	cmp.w	fp, #3
 80051c0:	d1cb      	bne.n	800515a <_scanf_i+0x5a>
 80051c2:	6863      	ldr	r3, [r4, #4]
 80051c4:	b90b      	cbnz	r3, 80051ca <_scanf_i+0xca>
 80051c6:	230a      	movs	r3, #10
 80051c8:	6063      	str	r3, [r4, #4]
 80051ca:	6863      	ldr	r3, [r4, #4]
 80051cc:	4947      	ldr	r1, [pc, #284]	; (80052ec <_scanf_i+0x1ec>)
 80051ce:	6960      	ldr	r0, [r4, #20]
 80051d0:	1ac9      	subs	r1, r1, r3
 80051d2:	f000 f8af 	bl	8005334 <__sccl>
 80051d6:	f04f 0b00 	mov.w	fp, #0
 80051da:	68a3      	ldr	r3, [r4, #8]
 80051dc:	6822      	ldr	r2, [r4, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d03d      	beq.n	800525e <_scanf_i+0x15e>
 80051e2:	6831      	ldr	r1, [r6, #0]
 80051e4:	6960      	ldr	r0, [r4, #20]
 80051e6:	f891 c000 	ldrb.w	ip, [r1]
 80051ea:	f810 000c 	ldrb.w	r0, [r0, ip]
 80051ee:	2800      	cmp	r0, #0
 80051f0:	d035      	beq.n	800525e <_scanf_i+0x15e>
 80051f2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80051f6:	d124      	bne.n	8005242 <_scanf_i+0x142>
 80051f8:	0510      	lsls	r0, r2, #20
 80051fa:	d522      	bpl.n	8005242 <_scanf_i+0x142>
 80051fc:	f10b 0b01 	add.w	fp, fp, #1
 8005200:	f1b9 0f00 	cmp.w	r9, #0
 8005204:	d003      	beq.n	800520e <_scanf_i+0x10e>
 8005206:	3301      	adds	r3, #1
 8005208:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800520c:	60a3      	str	r3, [r4, #8]
 800520e:	6873      	ldr	r3, [r6, #4]
 8005210:	3b01      	subs	r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	6073      	str	r3, [r6, #4]
 8005216:	dd1b      	ble.n	8005250 <_scanf_i+0x150>
 8005218:	6833      	ldr	r3, [r6, #0]
 800521a:	3301      	adds	r3, #1
 800521c:	6033      	str	r3, [r6, #0]
 800521e:	68a3      	ldr	r3, [r4, #8]
 8005220:	3b01      	subs	r3, #1
 8005222:	60a3      	str	r3, [r4, #8]
 8005224:	e7d9      	b.n	80051da <_scanf_i+0xda>
 8005226:	f1bb 0f02 	cmp.w	fp, #2
 800522a:	d1ae      	bne.n	800518a <_scanf_i+0x8a>
 800522c:	6822      	ldr	r2, [r4, #0]
 800522e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8005232:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8005236:	d1bf      	bne.n	80051b8 <_scanf_i+0xb8>
 8005238:	2310      	movs	r3, #16
 800523a:	6063      	str	r3, [r4, #4]
 800523c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005240:	e7a2      	b.n	8005188 <_scanf_i+0x88>
 8005242:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8005246:	6022      	str	r2, [r4, #0]
 8005248:	780b      	ldrb	r3, [r1, #0]
 800524a:	f805 3b01 	strb.w	r3, [r5], #1
 800524e:	e7de      	b.n	800520e <_scanf_i+0x10e>
 8005250:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005254:	4631      	mov	r1, r6
 8005256:	4650      	mov	r0, sl
 8005258:	4798      	blx	r3
 800525a:	2800      	cmp	r0, #0
 800525c:	d0df      	beq.n	800521e <_scanf_i+0x11e>
 800525e:	6823      	ldr	r3, [r4, #0]
 8005260:	05db      	lsls	r3, r3, #23
 8005262:	d50d      	bpl.n	8005280 <_scanf_i+0x180>
 8005264:	42bd      	cmp	r5, r7
 8005266:	d909      	bls.n	800527c <_scanf_i+0x17c>
 8005268:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800526c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005270:	4632      	mov	r2, r6
 8005272:	4650      	mov	r0, sl
 8005274:	4798      	blx	r3
 8005276:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800527a:	464d      	mov	r5, r9
 800527c:	42bd      	cmp	r5, r7
 800527e:	d02d      	beq.n	80052dc <_scanf_i+0x1dc>
 8005280:	6822      	ldr	r2, [r4, #0]
 8005282:	f012 0210 	ands.w	r2, r2, #16
 8005286:	d113      	bne.n	80052b0 <_scanf_i+0x1b0>
 8005288:	702a      	strb	r2, [r5, #0]
 800528a:	6863      	ldr	r3, [r4, #4]
 800528c:	9e01      	ldr	r6, [sp, #4]
 800528e:	4639      	mov	r1, r7
 8005290:	4650      	mov	r0, sl
 8005292:	47b0      	blx	r6
 8005294:	6821      	ldr	r1, [r4, #0]
 8005296:	f8d8 3000 	ldr.w	r3, [r8]
 800529a:	f011 0f20 	tst.w	r1, #32
 800529e:	d013      	beq.n	80052c8 <_scanf_i+0x1c8>
 80052a0:	1d1a      	adds	r2, r3, #4
 80052a2:	f8c8 2000 	str.w	r2, [r8]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6018      	str	r0, [r3, #0]
 80052aa:	68e3      	ldr	r3, [r4, #12]
 80052ac:	3301      	adds	r3, #1
 80052ae:	60e3      	str	r3, [r4, #12]
 80052b0:	1bed      	subs	r5, r5, r7
 80052b2:	44ab      	add	fp, r5
 80052b4:	6925      	ldr	r5, [r4, #16]
 80052b6:	445d      	add	r5, fp
 80052b8:	6125      	str	r5, [r4, #16]
 80052ba:	2000      	movs	r0, #0
 80052bc:	b007      	add	sp, #28
 80052be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052c2:	f04f 0b00 	mov.w	fp, #0
 80052c6:	e7ca      	b.n	800525e <_scanf_i+0x15e>
 80052c8:	1d1a      	adds	r2, r3, #4
 80052ca:	f8c8 2000 	str.w	r2, [r8]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f011 0f01 	tst.w	r1, #1
 80052d4:	bf14      	ite	ne
 80052d6:	8018      	strhne	r0, [r3, #0]
 80052d8:	6018      	streq	r0, [r3, #0]
 80052da:	e7e6      	b.n	80052aa <_scanf_i+0x1aa>
 80052dc:	2001      	movs	r0, #1
 80052de:	e7ed      	b.n	80052bc <_scanf_i+0x1bc>
 80052e0:	08005c50 	.word	0x08005c50
 80052e4:	08005591 	.word	0x08005591
 80052e8:	080054a9 	.word	0x080054a9
 80052ec:	08005d24 	.word	0x08005d24

080052f0 <_read_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d07      	ldr	r5, [pc, #28]	; (8005310 <_read_r+0x20>)
 80052f4:	4604      	mov	r4, r0
 80052f6:	4608      	mov	r0, r1
 80052f8:	4611      	mov	r1, r2
 80052fa:	2200      	movs	r2, #0
 80052fc:	602a      	str	r2, [r5, #0]
 80052fe:	461a      	mov	r2, r3
 8005300:	f7fb feea 	bl	80010d8 <_read>
 8005304:	1c43      	adds	r3, r0, #1
 8005306:	d102      	bne.n	800530e <_read_r+0x1e>
 8005308:	682b      	ldr	r3, [r5, #0]
 800530a:	b103      	cbz	r3, 800530e <_read_r+0x1e>
 800530c:	6023      	str	r3, [r4, #0]
 800530e:	bd38      	pop	{r3, r4, r5, pc}
 8005310:	20000684 	.word	0x20000684

08005314 <_sbrk_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d06      	ldr	r5, [pc, #24]	; (8005330 <_sbrk_r+0x1c>)
 8005318:	2300      	movs	r3, #0
 800531a:	4604      	mov	r4, r0
 800531c:	4608      	mov	r0, r1
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	f7fb ff48 	bl	80011b4 <_sbrk>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_sbrk_r+0x1a>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	b103      	cbz	r3, 800532e <_sbrk_r+0x1a>
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	20000684 	.word	0x20000684

08005334 <__sccl>:
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	780b      	ldrb	r3, [r1, #0]
 8005338:	4604      	mov	r4, r0
 800533a:	2b5e      	cmp	r3, #94	; 0x5e
 800533c:	bf0b      	itete	eq
 800533e:	784b      	ldrbeq	r3, [r1, #1]
 8005340:	1c48      	addne	r0, r1, #1
 8005342:	1c88      	addeq	r0, r1, #2
 8005344:	2200      	movne	r2, #0
 8005346:	bf08      	it	eq
 8005348:	2201      	moveq	r2, #1
 800534a:	1e61      	subs	r1, r4, #1
 800534c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8005350:	f801 2f01 	strb.w	r2, [r1, #1]!
 8005354:	42a9      	cmp	r1, r5
 8005356:	d1fb      	bne.n	8005350 <__sccl+0x1c>
 8005358:	b90b      	cbnz	r3, 800535e <__sccl+0x2a>
 800535a:	3801      	subs	r0, #1
 800535c:	bd70      	pop	{r4, r5, r6, pc}
 800535e:	f082 0201 	eor.w	r2, r2, #1
 8005362:	54e2      	strb	r2, [r4, r3]
 8005364:	4605      	mov	r5, r0
 8005366:	4628      	mov	r0, r5
 8005368:	f810 1b01 	ldrb.w	r1, [r0], #1
 800536c:	292d      	cmp	r1, #45	; 0x2d
 800536e:	d006      	beq.n	800537e <__sccl+0x4a>
 8005370:	295d      	cmp	r1, #93	; 0x5d
 8005372:	d0f3      	beq.n	800535c <__sccl+0x28>
 8005374:	b909      	cbnz	r1, 800537a <__sccl+0x46>
 8005376:	4628      	mov	r0, r5
 8005378:	e7f0      	b.n	800535c <__sccl+0x28>
 800537a:	460b      	mov	r3, r1
 800537c:	e7f1      	b.n	8005362 <__sccl+0x2e>
 800537e:	786e      	ldrb	r6, [r5, #1]
 8005380:	2e5d      	cmp	r6, #93	; 0x5d
 8005382:	d0fa      	beq.n	800537a <__sccl+0x46>
 8005384:	42b3      	cmp	r3, r6
 8005386:	dcf8      	bgt.n	800537a <__sccl+0x46>
 8005388:	3502      	adds	r5, #2
 800538a:	4619      	mov	r1, r3
 800538c:	3101      	adds	r1, #1
 800538e:	428e      	cmp	r6, r1
 8005390:	5462      	strb	r2, [r4, r1]
 8005392:	dcfb      	bgt.n	800538c <__sccl+0x58>
 8005394:	1af1      	subs	r1, r6, r3
 8005396:	3901      	subs	r1, #1
 8005398:	1c58      	adds	r0, r3, #1
 800539a:	42b3      	cmp	r3, r6
 800539c:	bfa8      	it	ge
 800539e:	2100      	movge	r1, #0
 80053a0:	1843      	adds	r3, r0, r1
 80053a2:	e7e0      	b.n	8005366 <__sccl+0x32>

080053a4 <_strtol_l.constprop.0>:
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053aa:	d001      	beq.n	80053b0 <_strtol_l.constprop.0+0xc>
 80053ac:	2b24      	cmp	r3, #36	; 0x24
 80053ae:	d906      	bls.n	80053be <_strtol_l.constprop.0+0x1a>
 80053b0:	f7fe fd4a 	bl	8003e48 <__errno>
 80053b4:	2316      	movs	r3, #22
 80053b6:	6003      	str	r3, [r0, #0]
 80053b8:	2000      	movs	r0, #0
 80053ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053be:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80054a4 <_strtol_l.constprop.0+0x100>
 80053c2:	460d      	mov	r5, r1
 80053c4:	462e      	mov	r6, r5
 80053c6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80053ca:	f814 700c 	ldrb.w	r7, [r4, ip]
 80053ce:	f017 0708 	ands.w	r7, r7, #8
 80053d2:	d1f7      	bne.n	80053c4 <_strtol_l.constprop.0+0x20>
 80053d4:	2c2d      	cmp	r4, #45	; 0x2d
 80053d6:	d132      	bne.n	800543e <_strtol_l.constprop.0+0x9a>
 80053d8:	782c      	ldrb	r4, [r5, #0]
 80053da:	2701      	movs	r7, #1
 80053dc:	1cb5      	adds	r5, r6, #2
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d05b      	beq.n	800549a <_strtol_l.constprop.0+0xf6>
 80053e2:	2b10      	cmp	r3, #16
 80053e4:	d109      	bne.n	80053fa <_strtol_l.constprop.0+0x56>
 80053e6:	2c30      	cmp	r4, #48	; 0x30
 80053e8:	d107      	bne.n	80053fa <_strtol_l.constprop.0+0x56>
 80053ea:	782c      	ldrb	r4, [r5, #0]
 80053ec:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80053f0:	2c58      	cmp	r4, #88	; 0x58
 80053f2:	d14d      	bne.n	8005490 <_strtol_l.constprop.0+0xec>
 80053f4:	786c      	ldrb	r4, [r5, #1]
 80053f6:	2310      	movs	r3, #16
 80053f8:	3502      	adds	r5, #2
 80053fa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80053fe:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8005402:	f04f 0c00 	mov.w	ip, #0
 8005406:	fbb8 f9f3 	udiv	r9, r8, r3
 800540a:	4666      	mov	r6, ip
 800540c:	fb03 8a19 	mls	sl, r3, r9, r8
 8005410:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8005414:	f1be 0f09 	cmp.w	lr, #9
 8005418:	d816      	bhi.n	8005448 <_strtol_l.constprop.0+0xa4>
 800541a:	4674      	mov	r4, lr
 800541c:	42a3      	cmp	r3, r4
 800541e:	dd24      	ble.n	800546a <_strtol_l.constprop.0+0xc6>
 8005420:	f1bc 0f00 	cmp.w	ip, #0
 8005424:	db1e      	blt.n	8005464 <_strtol_l.constprop.0+0xc0>
 8005426:	45b1      	cmp	r9, r6
 8005428:	d31c      	bcc.n	8005464 <_strtol_l.constprop.0+0xc0>
 800542a:	d101      	bne.n	8005430 <_strtol_l.constprop.0+0x8c>
 800542c:	45a2      	cmp	sl, r4
 800542e:	db19      	blt.n	8005464 <_strtol_l.constprop.0+0xc0>
 8005430:	fb06 4603 	mla	r6, r6, r3, r4
 8005434:	f04f 0c01 	mov.w	ip, #1
 8005438:	f815 4b01 	ldrb.w	r4, [r5], #1
 800543c:	e7e8      	b.n	8005410 <_strtol_l.constprop.0+0x6c>
 800543e:	2c2b      	cmp	r4, #43	; 0x2b
 8005440:	bf04      	itt	eq
 8005442:	782c      	ldrbeq	r4, [r5, #0]
 8005444:	1cb5      	addeq	r5, r6, #2
 8005446:	e7ca      	b.n	80053de <_strtol_l.constprop.0+0x3a>
 8005448:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800544c:	f1be 0f19 	cmp.w	lr, #25
 8005450:	d801      	bhi.n	8005456 <_strtol_l.constprop.0+0xb2>
 8005452:	3c37      	subs	r4, #55	; 0x37
 8005454:	e7e2      	b.n	800541c <_strtol_l.constprop.0+0x78>
 8005456:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800545a:	f1be 0f19 	cmp.w	lr, #25
 800545e:	d804      	bhi.n	800546a <_strtol_l.constprop.0+0xc6>
 8005460:	3c57      	subs	r4, #87	; 0x57
 8005462:	e7db      	b.n	800541c <_strtol_l.constprop.0+0x78>
 8005464:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8005468:	e7e6      	b.n	8005438 <_strtol_l.constprop.0+0x94>
 800546a:	f1bc 0f00 	cmp.w	ip, #0
 800546e:	da05      	bge.n	800547c <_strtol_l.constprop.0+0xd8>
 8005470:	2322      	movs	r3, #34	; 0x22
 8005472:	6003      	str	r3, [r0, #0]
 8005474:	4646      	mov	r6, r8
 8005476:	b942      	cbnz	r2, 800548a <_strtol_l.constprop.0+0xe6>
 8005478:	4630      	mov	r0, r6
 800547a:	e79e      	b.n	80053ba <_strtol_l.constprop.0+0x16>
 800547c:	b107      	cbz	r7, 8005480 <_strtol_l.constprop.0+0xdc>
 800547e:	4276      	negs	r6, r6
 8005480:	2a00      	cmp	r2, #0
 8005482:	d0f9      	beq.n	8005478 <_strtol_l.constprop.0+0xd4>
 8005484:	f1bc 0f00 	cmp.w	ip, #0
 8005488:	d000      	beq.n	800548c <_strtol_l.constprop.0+0xe8>
 800548a:	1e69      	subs	r1, r5, #1
 800548c:	6011      	str	r1, [r2, #0]
 800548e:	e7f3      	b.n	8005478 <_strtol_l.constprop.0+0xd4>
 8005490:	2430      	movs	r4, #48	; 0x30
 8005492:	2b00      	cmp	r3, #0
 8005494:	d1b1      	bne.n	80053fa <_strtol_l.constprop.0+0x56>
 8005496:	2308      	movs	r3, #8
 8005498:	e7af      	b.n	80053fa <_strtol_l.constprop.0+0x56>
 800549a:	2c30      	cmp	r4, #48	; 0x30
 800549c:	d0a5      	beq.n	80053ea <_strtol_l.constprop.0+0x46>
 800549e:	230a      	movs	r3, #10
 80054a0:	e7ab      	b.n	80053fa <_strtol_l.constprop.0+0x56>
 80054a2:	bf00      	nop
 80054a4:	08005d27 	.word	0x08005d27

080054a8 <_strtol_r>:
 80054a8:	f7ff bf7c 	b.w	80053a4 <_strtol_l.constprop.0>

080054ac <_strtoul_l.constprop.0>:
 80054ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054b0:	4f36      	ldr	r7, [pc, #216]	; (800558c <_strtoul_l.constprop.0+0xe0>)
 80054b2:	4686      	mov	lr, r0
 80054b4:	460d      	mov	r5, r1
 80054b6:	4628      	mov	r0, r5
 80054b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80054bc:	5de6      	ldrb	r6, [r4, r7]
 80054be:	f016 0608 	ands.w	r6, r6, #8
 80054c2:	d1f8      	bne.n	80054b6 <_strtoul_l.constprop.0+0xa>
 80054c4:	2c2d      	cmp	r4, #45	; 0x2d
 80054c6:	d12f      	bne.n	8005528 <_strtoul_l.constprop.0+0x7c>
 80054c8:	782c      	ldrb	r4, [r5, #0]
 80054ca:	2601      	movs	r6, #1
 80054cc:	1c85      	adds	r5, r0, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d057      	beq.n	8005582 <_strtoul_l.constprop.0+0xd6>
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d109      	bne.n	80054ea <_strtoul_l.constprop.0+0x3e>
 80054d6:	2c30      	cmp	r4, #48	; 0x30
 80054d8:	d107      	bne.n	80054ea <_strtoul_l.constprop.0+0x3e>
 80054da:	7828      	ldrb	r0, [r5, #0]
 80054dc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80054e0:	2858      	cmp	r0, #88	; 0x58
 80054e2:	d149      	bne.n	8005578 <_strtoul_l.constprop.0+0xcc>
 80054e4:	786c      	ldrb	r4, [r5, #1]
 80054e6:	2310      	movs	r3, #16
 80054e8:	3502      	adds	r5, #2
 80054ea:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 80054ee:	2700      	movs	r7, #0
 80054f0:	fbb8 f8f3 	udiv	r8, r8, r3
 80054f4:	fb03 f908 	mul.w	r9, r3, r8
 80054f8:	ea6f 0909 	mvn.w	r9, r9
 80054fc:	4638      	mov	r0, r7
 80054fe:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005502:	f1bc 0f09 	cmp.w	ip, #9
 8005506:	d814      	bhi.n	8005532 <_strtoul_l.constprop.0+0x86>
 8005508:	4664      	mov	r4, ip
 800550a:	42a3      	cmp	r3, r4
 800550c:	dd22      	ble.n	8005554 <_strtoul_l.constprop.0+0xa8>
 800550e:	2f00      	cmp	r7, #0
 8005510:	db1d      	blt.n	800554e <_strtoul_l.constprop.0+0xa2>
 8005512:	4580      	cmp	r8, r0
 8005514:	d31b      	bcc.n	800554e <_strtoul_l.constprop.0+0xa2>
 8005516:	d101      	bne.n	800551c <_strtoul_l.constprop.0+0x70>
 8005518:	45a1      	cmp	r9, r4
 800551a:	db18      	blt.n	800554e <_strtoul_l.constprop.0+0xa2>
 800551c:	fb00 4003 	mla	r0, r0, r3, r4
 8005520:	2701      	movs	r7, #1
 8005522:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005526:	e7ea      	b.n	80054fe <_strtoul_l.constprop.0+0x52>
 8005528:	2c2b      	cmp	r4, #43	; 0x2b
 800552a:	bf04      	itt	eq
 800552c:	782c      	ldrbeq	r4, [r5, #0]
 800552e:	1c85      	addeq	r5, r0, #2
 8005530:	e7cd      	b.n	80054ce <_strtoul_l.constprop.0+0x22>
 8005532:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005536:	f1bc 0f19 	cmp.w	ip, #25
 800553a:	d801      	bhi.n	8005540 <_strtoul_l.constprop.0+0x94>
 800553c:	3c37      	subs	r4, #55	; 0x37
 800553e:	e7e4      	b.n	800550a <_strtoul_l.constprop.0+0x5e>
 8005540:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005544:	f1bc 0f19 	cmp.w	ip, #25
 8005548:	d804      	bhi.n	8005554 <_strtoul_l.constprop.0+0xa8>
 800554a:	3c57      	subs	r4, #87	; 0x57
 800554c:	e7dd      	b.n	800550a <_strtoul_l.constprop.0+0x5e>
 800554e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005552:	e7e6      	b.n	8005522 <_strtoul_l.constprop.0+0x76>
 8005554:	2f00      	cmp	r7, #0
 8005556:	da07      	bge.n	8005568 <_strtoul_l.constprop.0+0xbc>
 8005558:	2322      	movs	r3, #34	; 0x22
 800555a:	f8ce 3000 	str.w	r3, [lr]
 800555e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005562:	b932      	cbnz	r2, 8005572 <_strtoul_l.constprop.0+0xc6>
 8005564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005568:	b106      	cbz	r6, 800556c <_strtoul_l.constprop.0+0xc0>
 800556a:	4240      	negs	r0, r0
 800556c:	2a00      	cmp	r2, #0
 800556e:	d0f9      	beq.n	8005564 <_strtoul_l.constprop.0+0xb8>
 8005570:	b107      	cbz	r7, 8005574 <_strtoul_l.constprop.0+0xc8>
 8005572:	1e69      	subs	r1, r5, #1
 8005574:	6011      	str	r1, [r2, #0]
 8005576:	e7f5      	b.n	8005564 <_strtoul_l.constprop.0+0xb8>
 8005578:	2430      	movs	r4, #48	; 0x30
 800557a:	2b00      	cmp	r3, #0
 800557c:	d1b5      	bne.n	80054ea <_strtoul_l.constprop.0+0x3e>
 800557e:	2308      	movs	r3, #8
 8005580:	e7b3      	b.n	80054ea <_strtoul_l.constprop.0+0x3e>
 8005582:	2c30      	cmp	r4, #48	; 0x30
 8005584:	d0a9      	beq.n	80054da <_strtoul_l.constprop.0+0x2e>
 8005586:	230a      	movs	r3, #10
 8005588:	e7af      	b.n	80054ea <_strtoul_l.constprop.0+0x3e>
 800558a:	bf00      	nop
 800558c:	08005d27 	.word	0x08005d27

08005590 <_strtoul_r>:
 8005590:	f7ff bf8c 	b.w	80054ac <_strtoul_l.constprop.0>

08005594 <__submore>:
 8005594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005598:	460c      	mov	r4, r1
 800559a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800559c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80055a0:	4299      	cmp	r1, r3
 80055a2:	d11d      	bne.n	80055e0 <__submore+0x4c>
 80055a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055a8:	f7fe fec0 	bl	800432c <_malloc_r>
 80055ac:	b918      	cbnz	r0, 80055b6 <__submore+0x22>
 80055ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80055b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055ba:	63a3      	str	r3, [r4, #56]	; 0x38
 80055bc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80055c0:	6360      	str	r0, [r4, #52]	; 0x34
 80055c2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80055c6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80055ca:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80055ce:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80055d2:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80055d6:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80055da:	6020      	str	r0, [r4, #0]
 80055dc:	2000      	movs	r0, #0
 80055de:	e7e8      	b.n	80055b2 <__submore+0x1e>
 80055e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80055e2:	0077      	lsls	r7, r6, #1
 80055e4:	463a      	mov	r2, r7
 80055e6:	f000 fa77 	bl	8005ad8 <_realloc_r>
 80055ea:	4605      	mov	r5, r0
 80055ec:	2800      	cmp	r0, #0
 80055ee:	d0de      	beq.n	80055ae <__submore+0x1a>
 80055f0:	eb00 0806 	add.w	r8, r0, r6
 80055f4:	4601      	mov	r1, r0
 80055f6:	4632      	mov	r2, r6
 80055f8:	4640      	mov	r0, r8
 80055fa:	f000 f9ed 	bl	80059d8 <memcpy>
 80055fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005602:	f8c4 8000 	str.w	r8, [r4]
 8005606:	e7e9      	b.n	80055dc <__submore+0x48>

08005608 <__swbuf_r>:
 8005608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800560a:	460e      	mov	r6, r1
 800560c:	4614      	mov	r4, r2
 800560e:	4605      	mov	r5, r0
 8005610:	b118      	cbz	r0, 800561a <__swbuf_r+0x12>
 8005612:	6983      	ldr	r3, [r0, #24]
 8005614:	b90b      	cbnz	r3, 800561a <__swbuf_r+0x12>
 8005616:	f7fe fdb7 	bl	8004188 <__sinit>
 800561a:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <__swbuf_r+0x98>)
 800561c:	429c      	cmp	r4, r3
 800561e:	d12b      	bne.n	8005678 <__swbuf_r+0x70>
 8005620:	686c      	ldr	r4, [r5, #4]
 8005622:	69a3      	ldr	r3, [r4, #24]
 8005624:	60a3      	str	r3, [r4, #8]
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	071a      	lsls	r2, r3, #28
 800562a:	d52f      	bpl.n	800568c <__swbuf_r+0x84>
 800562c:	6923      	ldr	r3, [r4, #16]
 800562e:	b36b      	cbz	r3, 800568c <__swbuf_r+0x84>
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	6820      	ldr	r0, [r4, #0]
 8005634:	1ac0      	subs	r0, r0, r3
 8005636:	6963      	ldr	r3, [r4, #20]
 8005638:	b2f6      	uxtb	r6, r6
 800563a:	4283      	cmp	r3, r0
 800563c:	4637      	mov	r7, r6
 800563e:	dc04      	bgt.n	800564a <__swbuf_r+0x42>
 8005640:	4621      	mov	r1, r4
 8005642:	4628      	mov	r0, r5
 8005644:	f000 f926 	bl	8005894 <_fflush_r>
 8005648:	bb30      	cbnz	r0, 8005698 <__swbuf_r+0x90>
 800564a:	68a3      	ldr	r3, [r4, #8]
 800564c:	3b01      	subs	r3, #1
 800564e:	60a3      	str	r3, [r4, #8]
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	1c5a      	adds	r2, r3, #1
 8005654:	6022      	str	r2, [r4, #0]
 8005656:	701e      	strb	r6, [r3, #0]
 8005658:	6963      	ldr	r3, [r4, #20]
 800565a:	3001      	adds	r0, #1
 800565c:	4283      	cmp	r3, r0
 800565e:	d004      	beq.n	800566a <__swbuf_r+0x62>
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	07db      	lsls	r3, r3, #31
 8005664:	d506      	bpl.n	8005674 <__swbuf_r+0x6c>
 8005666:	2e0a      	cmp	r6, #10
 8005668:	d104      	bne.n	8005674 <__swbuf_r+0x6c>
 800566a:	4621      	mov	r1, r4
 800566c:	4628      	mov	r0, r5
 800566e:	f000 f911 	bl	8005894 <_fflush_r>
 8005672:	b988      	cbnz	r0, 8005698 <__swbuf_r+0x90>
 8005674:	4638      	mov	r0, r7
 8005676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005678:	4b0a      	ldr	r3, [pc, #40]	; (80056a4 <__swbuf_r+0x9c>)
 800567a:	429c      	cmp	r4, r3
 800567c:	d101      	bne.n	8005682 <__swbuf_r+0x7a>
 800567e:	68ac      	ldr	r4, [r5, #8]
 8005680:	e7cf      	b.n	8005622 <__swbuf_r+0x1a>
 8005682:	4b09      	ldr	r3, [pc, #36]	; (80056a8 <__swbuf_r+0xa0>)
 8005684:	429c      	cmp	r4, r3
 8005686:	bf08      	it	eq
 8005688:	68ec      	ldreq	r4, [r5, #12]
 800568a:	e7ca      	b.n	8005622 <__swbuf_r+0x1a>
 800568c:	4621      	mov	r1, r4
 800568e:	4628      	mov	r0, r5
 8005690:	f000 f80c 	bl	80056ac <__swsetup_r>
 8005694:	2800      	cmp	r0, #0
 8005696:	d0cb      	beq.n	8005630 <__swbuf_r+0x28>
 8005698:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800569c:	e7ea      	b.n	8005674 <__swbuf_r+0x6c>
 800569e:	bf00      	nop
 80056a0:	08005c98 	.word	0x08005c98
 80056a4:	08005cb8 	.word	0x08005cb8
 80056a8:	08005c78 	.word	0x08005c78

080056ac <__swsetup_r>:
 80056ac:	4b32      	ldr	r3, [pc, #200]	; (8005778 <__swsetup_r+0xcc>)
 80056ae:	b570      	push	{r4, r5, r6, lr}
 80056b0:	681d      	ldr	r5, [r3, #0]
 80056b2:	4606      	mov	r6, r0
 80056b4:	460c      	mov	r4, r1
 80056b6:	b125      	cbz	r5, 80056c2 <__swsetup_r+0x16>
 80056b8:	69ab      	ldr	r3, [r5, #24]
 80056ba:	b913      	cbnz	r3, 80056c2 <__swsetup_r+0x16>
 80056bc:	4628      	mov	r0, r5
 80056be:	f7fe fd63 	bl	8004188 <__sinit>
 80056c2:	4b2e      	ldr	r3, [pc, #184]	; (800577c <__swsetup_r+0xd0>)
 80056c4:	429c      	cmp	r4, r3
 80056c6:	d10f      	bne.n	80056e8 <__swsetup_r+0x3c>
 80056c8:	686c      	ldr	r4, [r5, #4]
 80056ca:	89a3      	ldrh	r3, [r4, #12]
 80056cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80056d0:	0719      	lsls	r1, r3, #28
 80056d2:	d42c      	bmi.n	800572e <__swsetup_r+0x82>
 80056d4:	06dd      	lsls	r5, r3, #27
 80056d6:	d411      	bmi.n	80056fc <__swsetup_r+0x50>
 80056d8:	2309      	movs	r3, #9
 80056da:	6033      	str	r3, [r6, #0]
 80056dc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80056e0:	81a3      	strh	r3, [r4, #12]
 80056e2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80056e6:	e03e      	b.n	8005766 <__swsetup_r+0xba>
 80056e8:	4b25      	ldr	r3, [pc, #148]	; (8005780 <__swsetup_r+0xd4>)
 80056ea:	429c      	cmp	r4, r3
 80056ec:	d101      	bne.n	80056f2 <__swsetup_r+0x46>
 80056ee:	68ac      	ldr	r4, [r5, #8]
 80056f0:	e7eb      	b.n	80056ca <__swsetup_r+0x1e>
 80056f2:	4b24      	ldr	r3, [pc, #144]	; (8005784 <__swsetup_r+0xd8>)
 80056f4:	429c      	cmp	r4, r3
 80056f6:	bf08      	it	eq
 80056f8:	68ec      	ldreq	r4, [r5, #12]
 80056fa:	e7e6      	b.n	80056ca <__swsetup_r+0x1e>
 80056fc:	0758      	lsls	r0, r3, #29
 80056fe:	d512      	bpl.n	8005726 <__swsetup_r+0x7a>
 8005700:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005702:	b141      	cbz	r1, 8005716 <__swsetup_r+0x6a>
 8005704:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005708:	4299      	cmp	r1, r3
 800570a:	d002      	beq.n	8005712 <__swsetup_r+0x66>
 800570c:	4630      	mov	r0, r6
 800570e:	f000 f997 	bl	8005a40 <_free_r>
 8005712:	2300      	movs	r3, #0
 8005714:	6363      	str	r3, [r4, #52]	; 0x34
 8005716:	89a3      	ldrh	r3, [r4, #12]
 8005718:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800571c:	81a3      	strh	r3, [r4, #12]
 800571e:	2300      	movs	r3, #0
 8005720:	6063      	str	r3, [r4, #4]
 8005722:	6923      	ldr	r3, [r4, #16]
 8005724:	6023      	str	r3, [r4, #0]
 8005726:	89a3      	ldrh	r3, [r4, #12]
 8005728:	f043 0308 	orr.w	r3, r3, #8
 800572c:	81a3      	strh	r3, [r4, #12]
 800572e:	6923      	ldr	r3, [r4, #16]
 8005730:	b94b      	cbnz	r3, 8005746 <__swsetup_r+0x9a>
 8005732:	89a3      	ldrh	r3, [r4, #12]
 8005734:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800573c:	d003      	beq.n	8005746 <__swsetup_r+0x9a>
 800573e:	4621      	mov	r1, r4
 8005740:	4630      	mov	r0, r6
 8005742:	f000 f909 	bl	8005958 <__smakebuf_r>
 8005746:	89a0      	ldrh	r0, [r4, #12]
 8005748:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800574c:	f010 0301 	ands.w	r3, r0, #1
 8005750:	d00a      	beq.n	8005768 <__swsetup_r+0xbc>
 8005752:	2300      	movs	r3, #0
 8005754:	60a3      	str	r3, [r4, #8]
 8005756:	6963      	ldr	r3, [r4, #20]
 8005758:	425b      	negs	r3, r3
 800575a:	61a3      	str	r3, [r4, #24]
 800575c:	6923      	ldr	r3, [r4, #16]
 800575e:	b943      	cbnz	r3, 8005772 <__swsetup_r+0xc6>
 8005760:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005764:	d1ba      	bne.n	80056dc <__swsetup_r+0x30>
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	0781      	lsls	r1, r0, #30
 800576a:	bf58      	it	pl
 800576c:	6963      	ldrpl	r3, [r4, #20]
 800576e:	60a3      	str	r3, [r4, #8]
 8005770:	e7f4      	b.n	800575c <__swsetup_r+0xb0>
 8005772:	2000      	movs	r0, #0
 8005774:	e7f7      	b.n	8005766 <__swsetup_r+0xba>
 8005776:	bf00      	nop
 8005778:	2000040c 	.word	0x2000040c
 800577c:	08005c98 	.word	0x08005c98
 8005780:	08005cb8 	.word	0x08005cb8
 8005784:	08005c78 	.word	0x08005c78

08005788 <__sflush_r>:
 8005788:	898a      	ldrh	r2, [r1, #12]
 800578a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800578e:	4605      	mov	r5, r0
 8005790:	0710      	lsls	r0, r2, #28
 8005792:	460c      	mov	r4, r1
 8005794:	d458      	bmi.n	8005848 <__sflush_r+0xc0>
 8005796:	684b      	ldr	r3, [r1, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	dc05      	bgt.n	80057a8 <__sflush_r+0x20>
 800579c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800579e:	2b00      	cmp	r3, #0
 80057a0:	dc02      	bgt.n	80057a8 <__sflush_r+0x20>
 80057a2:	2000      	movs	r0, #0
 80057a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057aa:	2e00      	cmp	r6, #0
 80057ac:	d0f9      	beq.n	80057a2 <__sflush_r+0x1a>
 80057ae:	2300      	movs	r3, #0
 80057b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80057b4:	682f      	ldr	r7, [r5, #0]
 80057b6:	602b      	str	r3, [r5, #0]
 80057b8:	d032      	beq.n	8005820 <__sflush_r+0x98>
 80057ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80057bc:	89a3      	ldrh	r3, [r4, #12]
 80057be:	075a      	lsls	r2, r3, #29
 80057c0:	d505      	bpl.n	80057ce <__sflush_r+0x46>
 80057c2:	6863      	ldr	r3, [r4, #4]
 80057c4:	1ac0      	subs	r0, r0, r3
 80057c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80057c8:	b10b      	cbz	r3, 80057ce <__sflush_r+0x46>
 80057ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057cc:	1ac0      	subs	r0, r0, r3
 80057ce:	2300      	movs	r3, #0
 80057d0:	4602      	mov	r2, r0
 80057d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80057d4:	6a21      	ldr	r1, [r4, #32]
 80057d6:	4628      	mov	r0, r5
 80057d8:	47b0      	blx	r6
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	d106      	bne.n	80057ee <__sflush_r+0x66>
 80057e0:	6829      	ldr	r1, [r5, #0]
 80057e2:	291d      	cmp	r1, #29
 80057e4:	d82c      	bhi.n	8005840 <__sflush_r+0xb8>
 80057e6:	4a2a      	ldr	r2, [pc, #168]	; (8005890 <__sflush_r+0x108>)
 80057e8:	40ca      	lsrs	r2, r1
 80057ea:	07d6      	lsls	r6, r2, #31
 80057ec:	d528      	bpl.n	8005840 <__sflush_r+0xb8>
 80057ee:	2200      	movs	r2, #0
 80057f0:	6062      	str	r2, [r4, #4]
 80057f2:	04d9      	lsls	r1, r3, #19
 80057f4:	6922      	ldr	r2, [r4, #16]
 80057f6:	6022      	str	r2, [r4, #0]
 80057f8:	d504      	bpl.n	8005804 <__sflush_r+0x7c>
 80057fa:	1c42      	adds	r2, r0, #1
 80057fc:	d101      	bne.n	8005802 <__sflush_r+0x7a>
 80057fe:	682b      	ldr	r3, [r5, #0]
 8005800:	b903      	cbnz	r3, 8005804 <__sflush_r+0x7c>
 8005802:	6560      	str	r0, [r4, #84]	; 0x54
 8005804:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005806:	602f      	str	r7, [r5, #0]
 8005808:	2900      	cmp	r1, #0
 800580a:	d0ca      	beq.n	80057a2 <__sflush_r+0x1a>
 800580c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005810:	4299      	cmp	r1, r3
 8005812:	d002      	beq.n	800581a <__sflush_r+0x92>
 8005814:	4628      	mov	r0, r5
 8005816:	f000 f913 	bl	8005a40 <_free_r>
 800581a:	2000      	movs	r0, #0
 800581c:	6360      	str	r0, [r4, #52]	; 0x34
 800581e:	e7c1      	b.n	80057a4 <__sflush_r+0x1c>
 8005820:	6a21      	ldr	r1, [r4, #32]
 8005822:	2301      	movs	r3, #1
 8005824:	4628      	mov	r0, r5
 8005826:	47b0      	blx	r6
 8005828:	1c41      	adds	r1, r0, #1
 800582a:	d1c7      	bne.n	80057bc <__sflush_r+0x34>
 800582c:	682b      	ldr	r3, [r5, #0]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d0c4      	beq.n	80057bc <__sflush_r+0x34>
 8005832:	2b1d      	cmp	r3, #29
 8005834:	d001      	beq.n	800583a <__sflush_r+0xb2>
 8005836:	2b16      	cmp	r3, #22
 8005838:	d101      	bne.n	800583e <__sflush_r+0xb6>
 800583a:	602f      	str	r7, [r5, #0]
 800583c:	e7b1      	b.n	80057a2 <__sflush_r+0x1a>
 800583e:	89a3      	ldrh	r3, [r4, #12]
 8005840:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005844:	81a3      	strh	r3, [r4, #12]
 8005846:	e7ad      	b.n	80057a4 <__sflush_r+0x1c>
 8005848:	690f      	ldr	r7, [r1, #16]
 800584a:	2f00      	cmp	r7, #0
 800584c:	d0a9      	beq.n	80057a2 <__sflush_r+0x1a>
 800584e:	0793      	lsls	r3, r2, #30
 8005850:	680e      	ldr	r6, [r1, #0]
 8005852:	bf08      	it	eq
 8005854:	694b      	ldreq	r3, [r1, #20]
 8005856:	600f      	str	r7, [r1, #0]
 8005858:	bf18      	it	ne
 800585a:	2300      	movne	r3, #0
 800585c:	eba6 0807 	sub.w	r8, r6, r7
 8005860:	608b      	str	r3, [r1, #8]
 8005862:	f1b8 0f00 	cmp.w	r8, #0
 8005866:	dd9c      	ble.n	80057a2 <__sflush_r+0x1a>
 8005868:	6a21      	ldr	r1, [r4, #32]
 800586a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800586c:	4643      	mov	r3, r8
 800586e:	463a      	mov	r2, r7
 8005870:	4628      	mov	r0, r5
 8005872:	47b0      	blx	r6
 8005874:	2800      	cmp	r0, #0
 8005876:	dc06      	bgt.n	8005886 <__sflush_r+0xfe>
 8005878:	89a3      	ldrh	r3, [r4, #12]
 800587a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800587e:	81a3      	strh	r3, [r4, #12]
 8005880:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005884:	e78e      	b.n	80057a4 <__sflush_r+0x1c>
 8005886:	4407      	add	r7, r0
 8005888:	eba8 0800 	sub.w	r8, r8, r0
 800588c:	e7e9      	b.n	8005862 <__sflush_r+0xda>
 800588e:	bf00      	nop
 8005890:	20400001 	.word	0x20400001

08005894 <_fflush_r>:
 8005894:	b538      	push	{r3, r4, r5, lr}
 8005896:	690b      	ldr	r3, [r1, #16]
 8005898:	4605      	mov	r5, r0
 800589a:	460c      	mov	r4, r1
 800589c:	b913      	cbnz	r3, 80058a4 <_fflush_r+0x10>
 800589e:	2500      	movs	r5, #0
 80058a0:	4628      	mov	r0, r5
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	b118      	cbz	r0, 80058ae <_fflush_r+0x1a>
 80058a6:	6983      	ldr	r3, [r0, #24]
 80058a8:	b90b      	cbnz	r3, 80058ae <_fflush_r+0x1a>
 80058aa:	f7fe fc6d 	bl	8004188 <__sinit>
 80058ae:	4b14      	ldr	r3, [pc, #80]	; (8005900 <_fflush_r+0x6c>)
 80058b0:	429c      	cmp	r4, r3
 80058b2:	d11b      	bne.n	80058ec <_fflush_r+0x58>
 80058b4:	686c      	ldr	r4, [r5, #4]
 80058b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d0ef      	beq.n	800589e <_fflush_r+0xa>
 80058be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80058c0:	07d0      	lsls	r0, r2, #31
 80058c2:	d404      	bmi.n	80058ce <_fflush_r+0x3a>
 80058c4:	0599      	lsls	r1, r3, #22
 80058c6:	d402      	bmi.n	80058ce <_fflush_r+0x3a>
 80058c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058ca:	f7fe fcfb 	bl	80042c4 <__retarget_lock_acquire_recursive>
 80058ce:	4628      	mov	r0, r5
 80058d0:	4621      	mov	r1, r4
 80058d2:	f7ff ff59 	bl	8005788 <__sflush_r>
 80058d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80058d8:	07da      	lsls	r2, r3, #31
 80058da:	4605      	mov	r5, r0
 80058dc:	d4e0      	bmi.n	80058a0 <_fflush_r+0xc>
 80058de:	89a3      	ldrh	r3, [r4, #12]
 80058e0:	059b      	lsls	r3, r3, #22
 80058e2:	d4dd      	bmi.n	80058a0 <_fflush_r+0xc>
 80058e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80058e6:	f7fe fcee 	bl	80042c6 <__retarget_lock_release_recursive>
 80058ea:	e7d9      	b.n	80058a0 <_fflush_r+0xc>
 80058ec:	4b05      	ldr	r3, [pc, #20]	; (8005904 <_fflush_r+0x70>)
 80058ee:	429c      	cmp	r4, r3
 80058f0:	d101      	bne.n	80058f6 <_fflush_r+0x62>
 80058f2:	68ac      	ldr	r4, [r5, #8]
 80058f4:	e7df      	b.n	80058b6 <_fflush_r+0x22>
 80058f6:	4b04      	ldr	r3, [pc, #16]	; (8005908 <_fflush_r+0x74>)
 80058f8:	429c      	cmp	r4, r3
 80058fa:	bf08      	it	eq
 80058fc:	68ec      	ldreq	r4, [r5, #12]
 80058fe:	e7da      	b.n	80058b6 <_fflush_r+0x22>
 8005900:	08005c98 	.word	0x08005c98
 8005904:	08005cb8 	.word	0x08005cb8
 8005908:	08005c78 	.word	0x08005c78

0800590c <__swhatbuf_r>:
 800590c:	b570      	push	{r4, r5, r6, lr}
 800590e:	460e      	mov	r6, r1
 8005910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005914:	2900      	cmp	r1, #0
 8005916:	b096      	sub	sp, #88	; 0x58
 8005918:	4614      	mov	r4, r2
 800591a:	461d      	mov	r5, r3
 800591c:	da08      	bge.n	8005930 <__swhatbuf_r+0x24>
 800591e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005922:	2200      	movs	r2, #0
 8005924:	602a      	str	r2, [r5, #0]
 8005926:	061a      	lsls	r2, r3, #24
 8005928:	d410      	bmi.n	800594c <__swhatbuf_r+0x40>
 800592a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800592e:	e00e      	b.n	800594e <__swhatbuf_r+0x42>
 8005930:	466a      	mov	r2, sp
 8005932:	f000 f901 	bl	8005b38 <_fstat_r>
 8005936:	2800      	cmp	r0, #0
 8005938:	dbf1      	blt.n	800591e <__swhatbuf_r+0x12>
 800593a:	9a01      	ldr	r2, [sp, #4]
 800593c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005940:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005944:	425a      	negs	r2, r3
 8005946:	415a      	adcs	r2, r3
 8005948:	602a      	str	r2, [r5, #0]
 800594a:	e7ee      	b.n	800592a <__swhatbuf_r+0x1e>
 800594c:	2340      	movs	r3, #64	; 0x40
 800594e:	2000      	movs	r0, #0
 8005950:	6023      	str	r3, [r4, #0]
 8005952:	b016      	add	sp, #88	; 0x58
 8005954:	bd70      	pop	{r4, r5, r6, pc}
	...

08005958 <__smakebuf_r>:
 8005958:	898b      	ldrh	r3, [r1, #12]
 800595a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800595c:	079d      	lsls	r5, r3, #30
 800595e:	4606      	mov	r6, r0
 8005960:	460c      	mov	r4, r1
 8005962:	d507      	bpl.n	8005974 <__smakebuf_r+0x1c>
 8005964:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	6123      	str	r3, [r4, #16]
 800596c:	2301      	movs	r3, #1
 800596e:	6163      	str	r3, [r4, #20]
 8005970:	b002      	add	sp, #8
 8005972:	bd70      	pop	{r4, r5, r6, pc}
 8005974:	ab01      	add	r3, sp, #4
 8005976:	466a      	mov	r2, sp
 8005978:	f7ff ffc8 	bl	800590c <__swhatbuf_r>
 800597c:	9900      	ldr	r1, [sp, #0]
 800597e:	4605      	mov	r5, r0
 8005980:	4630      	mov	r0, r6
 8005982:	f7fe fcd3 	bl	800432c <_malloc_r>
 8005986:	b948      	cbnz	r0, 800599c <__smakebuf_r+0x44>
 8005988:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800598c:	059a      	lsls	r2, r3, #22
 800598e:	d4ef      	bmi.n	8005970 <__smakebuf_r+0x18>
 8005990:	f023 0303 	bic.w	r3, r3, #3
 8005994:	f043 0302 	orr.w	r3, r3, #2
 8005998:	81a3      	strh	r3, [r4, #12]
 800599a:	e7e3      	b.n	8005964 <__smakebuf_r+0xc>
 800599c:	4b0d      	ldr	r3, [pc, #52]	; (80059d4 <__smakebuf_r+0x7c>)
 800599e:	62b3      	str	r3, [r6, #40]	; 0x28
 80059a0:	89a3      	ldrh	r3, [r4, #12]
 80059a2:	6020      	str	r0, [r4, #0]
 80059a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80059a8:	81a3      	strh	r3, [r4, #12]
 80059aa:	9b00      	ldr	r3, [sp, #0]
 80059ac:	6163      	str	r3, [r4, #20]
 80059ae:	9b01      	ldr	r3, [sp, #4]
 80059b0:	6120      	str	r0, [r4, #16]
 80059b2:	b15b      	cbz	r3, 80059cc <__smakebuf_r+0x74>
 80059b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80059b8:	4630      	mov	r0, r6
 80059ba:	f000 f8cf 	bl	8005b5c <_isatty_r>
 80059be:	b128      	cbz	r0, 80059cc <__smakebuf_r+0x74>
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	f023 0303 	bic.w	r3, r3, #3
 80059c6:	f043 0301 	orr.w	r3, r3, #1
 80059ca:	81a3      	strh	r3, [r4, #12]
 80059cc:	89a0      	ldrh	r0, [r4, #12]
 80059ce:	4305      	orrs	r5, r0
 80059d0:	81a5      	strh	r5, [r4, #12]
 80059d2:	e7cd      	b.n	8005970 <__smakebuf_r+0x18>
 80059d4:	08004121 	.word	0x08004121

080059d8 <memcpy>:
 80059d8:	440a      	add	r2, r1
 80059da:	4291      	cmp	r1, r2
 80059dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80059e0:	d100      	bne.n	80059e4 <memcpy+0xc>
 80059e2:	4770      	bx	lr
 80059e4:	b510      	push	{r4, lr}
 80059e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80059ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80059ee:	4291      	cmp	r1, r2
 80059f0:	d1f9      	bne.n	80059e6 <memcpy+0xe>
 80059f2:	bd10      	pop	{r4, pc}

080059f4 <memmove>:
 80059f4:	4288      	cmp	r0, r1
 80059f6:	b510      	push	{r4, lr}
 80059f8:	eb01 0402 	add.w	r4, r1, r2
 80059fc:	d902      	bls.n	8005a04 <memmove+0x10>
 80059fe:	4284      	cmp	r4, r0
 8005a00:	4623      	mov	r3, r4
 8005a02:	d807      	bhi.n	8005a14 <memmove+0x20>
 8005a04:	1e43      	subs	r3, r0, #1
 8005a06:	42a1      	cmp	r1, r4
 8005a08:	d008      	beq.n	8005a1c <memmove+0x28>
 8005a0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005a0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005a12:	e7f8      	b.n	8005a06 <memmove+0x12>
 8005a14:	4402      	add	r2, r0
 8005a16:	4601      	mov	r1, r0
 8005a18:	428a      	cmp	r2, r1
 8005a1a:	d100      	bne.n	8005a1e <memmove+0x2a>
 8005a1c:	bd10      	pop	{r4, pc}
 8005a1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005a22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005a26:	e7f7      	b.n	8005a18 <memmove+0x24>

08005a28 <__malloc_lock>:
 8005a28:	4801      	ldr	r0, [pc, #4]	; (8005a30 <__malloc_lock+0x8>)
 8005a2a:	f7fe bc4b 	b.w	80042c4 <__retarget_lock_acquire_recursive>
 8005a2e:	bf00      	nop
 8005a30:	20000678 	.word	0x20000678

08005a34 <__malloc_unlock>:
 8005a34:	4801      	ldr	r0, [pc, #4]	; (8005a3c <__malloc_unlock+0x8>)
 8005a36:	f7fe bc46 	b.w	80042c6 <__retarget_lock_release_recursive>
 8005a3a:	bf00      	nop
 8005a3c:	20000678 	.word	0x20000678

08005a40 <_free_r>:
 8005a40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005a42:	2900      	cmp	r1, #0
 8005a44:	d044      	beq.n	8005ad0 <_free_r+0x90>
 8005a46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a4a:	9001      	str	r0, [sp, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f1a1 0404 	sub.w	r4, r1, #4
 8005a52:	bfb8      	it	lt
 8005a54:	18e4      	addlt	r4, r4, r3
 8005a56:	f7ff ffe7 	bl	8005a28 <__malloc_lock>
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <_free_r+0x94>)
 8005a5c:	9801      	ldr	r0, [sp, #4]
 8005a5e:	6813      	ldr	r3, [r2, #0]
 8005a60:	b933      	cbnz	r3, 8005a70 <_free_r+0x30>
 8005a62:	6063      	str	r3, [r4, #4]
 8005a64:	6014      	str	r4, [r2, #0]
 8005a66:	b003      	add	sp, #12
 8005a68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a6c:	f7ff bfe2 	b.w	8005a34 <__malloc_unlock>
 8005a70:	42a3      	cmp	r3, r4
 8005a72:	d908      	bls.n	8005a86 <_free_r+0x46>
 8005a74:	6825      	ldr	r5, [r4, #0]
 8005a76:	1961      	adds	r1, r4, r5
 8005a78:	428b      	cmp	r3, r1
 8005a7a:	bf01      	itttt	eq
 8005a7c:	6819      	ldreq	r1, [r3, #0]
 8005a7e:	685b      	ldreq	r3, [r3, #4]
 8005a80:	1949      	addeq	r1, r1, r5
 8005a82:	6021      	streq	r1, [r4, #0]
 8005a84:	e7ed      	b.n	8005a62 <_free_r+0x22>
 8005a86:	461a      	mov	r2, r3
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	b10b      	cbz	r3, 8005a90 <_free_r+0x50>
 8005a8c:	42a3      	cmp	r3, r4
 8005a8e:	d9fa      	bls.n	8005a86 <_free_r+0x46>
 8005a90:	6811      	ldr	r1, [r2, #0]
 8005a92:	1855      	adds	r5, r2, r1
 8005a94:	42a5      	cmp	r5, r4
 8005a96:	d10b      	bne.n	8005ab0 <_free_r+0x70>
 8005a98:	6824      	ldr	r4, [r4, #0]
 8005a9a:	4421      	add	r1, r4
 8005a9c:	1854      	adds	r4, r2, r1
 8005a9e:	42a3      	cmp	r3, r4
 8005aa0:	6011      	str	r1, [r2, #0]
 8005aa2:	d1e0      	bne.n	8005a66 <_free_r+0x26>
 8005aa4:	681c      	ldr	r4, [r3, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	6053      	str	r3, [r2, #4]
 8005aaa:	4421      	add	r1, r4
 8005aac:	6011      	str	r1, [r2, #0]
 8005aae:	e7da      	b.n	8005a66 <_free_r+0x26>
 8005ab0:	d902      	bls.n	8005ab8 <_free_r+0x78>
 8005ab2:	230c      	movs	r3, #12
 8005ab4:	6003      	str	r3, [r0, #0]
 8005ab6:	e7d6      	b.n	8005a66 <_free_r+0x26>
 8005ab8:	6825      	ldr	r5, [r4, #0]
 8005aba:	1961      	adds	r1, r4, r5
 8005abc:	428b      	cmp	r3, r1
 8005abe:	bf04      	itt	eq
 8005ac0:	6819      	ldreq	r1, [r3, #0]
 8005ac2:	685b      	ldreq	r3, [r3, #4]
 8005ac4:	6063      	str	r3, [r4, #4]
 8005ac6:	bf04      	itt	eq
 8005ac8:	1949      	addeq	r1, r1, r5
 8005aca:	6021      	streq	r1, [r4, #0]
 8005acc:	6054      	str	r4, [r2, #4]
 8005ace:	e7ca      	b.n	8005a66 <_free_r+0x26>
 8005ad0:	b003      	add	sp, #12
 8005ad2:	bd30      	pop	{r4, r5, pc}
 8005ad4:	2000067c 	.word	0x2000067c

08005ad8 <_realloc_r>:
 8005ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005adc:	4680      	mov	r8, r0
 8005ade:	4614      	mov	r4, r2
 8005ae0:	460e      	mov	r6, r1
 8005ae2:	b921      	cbnz	r1, 8005aee <_realloc_r+0x16>
 8005ae4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ae8:	4611      	mov	r1, r2
 8005aea:	f7fe bc1f 	b.w	800432c <_malloc_r>
 8005aee:	b92a      	cbnz	r2, 8005afc <_realloc_r+0x24>
 8005af0:	f7ff ffa6 	bl	8005a40 <_free_r>
 8005af4:	4625      	mov	r5, r4
 8005af6:	4628      	mov	r0, r5
 8005af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005afc:	f000 f83e 	bl	8005b7c <_malloc_usable_size_r>
 8005b00:	4284      	cmp	r4, r0
 8005b02:	4607      	mov	r7, r0
 8005b04:	d802      	bhi.n	8005b0c <_realloc_r+0x34>
 8005b06:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005b0a:	d812      	bhi.n	8005b32 <_realloc_r+0x5a>
 8005b0c:	4621      	mov	r1, r4
 8005b0e:	4640      	mov	r0, r8
 8005b10:	f7fe fc0c 	bl	800432c <_malloc_r>
 8005b14:	4605      	mov	r5, r0
 8005b16:	2800      	cmp	r0, #0
 8005b18:	d0ed      	beq.n	8005af6 <_realloc_r+0x1e>
 8005b1a:	42bc      	cmp	r4, r7
 8005b1c:	4622      	mov	r2, r4
 8005b1e:	4631      	mov	r1, r6
 8005b20:	bf28      	it	cs
 8005b22:	463a      	movcs	r2, r7
 8005b24:	f7ff ff58 	bl	80059d8 <memcpy>
 8005b28:	4631      	mov	r1, r6
 8005b2a:	4640      	mov	r0, r8
 8005b2c:	f7ff ff88 	bl	8005a40 <_free_r>
 8005b30:	e7e1      	b.n	8005af6 <_realloc_r+0x1e>
 8005b32:	4635      	mov	r5, r6
 8005b34:	e7df      	b.n	8005af6 <_realloc_r+0x1e>
	...

08005b38 <_fstat_r>:
 8005b38:	b538      	push	{r3, r4, r5, lr}
 8005b3a:	4d07      	ldr	r5, [pc, #28]	; (8005b58 <_fstat_r+0x20>)
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	4604      	mov	r4, r0
 8005b40:	4608      	mov	r0, r1
 8005b42:	4611      	mov	r1, r2
 8005b44:	602b      	str	r3, [r5, #0]
 8005b46:	f7fb fb0c 	bl	8001162 <_fstat>
 8005b4a:	1c43      	adds	r3, r0, #1
 8005b4c:	d102      	bne.n	8005b54 <_fstat_r+0x1c>
 8005b4e:	682b      	ldr	r3, [r5, #0]
 8005b50:	b103      	cbz	r3, 8005b54 <_fstat_r+0x1c>
 8005b52:	6023      	str	r3, [r4, #0]
 8005b54:	bd38      	pop	{r3, r4, r5, pc}
 8005b56:	bf00      	nop
 8005b58:	20000684 	.word	0x20000684

08005b5c <_isatty_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4d06      	ldr	r5, [pc, #24]	; (8005b78 <_isatty_r+0x1c>)
 8005b60:	2300      	movs	r3, #0
 8005b62:	4604      	mov	r4, r0
 8005b64:	4608      	mov	r0, r1
 8005b66:	602b      	str	r3, [r5, #0]
 8005b68:	f7fb fb0b 	bl	8001182 <_isatty>
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	d102      	bne.n	8005b76 <_isatty_r+0x1a>
 8005b70:	682b      	ldr	r3, [r5, #0]
 8005b72:	b103      	cbz	r3, 8005b76 <_isatty_r+0x1a>
 8005b74:	6023      	str	r3, [r4, #0]
 8005b76:	bd38      	pop	{r3, r4, r5, pc}
 8005b78:	20000684 	.word	0x20000684

08005b7c <_malloc_usable_size_r>:
 8005b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b80:	1f18      	subs	r0, r3, #4
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	bfbc      	itt	lt
 8005b86:	580b      	ldrlt	r3, [r1, r0]
 8005b88:	18c0      	addlt	r0, r0, r3
 8005b8a:	4770      	bx	lr

08005b8c <_init>:
 8005b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8e:	bf00      	nop
 8005b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b92:	bc08      	pop	{r3}
 8005b94:	469e      	mov	lr, r3
 8005b96:	4770      	bx	lr

08005b98 <_fini>:
 8005b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b9a:	bf00      	nop
 8005b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b9e:	bc08      	pop	{r3}
 8005ba0:	469e      	mov	lr, r3
 8005ba2:	4770      	bx	lr
